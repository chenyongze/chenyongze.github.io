{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/aath/source/style.scss","path":"style.scss","modified":0,"renderable":1},{"_id":"themes/aath/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/aath/source/lib/in-view.min.js","path":"lib/in-view.min.js","modified":0,"renderable":1},{"_id":"themes/aath/source/lib/jquery.fancybox.min.css","path":"lib/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"themes/aath/source/lib/jquery.fancybox.min.js","path":"lib/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/aath/source/lib/lodash.min.js","path":"lib/lodash.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"64ea94ddeb8b15303d14c1ea04e5e309acb4f186","modified":1537936063936},{"_id":"themes/aath/_config.yml","hash":"2cdb40884474532a6a69912d48cac7d30ea559a0","modified":1537934340630},{"_id":"themes/aath/README.en.md","hash":"9b867ba4ef023bd53d394d961d29016760db4352","modified":1537918589444},{"_id":"themes/aath/LICENSE","hash":"5835213bd72873e87ee97e546d023ca970bf8c08","modified":1537918589443},{"_id":"themes/aath/README.md","hash":"571832238d609b356b91c917aff6360c7800041b","modified":1537918589444},{"_id":"themes/aath/package.json","hash":"ec7b145ae956c6fc61ffa055b2fac67446a63461","modified":1537918589449},{"_id":"source/_posts/2017-08-01-static-website-with-jekyll.md","hash":"03b254a8b36dfeed210a45a954e3450fd815f9c7","modified":1537932212972},{"_id":"source/_posts/2017-08-08-multisite-setting.md","hash":"6549137e4183b2e6b19ff9001fa4f930fd812ac0","modified":1537843670561},{"_id":"source/_posts/2017-08-09-comments-with-isso.md","hash":"41c228fdb7a6cdc384355a4cf2b1e153347e956e","modified":1537843670562},{"_id":"source/_posts/2018-04-05-go-learn.md","hash":"38932b8f609ad393eda87e5e52245a8e38566ba1","modified":1537843670562},{"_id":"source/_posts/2018-04-05-jekyll-js.md","hash":"fe84e6e6d49c14c224878713d8eceb2847206c62","modified":1537932257386},{"_id":"source/_posts/2018-04-05-linux-ssh-1.md","hash":"c7222305ce54c294c915778ea30a4b32d7de5855","modified":1537932171823},{"_id":"source/_posts/2018-04-05-python-zz.md","hash":"a5d6f5ce768d91a5f5dceff9126f9be5274b57ae","modified":1537843670563},{"_id":"source/_posts/2018-04-05-me-20151231.md","hash":"561e4fd08b6ce6d14835942150357f7b59b005d7","modified":1537843670563},{"_id":"source/_posts/2018-04-05-shell-push.md","hash":"36c6b9cae73e32b6538b6c716707f675f55dfad8","modified":1537843670563},{"_id":"source/_posts/2018-04-05-tomb-sweeping-day.md","hash":"129b5fbab541180a760ea0ef76b463f3045d56b3","modified":1537843670564},{"_id":"source/_posts/2018-04-08-kafka-1.md","hash":"009a42b47477f0c6bb35fcf7c5d43bcdf4bd6fc0","modified":1537843670564},{"_id":"source/_posts/2018-04-10-$_FILES.md","hash":"3039ff56cc898060875c03f88bd7a123edc6c77f","modified":1537843670564},{"_id":"source/_posts/2018-04-09-小程序-介绍.md","hash":"df9582cbf4cba87e1b64c1642807a848ddb0972b","modified":1537843670564},{"_id":"source/_posts/2018-09-26-好好的.md","hash":"fc20b1301cb2a2bdcfd1409a392b84a8aece44ef","modified":1537936228047},{"_id":"source/_posts/2018-04-11-centos-yum.md","hash":"f46ad65cc7c213e18539a83636a2464eb6fcecce","modified":1537843670565},{"_id":"source/_posts/2018-04-11-zsh.md","hash":"52670f1327b565084ee32996841196d5f66ed487","modified":1537843670565},{"_id":"source/_posts/2018-05-18-ngrok.md","hash":"6c6bbf71813b0e23d1194414cae6409cdbf277cf","modified":1537933727997},{"_id":"themes/aath/.git/HEAD","hash":"dd8e8826088c2a83b5ebe1e83fa0aa5f0ed56f98","modified":1537918589437},{"_id":"source/about/index.md","hash":"11a1bd0c00aee15e5d2489b30f4815fbad3f4d83","modified":1537934215763},{"_id":"themes/aath/.git/config","hash":"b52101f22f2820945c6bf2f611a2ca3cbb742eab","modified":1537918589439},{"_id":"source/tags/index.md","hash":"dce38bf9755ce3e0fc3598ff8417af3c074cca2a","modified":1537933558077},{"_id":"themes/aath/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1537918578823},{"_id":"themes/aath/.git/index","hash":"8601155550de2a4781965f7c82ddd4649d6aab71","modified":1537935569658},{"_id":"themes/aath/.git/packed-refs","hash":"1ee016fbbd20f1820efa6ce83a1d6efbafb9f752","modified":1537918589435},{"_id":"themes/aath/languages/de.yml","hash":"4b8a2004889325b5d60deddab4a48f4891f11485","modified":1537918589444},{"_id":"themes/aath/languages/default.yml","hash":"1769e78bc311975f95f80617713fdb4e870ac2cc","modified":1537918589444},{"_id":"themes/aath/languages/es.yml","hash":"d1661debe172540a210e5c321f558597ee1bfabb","modified":1537918589444},{"_id":"themes/aath/languages/fr.yml","hash":"d1573a4575df89e38abe004ead7ea2fe4757993e","modified":1537918589444},{"_id":"themes/aath/languages/ja.yml","hash":"b5cf8db148de0977ad70c15e4187dceb190ba296","modified":1537918589445},{"_id":"themes/aath/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1537918589445},{"_id":"themes/aath/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1537918589445},{"_id":"themes/aath/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1537918589445},{"_id":"themes/aath/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1537918589445},{"_id":"themes/aath/languages/ru.yml","hash":"fd1e60ce3f9bbbd836dc754bcd8b8daff9b771b1","modified":1537918589445},{"_id":"themes/aath/languages/zh-CN.yml","hash":"40ef3c1115bc82f5e76992d049e523f89486015e","modified":1537918589446},{"_id":"themes/aath/languages/zh-TW.yml","hash":"99a6077aef8dc79786d83db832039618de0d71b9","modified":1537918589446},{"_id":"themes/aath/layout/about.ejs","hash":"30df14efd9e95ddc819a981e07250427a1ddf8ff","modified":1537918589447},{"_id":"themes/aath/layout/archive.ejs","hash":"b1cb745203f9d7b020b2c5a41788c28954ab250f","modified":1537918589448},{"_id":"themes/aath/layout/category.ejs","hash":"77361d246e31fa1f383e54d66b71cd2f128781c5","modified":1537918589448},{"_id":"themes/aath/layout/index.ejs","hash":"97b73d99c10edef82099a93976db8e55c501ecdc","modified":1537918589448},{"_id":"themes/aath/layout/layout.ejs","hash":"adf605f34f3a7da7ce776fd67b3770209434f183","modified":1537918589448},{"_id":"themes/aath/layout/post.ejs","hash":"5e666c9d09ec46b2f7378346e8e064ccfbdccbfc","modified":1537918589448},{"_id":"themes/aath/layout/tags.ejs","hash":"184214e8852e60098cb74a61a65942b8cbfb305c","modified":1537918589449},{"_id":"themes/aath/source/style.scss","hash":"9896ad5a2c9246dad01cb97155b3ca25892b715a","modified":1537918589455},{"_id":"themes/aath/layout/_partial/top.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537918589447},{"_id":"themes/aath/source/css/_about.scss","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537918589449},{"_id":"themes/aath/source/js/script.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537918589452},{"_id":"themes/aath/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1537918578824},{"_id":"themes/aath/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1537918578823},{"_id":"themes/aath/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1537918578824},{"_id":"themes/aath/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1537918578825},{"_id":"themes/aath/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1537918578825},{"_id":"themes/aath/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1537918578824},{"_id":"themes/aath/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1537918578825},{"_id":"themes/aath/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1537918578824},{"_id":"themes/aath/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1537918578823},{"_id":"themes/aath/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1537918578822},{"_id":"themes/aath/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1537918578824},{"_id":"themes/aath/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1537918578825},{"_id":"themes/aath/.git/logs/HEAD","hash":"cae9e93dcb1f921cfbf2f24b8e48effdd5383f9f","modified":1537918589438},{"_id":"themes/aath/layout/_partial/categories.ejs","hash":"be72049022cf2a359c102884a577f470a08809ba","modified":1537918589446},{"_id":"themes/aath/layout/_partial/footer.ejs","hash":"62c9f479b6b56a1633d3101a26f52c666256133b","modified":1537918589446},{"_id":"themes/aath/layout/_partial/header.ejs","hash":"3b9f8183de7fdc6d814b48f1f8ebb771dbf2e7d8","modified":1537918589447},{"_id":"themes/aath/layout/_partial/head.ejs","hash":"59e3930eed07f83f8a47d96d202ed4f26bcd08b6","modified":1537918589446},{"_id":"themes/aath/layout/_partial/paging.ejs","hash":"6229d54277a7031cd852b3ee02466d93e081ec9e","modified":1537918589447},{"_id":"themes/aath/layout/_partial/tag.ejs","hash":"4513855781553218c73f658a28f91b5a5a8c4da4","modified":1537918589447},{"_id":"themes/aath/source/css/_index.scss","hash":"3c91850d23695ffb9b96100d82eb0094d506ea20","modified":1537918589450},{"_id":"themes/aath/source/css/_archive.scss","hash":"1f29f28091d1895919f52f4fdd781a652ff0bd89","modified":1537918589449},{"_id":"themes/aath/source/css/_post.scss","hash":"e293573225cb87454cdb00c3aeeed8a10b631026","modified":1537918589452},{"_id":"themes/aath/source/css/_tags.scss","hash":"4f1c53d3350c3f8da863bd6ccb8e871481dbada1","modified":1537918589452},{"_id":"themes/aath/source/lib/in-view.min.js","hash":"5a695020efc49481bd49f03f5fc520195f2efa5b","modified":1537918589453},{"_id":"themes/aath/source/lib/jquery.fancybox.min.css","hash":"a64676403bb5c23f9800963b0b8f0475b532601f","modified":1537918589453},{"_id":"themes/aath/source/lib/jquery.fancybox.min.js","hash":"cfb927ca23e6a13aa6940b18c5aa4ec7da4a638b","modified":1537918589454},{"_id":"themes/aath/source/lib/lodash.min.js","hash":"60de6e43c4a2c3326275ab12d4ffd90b2582aee9","modified":1537918589455},{"_id":"themes/aath/.git/refs/heads/develop","hash":"b5893a64970b92cc46a5dcb50d89ae1633b32c28","modified":1537918589438},{"_id":"themes/aath/.git/objects/pack/pack-78a615823757dc3b0c3bb8ca12cb2993de922a0f.idx","hash":"5551f0884cd13a7d693f7d32801c43ef7874f22e","modified":1537918589425},{"_id":"themes/aath/source/css/_partical/header.scss","hash":"060afb2f8396be7cbe60f79a8a87504e96b410e3","modified":1537918589451},{"_id":"themes/aath/source/css/_partical/categories.scss","hash":"61ad1aba7300d373280cd3dbb529e02fdc24b21b","modified":1537918589450},{"_id":"themes/aath/source/css/_partical/footer.scss","hash":"8411c07e1c336ad41911e7a1fa7f229c406d0058","modified":1537918589451},{"_id":"themes/aath/source/css/_partical/tag.scss","hash":"cea180fd4aa4dcdd87d37fab80588de5d8519976","modified":1537918589451},{"_id":"themes/aath/.git/logs/refs/heads/develop","hash":"cae9e93dcb1f921cfbf2f24b8e48effdd5383f9f","modified":1537918589438},{"_id":"themes/aath/.git/refs/remotes/origin/HEAD","hash":"cb587ac979c5a12ea2fad8ca5af781961c1b0668","modified":1537918589437},{"_id":"themes/aath/.git/logs/refs/remotes/origin/HEAD","hash":"cae9e93dcb1f921cfbf2f24b8e48effdd5383f9f","modified":1537918589437},{"_id":"themes/aath/.git/objects/pack/pack-78a615823757dc3b0c3bb8ca12cb2993de922a0f.pack","hash":"4c31b707986391d02e30500eb78ff4911d0d1b14","modified":1537918589424}],"Category":[{"name":"coding","_id":"cjminjcwl0002kdbbzvp5tmjm"},{"name":"golang","_id":"cjminjcws0007kdbbku7zy0fk"},{"name":"coding4fun","_id":"cjminjcwv000dkdbb05p39wqq"},{"name":"jekyll","_id":"cjminjcwz000ikdbbgtut6s9r"},{"name":"linux ssh","_id":"cjminjcx3000pkdbbly2ica7d"},{"name":"生活","_id":"cjminjcx6000wkdbbzlj8u4q1"},{"name":"Python","_id":"cjminjcxa0014kdbbs48t2x9j"},{"name":"shell","_id":"cjminjcxb0017kdbbcdb0wnf5"},{"name":"kafka","_id":"cjminjcxc001ekdbbv484x7p7"},{"name":"PHP","_id":"cjminjcxd001kkdbb8x4cw3yv"},{"name":"小程序","_id":"cjminjcxe001okdbb9cnxfz9o"},{"name":"centos","_id":"cjminjcxf001rkdbbn82n1nlh"},{"name":"zsh","_id":"cjminjcxg001wkdbb879y5lav"},{"name":"ngrok","_id":"cjminjcxi001zkdbbpvg6vxd1"},{"name":"内网穿透","parent":"cjminjcxi001zkdbbpvg6vxd1","_id":"cjminjcxi0024kdbbvliwi02b"}],"Data":[],"Page":[{"layout":"about","title":"yongze.chen 自我介绍","_content":"","source":"about/index.md","raw":"---\nlayout: about\ntitle: yongze.chen 自我介绍\n---","date":"2018-09-26T04:15:25.401Z","updated":"2018-09-26T03:56:55.763Z","path":"about/index.html","comments":1,"_id":"cjminjcy0002rkdbbrvfsb250","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","_content":"","source":"tags/index.md","raw":"---\nlayout: tags\n---","date":"2018-09-26T04:15:25.402Z","updated":"2018-09-26T03:45:58.077Z","path":"tags/index.html","title":"","comments":1,"_id":"cjminjcy1002skdbb5j5lmfug","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"利用Apache进行多站点配置","date":"2017-08-08T00:30:00.000Z","_content":"\n用了静态网页之后，主机就空闲了，当初辛辛苦苦跟工信部折腾了好几个月连案都备好了。。总感觉特别亏（其实就是舍不得wordpress的搜索功能。。）转念一想，拿wp当图片上传服务也是不错啊，这样就省去找第三方图床了。\n\n我的目标：\n\n* www.lszero.com 显示主页面。\n* blog.lszero.com 对应静态site。\n* wp.lszero.com 对应wordpress。\n\n我这里用的是apache来实现的，也可以用nginx。\n\n因为我的测试平台是Ubuntu，故跟网上的配置文件有些不一样。如网上说的apache配置文件`http.conf`，在我的平台下是`/etc/apache2/apache2.conf`。<!-- more -->\n\n##  Apache下多站点配置\n\n首先修改默认的VirtualHost，然后再添加其他的VirtualHost。\n\n1.sudo vi /etc/apache2/apache2.conf，设置：\n\n```\nServerName 'www.lszero.com'\n<Directory \"your_home_page_path\">\n...\n</Directory>\n```\n\n注意该文件的最后两行为：\n\n```\nIncludeOptional conf-enabled/*.conf\nIncludeOptional sites-enabled/*.conf\n```\n\n故把新加的站点配置文件放在`sites-enabled`目录下。\n\n继续，sudo vi /etc/apache2/sites-available/000-default.conf，设置：\n\n```\nDocumentRoot your_home_page_path\n```\n\n2.添加新站点配置文件，并放在`sites-available`中。\n\n```shell\n$ cd /etc/apache2/sites-available\n$ sudo touch wp-lszero-com.conf\n$ sudo touch blog-lszero-com.conf\n```\n\nsudo vi blog-lszero-com.conf，添加：\n\n```\n<VirtualHost *:80>\n    ServerAdmin intzero@outlook.com\n    ServerName blog.lszero.com\n    DocumentRoot your_jekyll_site_path/_site\n\n    <Directory \"your_jekyll_site_path/_site\">\n        Options FollowSymLinks\n        AllowOverride All\n        Require all granted\n    </Directory>\n\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n</VirtualHost>\n```\n\nsudo vi wp-lszero-com.conf，添加：\n\n```\n<VirtualHost *:80>\n    ServerAdmin intzero@outlook.com\n    ServerName wp.lszero.com\n    DocumentRoot your_wordpress_site_path\n\n    <Directory \"your_wordpress_site_path\">\n        Options FollowSymLinks\n        AllowOverride All\n        Require all granted\n    </Directory>\n\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n</VirtualHost>\n```\n\n然后建立软链接到`sites-enabled`目录：\n\n```shell\n$ cd /etc/apache2/sites-enabled\n$ sudo ln -s /etc/apache2/sites-available/www-lszero-com.conf /etc/apache2/sites-enabled/www-lszero-com.conf\n$ sudo ln -s /etc/apache2/sites-available/blog-lszero-com.conf /etc/apache2/sites-enabled/blog-lszero-com.conf\n```\n\n重启：\n\n```shell\n$ sudo service apache2 restart\n```\n\n参考：\n\n- [Ubuntu/CentOS下Apache多站点配置](http://www.linuxidc.com/Linux/2017-05/143590.htm)\n\n\n\n## 修改数据库\n\n最后还要修改wordpress数据库里的链接：\n\n```shell\n$ mysql -u[user_name] -p[your_passwd]\n(1) UPDATE wp_options SET option_value = replace( option_value, 'your old web_site','your new web_site') WHERE option_name = 'home' OR option_name ='siteurl';\n(2) UPDATE wp_posts SET post_content = replace( post_content, 'old.com','new.com') ;\n(3) UPDATE wp_comments SET comment_content = replace(comment_content, 'old.com','new.com') ;\n(4) UPDATE wp_comments SET comment_author_url = replace(comment_author_url, 'old.com','new.com') ;\n```\n\n\n\n---\n\n额外说一点，\n\nWordpress自带有多站点功能，前提是你的站点都是wordpress。当然我就不属于这种情况了。\n\n可参考：[WordPress多站点的创建](http://www.smyx.net/create-wpmu.html)\n\n首先开启多站点功能（默认是关闭的），修改wordpress配置文件：vi wp-config.php。找到\n\n```\n/* That's all, stop editing! Happy blogging. */\n```\n\n在上面这行代码的前面加上：\n\n```\ndefine('WP_ALLOW_MULTISITE',true);\n```\n\n回到wordpress后台界面，点击`工具 -> 配置网络`。\n\n因为不是新创建的wordpress，故只能用`子域名`模式，而不是`子目录`模式。点击安装，然后根据提示，修改`wp-config.php`和`.htaccess`。\n\n然后在Dashboard的左上角就可以设置不同的站点，如新建一个站点。\n\n说明：`主站点`还是原来的lszero.com，`子站点`为你后来新加的。\n\n对于删除多站点：\n\n除了要恢复上述修改的文件之外，还有删除数据库多出来的表。\n\n","source":"_posts/2017-08-08-multisite-setting.md","raw":"---\nlayout: post\ntitle:  \"利用Apache进行多站点配置\"\ndate:   2017-08-08 08:30:00\ncategories: coding\ntags: [jekyll, blog, multisites]\n---\n\n用了静态网页之后，主机就空闲了，当初辛辛苦苦跟工信部折腾了好几个月连案都备好了。。总感觉特别亏（其实就是舍不得wordpress的搜索功能。。）转念一想，拿wp当图片上传服务也是不错啊，这样就省去找第三方图床了。\n\n我的目标：\n\n* www.lszero.com 显示主页面。\n* blog.lszero.com 对应静态site。\n* wp.lszero.com 对应wordpress。\n\n我这里用的是apache来实现的，也可以用nginx。\n\n因为我的测试平台是Ubuntu，故跟网上的配置文件有些不一样。如网上说的apache配置文件`http.conf`，在我的平台下是`/etc/apache2/apache2.conf`。<!-- more -->\n\n##  Apache下多站点配置\n\n首先修改默认的VirtualHost，然后再添加其他的VirtualHost。\n\n1.sudo vi /etc/apache2/apache2.conf，设置：\n\n```\nServerName 'www.lszero.com'\n<Directory \"your_home_page_path\">\n...\n</Directory>\n```\n\n注意该文件的最后两行为：\n\n```\nIncludeOptional conf-enabled/*.conf\nIncludeOptional sites-enabled/*.conf\n```\n\n故把新加的站点配置文件放在`sites-enabled`目录下。\n\n继续，sudo vi /etc/apache2/sites-available/000-default.conf，设置：\n\n```\nDocumentRoot your_home_page_path\n```\n\n2.添加新站点配置文件，并放在`sites-available`中。\n\n```shell\n$ cd /etc/apache2/sites-available\n$ sudo touch wp-lszero-com.conf\n$ sudo touch blog-lszero-com.conf\n```\n\nsudo vi blog-lszero-com.conf，添加：\n\n```\n<VirtualHost *:80>\n    ServerAdmin intzero@outlook.com\n    ServerName blog.lszero.com\n    DocumentRoot your_jekyll_site_path/_site\n\n    <Directory \"your_jekyll_site_path/_site\">\n        Options FollowSymLinks\n        AllowOverride All\n        Require all granted\n    </Directory>\n\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n</VirtualHost>\n```\n\nsudo vi wp-lszero-com.conf，添加：\n\n```\n<VirtualHost *:80>\n    ServerAdmin intzero@outlook.com\n    ServerName wp.lszero.com\n    DocumentRoot your_wordpress_site_path\n\n    <Directory \"your_wordpress_site_path\">\n        Options FollowSymLinks\n        AllowOverride All\n        Require all granted\n    </Directory>\n\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n</VirtualHost>\n```\n\n然后建立软链接到`sites-enabled`目录：\n\n```shell\n$ cd /etc/apache2/sites-enabled\n$ sudo ln -s /etc/apache2/sites-available/www-lszero-com.conf /etc/apache2/sites-enabled/www-lszero-com.conf\n$ sudo ln -s /etc/apache2/sites-available/blog-lszero-com.conf /etc/apache2/sites-enabled/blog-lszero-com.conf\n```\n\n重启：\n\n```shell\n$ sudo service apache2 restart\n```\n\n参考：\n\n- [Ubuntu/CentOS下Apache多站点配置](http://www.linuxidc.com/Linux/2017-05/143590.htm)\n\n\n\n## 修改数据库\n\n最后还要修改wordpress数据库里的链接：\n\n```shell\n$ mysql -u[user_name] -p[your_passwd]\n(1) UPDATE wp_options SET option_value = replace( option_value, 'your old web_site','your new web_site') WHERE option_name = 'home' OR option_name ='siteurl';\n(2) UPDATE wp_posts SET post_content = replace( post_content, 'old.com','new.com') ;\n(3) UPDATE wp_comments SET comment_content = replace(comment_content, 'old.com','new.com') ;\n(4) UPDATE wp_comments SET comment_author_url = replace(comment_author_url, 'old.com','new.com') ;\n```\n\n\n\n---\n\n额外说一点，\n\nWordpress自带有多站点功能，前提是你的站点都是wordpress。当然我就不属于这种情况了。\n\n可参考：[WordPress多站点的创建](http://www.smyx.net/create-wpmu.html)\n\n首先开启多站点功能（默认是关闭的），修改wordpress配置文件：vi wp-config.php。找到\n\n```\n/* That's all, stop editing! Happy blogging. */\n```\n\n在上面这行代码的前面加上：\n\n```\ndefine('WP_ALLOW_MULTISITE',true);\n```\n\n回到wordpress后台界面，点击`工具 -> 配置网络`。\n\n因为不是新创建的wordpress，故只能用`子域名`模式，而不是`子目录`模式。点击安装，然后根据提示，修改`wp-config.php`和`.htaccess`。\n\n然后在Dashboard的左上角就可以设置不同的站点，如新建一个站点。\n\n说明：`主站点`还是原来的lszero.com，`子站点`为你后来新加的。\n\n对于删除多站点：\n\n除了要恢复上述修改的文件之外，还有删除数据库多出来的表。\n\n","slug":"multisite-setting","published":1,"updated":"2018-09-25T02:47:50.561Z","comments":1,"photos":[],"link":"","_id":"cjminjcwg0000kdbbr5ciax71","content":"<p>用了静态网页之后，主机就空闲了，当初辛辛苦苦跟工信部折腾了好几个月连案都备好了。。总感觉特别亏（其实就是舍不得wordpress的搜索功能。。）转念一想，拿wp当图片上传服务也是不错啊，这样就省去找第三方图床了。</p>\n<p>我的目标：</p>\n<ul>\n<li><a href=\"http://www.lszero.com\" target=\"_blank\" rel=\"noopener\">www.lszero.com</a> 显示主页面。</li>\n<li>blog.lszero.com 对应静态site。</li>\n<li>wp.lszero.com 对应wordpress。</li>\n</ul>\n<p>我这里用的是apache来实现的，也可以用nginx。</p>\n<p>因为我的测试平台是Ubuntu，故跟网上的配置文件有些不一样。如网上说的apache配置文件<code>http.conf</code>，在我的平台下是<code>/etc/apache2/apache2.conf</code>。<a id=\"more\"></a></p>\n<h2 id=\"Apache下多站点配置\"><a href=\"#Apache下多站点配置\" class=\"headerlink\" title=\"Apache下多站点配置\"></a>Apache下多站点配置</h2><p>首先修改默认的VirtualHost，然后再添加其他的VirtualHost。</p>\n<p>1.sudo vi /etc/apache2/apache2.conf，设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ServerName &apos;www.lszero.com&apos;</span><br><span class=\"line\">&lt;Directory &quot;your_home_page_path&quot;&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>\n<p>注意该文件的最后两行为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">IncludeOptional conf-enabled/*.conf</span><br><span class=\"line\">IncludeOptional sites-enabled/*.conf</span><br></pre></td></tr></table></figure>\n<p>故把新加的站点配置文件放在<code>sites-enabled</code>目录下。</p>\n<p>继续，sudo vi /etc/apache2/sites-available/000-default.conf，设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">DocumentRoot your_home_page_path</span><br></pre></td></tr></table></figure>\n<p>2.添加新站点配置文件，并放在<code>sites-available</code>中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> cd /etc/apache2/sites-available</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo touch wp-lszero-com.conf</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo touch blog-lszero-com.conf</span><br></pre></td></tr></table></figure>\n<p>sudo vi blog-lszero-com.conf，添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    ServerAdmin intzero@outlook.com</span><br><span class=\"line\">    ServerName blog.lszero.com</span><br><span class=\"line\">    DocumentRoot your_jekyll_site_path/_site</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Directory &quot;your_jekyll_site_path/_site&quot;&gt;</span><br><span class=\"line\">        Options FollowSymLinks</span><br><span class=\"line\">        AllowOverride All</span><br><span class=\"line\">        Require all granted</span><br><span class=\"line\">    &lt;/Directory&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</span><br><span class=\"line\">    CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n<p>sudo vi wp-lszero-com.conf，添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    ServerAdmin intzero@outlook.com</span><br><span class=\"line\">    ServerName wp.lszero.com</span><br><span class=\"line\">    DocumentRoot your_wordpress_site_path</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Directory &quot;your_wordpress_site_path&quot;&gt;</span><br><span class=\"line\">        Options FollowSymLinks</span><br><span class=\"line\">        AllowOverride All</span><br><span class=\"line\">        Require all granted</span><br><span class=\"line\">    &lt;/Directory&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</span><br><span class=\"line\">    CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n<p>然后建立软链接到<code>sites-enabled</code>目录：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> cd /etc/apache2/sites-enabled</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo ln -s /etc/apache2/sites-available/www-lszero-com.conf /etc/apache2/sites-enabled/www-lszero-com.conf</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo ln -s /etc/apache2/sites-available/blog-lszero-com.conf /etc/apache2/sites-enabled/blog-lszero-com.conf</span><br></pre></td></tr></table></figure>\n<p>重启：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo service apache2 restart</span><br></pre></td></tr></table></figure>\n<p>参考：</p>\n<ul>\n<li><a href=\"http://www.linuxidc.com/Linux/2017-05/143590.htm\" target=\"_blank\" rel=\"noopener\">Ubuntu/CentOS下Apache多站点配置</a></li>\n</ul>\n<h2 id=\"修改数据库\"><a href=\"#修改数据库\" class=\"headerlink\" title=\"修改数据库\"></a>修改数据库</h2><p>最后还要修改wordpress数据库里的链接：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> mysql -u[user_name] -p[your_passwd]</span><br><span class=\"line\">(1) UPDATE wp_options SET option_value = replace( option_value, 'your old web_site','your new web_site') WHERE option_name = 'home' OR option_name ='siteurl';</span><br><span class=\"line\">(2) UPDATE wp_posts SET post_content = replace( post_content, 'old.com','new.com') ;</span><br><span class=\"line\">(3) UPDATE wp_comments SET comment_content = replace(comment_content, 'old.com','new.com') ;</span><br><span class=\"line\">(4) UPDATE wp_comments SET comment_author_url = replace(comment_author_url, 'old.com','new.com') ;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>额外说一点，</p>\n<p>Wordpress自带有多站点功能，前提是你的站点都是wordpress。当然我就不属于这种情况了。</p>\n<p>可参考：<a href=\"http://www.smyx.net/create-wpmu.html\" target=\"_blank\" rel=\"noopener\">WordPress多站点的创建</a></p>\n<p>首先开启多站点功能（默认是关闭的），修改wordpress配置文件：vi wp-config.php。找到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">/* That&apos;s all, stop editing! Happy blogging. */</span><br></pre></td></tr></table></figure>\n<p>在上面这行代码的前面加上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(&apos;WP_ALLOW_MULTISITE&apos;,true);</span><br></pre></td></tr></table></figure>\n<p>回到wordpress后台界面，点击<code>工具 -&gt; 配置网络</code>。</p>\n<p>因为不是新创建的wordpress，故只能用<code>子域名</code>模式，而不是<code>子目录</code>模式。点击安装，然后根据提示，修改<code>wp-config.php</code>和<code>.htaccess</code>。</p>\n<p>然后在Dashboard的左上角就可以设置不同的站点，如新建一个站点。</p>\n<p>说明：<code>主站点</code>还是原来的lszero.com，<code>子站点</code>为你后来新加的。</p>\n<p>对于删除多站点：</p>\n<p>除了要恢复上述修改的文件之外，还有删除数据库多出来的表。</p>\n","site":{"data":{}},"excerpt":"<p>用了静态网页之后，主机就空闲了，当初辛辛苦苦跟工信部折腾了好几个月连案都备好了。。总感觉特别亏（其实就是舍不得wordpress的搜索功能。。）转念一想，拿wp当图片上传服务也是不错啊，这样就省去找第三方图床了。</p>\n<p>我的目标：</p>\n<ul>\n<li><a href=\"http://www.lszero.com\" target=\"_blank\" rel=\"noopener\">www.lszero.com</a> 显示主页面。</li>\n<li>blog.lszero.com 对应静态site。</li>\n<li>wp.lszero.com 对应wordpress。</li>\n</ul>\n<p>我这里用的是apache来实现的，也可以用nginx。</p>\n<p>因为我的测试平台是Ubuntu，故跟网上的配置文件有些不一样。如网上说的apache配置文件<code>http.conf</code>，在我的平台下是<code>/etc/apache2/apache2.conf</code>。","more":"</p>\n<h2 id=\"Apache下多站点配置\"><a href=\"#Apache下多站点配置\" class=\"headerlink\" title=\"Apache下多站点配置\"></a>Apache下多站点配置</h2><p>首先修改默认的VirtualHost，然后再添加其他的VirtualHost。</p>\n<p>1.sudo vi /etc/apache2/apache2.conf，设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ServerName &apos;www.lszero.com&apos;</span><br><span class=\"line\">&lt;Directory &quot;your_home_page_path&quot;&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>\n<p>注意该文件的最后两行为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">IncludeOptional conf-enabled/*.conf</span><br><span class=\"line\">IncludeOptional sites-enabled/*.conf</span><br></pre></td></tr></table></figure>\n<p>故把新加的站点配置文件放在<code>sites-enabled</code>目录下。</p>\n<p>继续，sudo vi /etc/apache2/sites-available/000-default.conf，设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">DocumentRoot your_home_page_path</span><br></pre></td></tr></table></figure>\n<p>2.添加新站点配置文件，并放在<code>sites-available</code>中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> cd /etc/apache2/sites-available</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo touch wp-lszero-com.conf</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo touch blog-lszero-com.conf</span><br></pre></td></tr></table></figure>\n<p>sudo vi blog-lszero-com.conf，添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    ServerAdmin intzero@outlook.com</span><br><span class=\"line\">    ServerName blog.lszero.com</span><br><span class=\"line\">    DocumentRoot your_jekyll_site_path/_site</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Directory &quot;your_jekyll_site_path/_site&quot;&gt;</span><br><span class=\"line\">        Options FollowSymLinks</span><br><span class=\"line\">        AllowOverride All</span><br><span class=\"line\">        Require all granted</span><br><span class=\"line\">    &lt;/Directory&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</span><br><span class=\"line\">    CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n<p>sudo vi wp-lszero-com.conf，添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">    ServerAdmin intzero@outlook.com</span><br><span class=\"line\">    ServerName wp.lszero.com</span><br><span class=\"line\">    DocumentRoot your_wordpress_site_path</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;Directory &quot;your_wordpress_site_path&quot;&gt;</span><br><span class=\"line\">        Options FollowSymLinks</span><br><span class=\"line\">        AllowOverride All</span><br><span class=\"line\">        Require all granted</span><br><span class=\"line\">    &lt;/Directory&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</span><br><span class=\"line\">    CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n<p>然后建立软链接到<code>sites-enabled</code>目录：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> cd /etc/apache2/sites-enabled</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo ln -s /etc/apache2/sites-available/www-lszero-com.conf /etc/apache2/sites-enabled/www-lszero-com.conf</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo ln -s /etc/apache2/sites-available/blog-lszero-com.conf /etc/apache2/sites-enabled/blog-lszero-com.conf</span><br></pre></td></tr></table></figure>\n<p>重启：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo service apache2 restart</span><br></pre></td></tr></table></figure>\n<p>参考：</p>\n<ul>\n<li><a href=\"http://www.linuxidc.com/Linux/2017-05/143590.htm\" target=\"_blank\" rel=\"noopener\">Ubuntu/CentOS下Apache多站点配置</a></li>\n</ul>\n<h2 id=\"修改数据库\"><a href=\"#修改数据库\" class=\"headerlink\" title=\"修改数据库\"></a>修改数据库</h2><p>最后还要修改wordpress数据库里的链接：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> mysql -u[user_name] -p[your_passwd]</span><br><span class=\"line\">(1) UPDATE wp_options SET option_value = replace( option_value, 'your old web_site','your new web_site') WHERE option_name = 'home' OR option_name ='siteurl';</span><br><span class=\"line\">(2) UPDATE wp_posts SET post_content = replace( post_content, 'old.com','new.com') ;</span><br><span class=\"line\">(3) UPDATE wp_comments SET comment_content = replace(comment_content, 'old.com','new.com') ;</span><br><span class=\"line\">(4) UPDATE wp_comments SET comment_author_url = replace(comment_author_url, 'old.com','new.com') ;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>额外说一点，</p>\n<p>Wordpress自带有多站点功能，前提是你的站点都是wordpress。当然我就不属于这种情况了。</p>\n<p>可参考：<a href=\"http://www.smyx.net/create-wpmu.html\" target=\"_blank\" rel=\"noopener\">WordPress多站点的创建</a></p>\n<p>首先开启多站点功能（默认是关闭的），修改wordpress配置文件：vi wp-config.php。找到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">/* That&apos;s all, stop editing! Happy blogging. */</span><br></pre></td></tr></table></figure>\n<p>在上面这行代码的前面加上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(&apos;WP_ALLOW_MULTISITE&apos;,true);</span><br></pre></td></tr></table></figure>\n<p>回到wordpress后台界面，点击<code>工具 -&gt; 配置网络</code>。</p>\n<p>因为不是新创建的wordpress，故只能用<code>子域名</code>模式，而不是<code>子目录</code>模式。点击安装，然后根据提示，修改<code>wp-config.php</code>和<code>.htaccess</code>。</p>\n<p>然后在Dashboard的左上角就可以设置不同的站点，如新建一个站点。</p>\n<p>说明：<code>主站点</code>还是原来的lszero.com，<code>子站点</code>为你后来新加的。</p>\n<p>对于删除多站点：</p>\n<p>除了要恢复上述修改的文件之外，还有删除数据库多出来的表。</p>"},{"layout":"post","title":"Golang 入学","date":"2018-04-04T17:00:00.000Z","_content":"\n```\n    go build\n```","source":"_posts/2018-04-05-go-learn.md","raw":"---\nlayout: post\ntitle:  Golang 入学\ndate:   2018-04-05 01:00:00\ncategories: golang\ntags: [学习,Go]\n---\n\n```\n    go build\n```","slug":"go-learn","published":1,"updated":"2018-09-25T02:47:50.562Z","comments":1,"photos":[],"link":"","_id":"cjminjcwj0001kdbb90r4bpp1","content":"<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">go build</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">go build</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"搭建Isso评论服务","date":"2017-08-09T02:30:00.000Z","_content":"\n与其借助第三方服务天天担心挂，还不如将自己的服务器资源利用起来。[Isso](https://posativ.org/isso/)就是自建评论系统的一种方式。（官网需要fq.）\n\n## Install Isso\n\n测试自Ubuntu服务器。本来官网文档里没那么多戏，但是我一直报错。。又安了很多其它包。\n\n```\n$ sudo apt-get install python3-dev\n$ sudo pip install isso\n$ sudo apt-get install sqlite3\n\n# 可能需要：\n$ sudo pip install werkzeug\n$ sudo apt-get install libffi-dev\n$ sudo pip install misaka\n```\n\n<!-- more -->\n\n## Configuration\n\n首先新建一个isso配置文件，`vi isso.conf`，放哪儿都行。\n\n```\n[general]\n; database location, check permissions, automatically created if not exists\n; your website or blog (not the location of Isso!)\ndbpath = xxx/comments.db\nname = example\n; you can add multiple hosts for local development\n; or SSL connections. There is no wildcard to allow\n; any domain.\nhost = http://lszero.com/\nnotify =\nlog-file = xxx/isso.log\n\n[server]\nlisten = http://localhost:8090/\n\n[moderation]\nenabled = false\npurge-after = 30d\n\n[smtp]\nusername = username@example.com\npassword = password\nhost = smtp.example.com\nport = 587\nsecurity = starttls\nto = your email address\nfrom = \"Isso Comment\"<username@example.com>\ntimeout = 10\n\n[markup]\noptions = strikethrough, superscript, autolink\nallowed-elements =\nallowed-attributes =\n\n[guard]\nenabled = true\nratelimit = 3\ndirect-reply = 3\nreply-to-self = true\nrequire-author = true\nrequire-email = true\n\n...\n```\n\n其中，\n\n* `dbpath` 是数据库文件，会自动生成。\n* `host` 可以添加多个。\n* `notify` 选择新评论的通知方式。`stdout`或者`smtp`。\n* `listen` 设置端口。\n* `moderation` 是否开启评论审核。若开启，新的评论不会显示，除非你activate。\n* `smtp` 即设置邮件服务的配置信息。\n* `guard` 评论防火墙。\n* `ratelimit` 每个访客一分钟最多可以评论的次数。\n* `direct-reply` 评论回复次数。\n* `reply-to-self` 是否可以回复自己的评论，需要配合 JS 引用，下面会说\n\n更多设置选项参见[官网文档](https://posativ.org/isso/docs/configuration/server/?utm_source=sb.sb)。\n\n运行isso：\n\n```\n$ isso -c /path/to/isso.conf run\n```\n\n## 反向代理\n\n根据上述配置，isso运行在http://localhost:8090下。我们现在需要通过反向代理功能，目的是让发送到comments.lszero.com的请求被转发到本地isso的端口。\n\n官网给了nginx的配置，我这里也用apache测试了。\n\n### with nginx\n\n修改nginx配置：`vi /etc/nginx/sites-enabled/default`，在开头添加：\n\n```\nserver {\n    listen 80;\n    server_name comments.lszero.com;\n\n    location / {\n        proxy_pass http://localhost:8090;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n启动nginx：\n\n```\nsudo service nginx start\n```\n\n有时候nginx配置文件错误，上述命令并没有任何错误提示。\n\n可以通过`sudo service nginx status`查看是否真的启动了。或者通过`sudo nginx -t`来测试配置是否正确。\n\n### with apache2\n\n配置环境是Ubuntu apache2.\n\n首先要通过`a2enmod`加载命令加载代理模块：\n\n```\na2enmod proxy proxy_http\n```\n\n然后添加一个VirtualHost，为了方便，我这里就直接在 /etc/apache2/sites-available/000-default.conf 上改了。\n\n```\n<VirtualHost *:80>\n        ServerAdmin intzero@outlook.com\n        ServerName comments.lszero.com\n        # off表示开启反向代理，on表示开启正向代理\n        ProxyRequests Off\n        # 将这个虚拟主机跳转到本机的8090端口\n        ProxyPass / http://localhost:8090/\n        ProxyPassReverse / http://localhost:8090/\n        <Proxy *>\n                Order Deny,Allow\n                Allow from all\n        </Proxy>\n</VirtualHost>\n```\n\n## Test\n\n将下列代码插入你想显示评论功能的位置：\n\n```\n<script data-isso=\"//comments.lszero.com/\"\n        src=\"//comments.lszero.com/js/embed.min.js\"></script>\n\n<section id=\"isso-thread\"></section>\n```\n\n这里的更多设置选项参见[官网文档](https://posativ.org/isso/docs/configuration/client/)。比如开启支持/反对功能，一页显示评论数等。\n\n然后启动web服务和isso：\n\n```\n$ sudo service nginx start   # or 'sudo service apache2 start'\n$ isso -c /path/to/isso.conf run\n```\n\n这样就可以了。\n\n小提示：\n\n如果你在发评论自己测试的时候遇到403 Forbidden的错误，你可能是需要修改isso的配置文件，设置`reply-to-self = true`，让自己可以回复自己。","source":"_posts/2017-08-09-comments-with-isso.md","raw":"---\nlayout: post\ntitle:  \"搭建Isso评论服务\"\ndate:   2017-08-09 10:30:00\ncategories: coding4fun\ntags: [jekyll, blog]\n---\n\n与其借助第三方服务天天担心挂，还不如将自己的服务器资源利用起来。[Isso](https://posativ.org/isso/)就是自建评论系统的一种方式。（官网需要fq.）\n\n## Install Isso\n\n测试自Ubuntu服务器。本来官网文档里没那么多戏，但是我一直报错。。又安了很多其它包。\n\n```\n$ sudo apt-get install python3-dev\n$ sudo pip install isso\n$ sudo apt-get install sqlite3\n\n# 可能需要：\n$ sudo pip install werkzeug\n$ sudo apt-get install libffi-dev\n$ sudo pip install misaka\n```\n\n<!-- more -->\n\n## Configuration\n\n首先新建一个isso配置文件，`vi isso.conf`，放哪儿都行。\n\n```\n[general]\n; database location, check permissions, automatically created if not exists\n; your website or blog (not the location of Isso!)\ndbpath = xxx/comments.db\nname = example\n; you can add multiple hosts for local development\n; or SSL connections. There is no wildcard to allow\n; any domain.\nhost = http://lszero.com/\nnotify =\nlog-file = xxx/isso.log\n\n[server]\nlisten = http://localhost:8090/\n\n[moderation]\nenabled = false\npurge-after = 30d\n\n[smtp]\nusername = username@example.com\npassword = password\nhost = smtp.example.com\nport = 587\nsecurity = starttls\nto = your email address\nfrom = \"Isso Comment\"<username@example.com>\ntimeout = 10\n\n[markup]\noptions = strikethrough, superscript, autolink\nallowed-elements =\nallowed-attributes =\n\n[guard]\nenabled = true\nratelimit = 3\ndirect-reply = 3\nreply-to-self = true\nrequire-author = true\nrequire-email = true\n\n...\n```\n\n其中，\n\n* `dbpath` 是数据库文件，会自动生成。\n* `host` 可以添加多个。\n* `notify` 选择新评论的通知方式。`stdout`或者`smtp`。\n* `listen` 设置端口。\n* `moderation` 是否开启评论审核。若开启，新的评论不会显示，除非你activate。\n* `smtp` 即设置邮件服务的配置信息。\n* `guard` 评论防火墙。\n* `ratelimit` 每个访客一分钟最多可以评论的次数。\n* `direct-reply` 评论回复次数。\n* `reply-to-self` 是否可以回复自己的评论，需要配合 JS 引用，下面会说\n\n更多设置选项参见[官网文档](https://posativ.org/isso/docs/configuration/server/?utm_source=sb.sb)。\n\n运行isso：\n\n```\n$ isso -c /path/to/isso.conf run\n```\n\n## 反向代理\n\n根据上述配置，isso运行在http://localhost:8090下。我们现在需要通过反向代理功能，目的是让发送到comments.lszero.com的请求被转发到本地isso的端口。\n\n官网给了nginx的配置，我这里也用apache测试了。\n\n### with nginx\n\n修改nginx配置：`vi /etc/nginx/sites-enabled/default`，在开头添加：\n\n```\nserver {\n    listen 80;\n    server_name comments.lszero.com;\n\n    location / {\n        proxy_pass http://localhost:8090;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n启动nginx：\n\n```\nsudo service nginx start\n```\n\n有时候nginx配置文件错误，上述命令并没有任何错误提示。\n\n可以通过`sudo service nginx status`查看是否真的启动了。或者通过`sudo nginx -t`来测试配置是否正确。\n\n### with apache2\n\n配置环境是Ubuntu apache2.\n\n首先要通过`a2enmod`加载命令加载代理模块：\n\n```\na2enmod proxy proxy_http\n```\n\n然后添加一个VirtualHost，为了方便，我这里就直接在 /etc/apache2/sites-available/000-default.conf 上改了。\n\n```\n<VirtualHost *:80>\n        ServerAdmin intzero@outlook.com\n        ServerName comments.lszero.com\n        # off表示开启反向代理，on表示开启正向代理\n        ProxyRequests Off\n        # 将这个虚拟主机跳转到本机的8090端口\n        ProxyPass / http://localhost:8090/\n        ProxyPassReverse / http://localhost:8090/\n        <Proxy *>\n                Order Deny,Allow\n                Allow from all\n        </Proxy>\n</VirtualHost>\n```\n\n## Test\n\n将下列代码插入你想显示评论功能的位置：\n\n```\n<script data-isso=\"//comments.lszero.com/\"\n        src=\"//comments.lszero.com/js/embed.min.js\"></script>\n\n<section id=\"isso-thread\"></section>\n```\n\n这里的更多设置选项参见[官网文档](https://posativ.org/isso/docs/configuration/client/)。比如开启支持/反对功能，一页显示评论数等。\n\n然后启动web服务和isso：\n\n```\n$ sudo service nginx start   # or 'sudo service apache2 start'\n$ isso -c /path/to/isso.conf run\n```\n\n这样就可以了。\n\n小提示：\n\n如果你在发评论自己测试的时候遇到403 Forbidden的错误，你可能是需要修改isso的配置文件，设置`reply-to-self = true`，让自己可以回复自己。","slug":"comments-with-isso","published":1,"updated":"2018-09-25T02:47:50.562Z","comments":1,"photos":[],"link":"","_id":"cjminjcwo0004kdbbp82h4012","content":"<p>与其借助第三方服务天天担心挂，还不如将自己的服务器资源利用起来。<a href=\"https://posativ.org/isso/\" target=\"_blank\" rel=\"noopener\">Isso</a>就是自建评论系统的一种方式。（官网需要fq.）</p>\n<h2 id=\"Install-Isso\"><a href=\"#Install-Isso\" class=\"headerlink\" title=\"Install Isso\"></a>Install Isso</h2><p>测试自Ubuntu服务器。本来官网文档里没那么多戏，但是我一直报错。。又安了很多其它包。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install python3-dev</span><br><span class=\"line\">$ sudo pip install isso</span><br><span class=\"line\">$ sudo apt-get install sqlite3</span><br><span class=\"line\"></span><br><span class=\"line\"># 可能需要：</span><br><span class=\"line\">$ sudo pip install werkzeug</span><br><span class=\"line\">$ sudo apt-get install libffi-dev</span><br><span class=\"line\">$ sudo pip install misaka</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h2><p>首先新建一个isso配置文件，<code>vi isso.conf</code>，放哪儿都行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[general]</span><br><span class=\"line\">; database location, check permissions, automatically created if not exists</span><br><span class=\"line\">; your website or blog (not the location of Isso!)</span><br><span class=\"line\">dbpath = xxx/comments.db</span><br><span class=\"line\">name = example</span><br><span class=\"line\">; you can add multiple hosts for local development</span><br><span class=\"line\">; or SSL connections. There is no wildcard to allow</span><br><span class=\"line\">; any domain.</span><br><span class=\"line\">host = http://lszero.com/</span><br><span class=\"line\">notify =</span><br><span class=\"line\">log-file = xxx/isso.log</span><br><span class=\"line\"></span><br><span class=\"line\">[server]</span><br><span class=\"line\">listen = http://localhost:8090/</span><br><span class=\"line\"></span><br><span class=\"line\">[moderation]</span><br><span class=\"line\">enabled = false</span><br><span class=\"line\">purge-after = 30d</span><br><span class=\"line\"></span><br><span class=\"line\">[smtp]</span><br><span class=\"line\">username = username@example.com</span><br><span class=\"line\">password = password</span><br><span class=\"line\">host = smtp.example.com</span><br><span class=\"line\">port = 587</span><br><span class=\"line\">security = starttls</span><br><span class=\"line\">to = your email address</span><br><span class=\"line\">from = &quot;Isso Comment&quot;&lt;username@example.com&gt;</span><br><span class=\"line\">timeout = 10</span><br><span class=\"line\"></span><br><span class=\"line\">[markup]</span><br><span class=\"line\">options = strikethrough, superscript, autolink</span><br><span class=\"line\">allowed-elements =</span><br><span class=\"line\">allowed-attributes =</span><br><span class=\"line\"></span><br><span class=\"line\">[guard]</span><br><span class=\"line\">enabled = true</span><br><span class=\"line\">ratelimit = 3</span><br><span class=\"line\">direct-reply = 3</span><br><span class=\"line\">reply-to-self = true</span><br><span class=\"line\">require-author = true</span><br><span class=\"line\">require-email = true</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>其中，</p>\n<ul>\n<li><code>dbpath</code> 是数据库文件，会自动生成。</li>\n<li><code>host</code> 可以添加多个。</li>\n<li><code>notify</code> 选择新评论的通知方式。<code>stdout</code>或者<code>smtp</code>。</li>\n<li><code>listen</code> 设置端口。</li>\n<li><code>moderation</code> 是否开启评论审核。若开启，新的评论不会显示，除非你activate。</li>\n<li><code>smtp</code> 即设置邮件服务的配置信息。</li>\n<li><code>guard</code> 评论防火墙。</li>\n<li><code>ratelimit</code> 每个访客一分钟最多可以评论的次数。</li>\n<li><code>direct-reply</code> 评论回复次数。</li>\n<li><code>reply-to-self</code> 是否可以回复自己的评论，需要配合 JS 引用，下面会说</li>\n</ul>\n<p>更多设置选项参见<a href=\"https://posativ.org/isso/docs/configuration/server/?utm_source=sb.sb\" target=\"_blank\" rel=\"noopener\">官网文档</a>。</p>\n<p>运行isso：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ isso -c /path/to/isso.conf run</span><br></pre></td></tr></table></figure>\n<h2 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h2><p>根据上述配置，isso运行在<a href=\"http://localhost:8090下。我们现在需要通过反向代理功能，目的是让发送到comments.lszero.com的请求被转发到本地isso的端口。\" target=\"_blank\" rel=\"noopener\">http://localhost:8090下。我们现在需要通过反向代理功能，目的是让发送到comments.lszero.com的请求被转发到本地isso的端口。</a></p>\n<p>官网给了nginx的配置，我这里也用apache测试了。</p>\n<h3 id=\"with-nginx\"><a href=\"#with-nginx\" class=\"headerlink\" title=\"with nginx\"></a>with nginx</h3><p>修改nginx配置：<code>vi /etc/nginx/sites-enabled/default</code>，在开头添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name comments.lszero.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:8090;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动nginx：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo service nginx start</span><br></pre></td></tr></table></figure>\n<p>有时候nginx配置文件错误，上述命令并没有任何错误提示。</p>\n<p>可以通过<code>sudo service nginx status</code>查看是否真的启动了。或者通过<code>sudo nginx -t</code>来测试配置是否正确。</p>\n<h3 id=\"with-apache2\"><a href=\"#with-apache2\" class=\"headerlink\" title=\"with apache2\"></a>with apache2</h3><p>配置环境是Ubuntu apache2.</p>\n<p>首先要通过<code>a2enmod</code>加载命令加载代理模块：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">a2enmod proxy proxy_http</span><br></pre></td></tr></table></figure>\n<p>然后添加一个VirtualHost，为了方便，我这里就直接在 /etc/apache2/sites-available/000-default.conf 上改了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">        ServerAdmin intzero@outlook.com</span><br><span class=\"line\">        ServerName comments.lszero.com</span><br><span class=\"line\">        # off表示开启反向代理，on表示开启正向代理</span><br><span class=\"line\">        ProxyRequests Off</span><br><span class=\"line\">        # 将这个虚拟主机跳转到本机的8090端口</span><br><span class=\"line\">        ProxyPass / http://localhost:8090/</span><br><span class=\"line\">        ProxyPassReverse / http://localhost:8090/</span><br><span class=\"line\">        &lt;Proxy *&gt;</span><br><span class=\"line\">                Order Deny,Allow</span><br><span class=\"line\">                Allow from all</span><br><span class=\"line\">        &lt;/Proxy&gt;</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a>Test</h2><p>将下列代码插入你想显示评论功能的位置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script data-isso=&quot;//comments.lszero.com/&quot;</span><br><span class=\"line\">        src=&quot;//comments.lszero.com/js/embed.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;section id=&quot;isso-thread&quot;&gt;&lt;/section&gt;</span><br></pre></td></tr></table></figure>\n<p>这里的更多设置选项参见<a href=\"https://posativ.org/isso/docs/configuration/client/\" target=\"_blank\" rel=\"noopener\">官网文档</a>。比如开启支持/反对功能，一页显示评论数等。</p>\n<p>然后启动web服务和isso：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo service nginx start   # or &apos;sudo service apache2 start&apos;</span><br><span class=\"line\">$ isso -c /path/to/isso.conf run</span><br></pre></td></tr></table></figure>\n<p>这样就可以了。</p>\n<p>小提示：</p>\n<p>如果你在发评论自己测试的时候遇到403 Forbidden的错误，你可能是需要修改isso的配置文件，设置<code>reply-to-self = true</code>，让自己可以回复自己。</p>\n","site":{"data":{}},"excerpt":"<p>与其借助第三方服务天天担心挂，还不如将自己的服务器资源利用起来。<a href=\"https://posativ.org/isso/\" target=\"_blank\" rel=\"noopener\">Isso</a>就是自建评论系统的一种方式。（官网需要fq.）</p>\n<h2 id=\"Install-Isso\"><a href=\"#Install-Isso\" class=\"headerlink\" title=\"Install Isso\"></a>Install Isso</h2><p>测试自Ubuntu服务器。本来官网文档里没那么多戏，但是我一直报错。。又安了很多其它包。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install python3-dev</span><br><span class=\"line\">$ sudo pip install isso</span><br><span class=\"line\">$ sudo apt-get install sqlite3</span><br><span class=\"line\"></span><br><span class=\"line\"># 可能需要：</span><br><span class=\"line\">$ sudo pip install werkzeug</span><br><span class=\"line\">$ sudo apt-get install libffi-dev</span><br><span class=\"line\">$ sudo pip install misaka</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h2><p>首先新建一个isso配置文件，<code>vi isso.conf</code>，放哪儿都行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[general]</span><br><span class=\"line\">; database location, check permissions, automatically created if not exists</span><br><span class=\"line\">; your website or blog (not the location of Isso!)</span><br><span class=\"line\">dbpath = xxx/comments.db</span><br><span class=\"line\">name = example</span><br><span class=\"line\">; you can add multiple hosts for local development</span><br><span class=\"line\">; or SSL connections. There is no wildcard to allow</span><br><span class=\"line\">; any domain.</span><br><span class=\"line\">host = http://lszero.com/</span><br><span class=\"line\">notify =</span><br><span class=\"line\">log-file = xxx/isso.log</span><br><span class=\"line\"></span><br><span class=\"line\">[server]</span><br><span class=\"line\">listen = http://localhost:8090/</span><br><span class=\"line\"></span><br><span class=\"line\">[moderation]</span><br><span class=\"line\">enabled = false</span><br><span class=\"line\">purge-after = 30d</span><br><span class=\"line\"></span><br><span class=\"line\">[smtp]</span><br><span class=\"line\">username = username@example.com</span><br><span class=\"line\">password = password</span><br><span class=\"line\">host = smtp.example.com</span><br><span class=\"line\">port = 587</span><br><span class=\"line\">security = starttls</span><br><span class=\"line\">to = your email address</span><br><span class=\"line\">from = &quot;Isso Comment&quot;&lt;username@example.com&gt;</span><br><span class=\"line\">timeout = 10</span><br><span class=\"line\"></span><br><span class=\"line\">[markup]</span><br><span class=\"line\">options = strikethrough, superscript, autolink</span><br><span class=\"line\">allowed-elements =</span><br><span class=\"line\">allowed-attributes =</span><br><span class=\"line\"></span><br><span class=\"line\">[guard]</span><br><span class=\"line\">enabled = true</span><br><span class=\"line\">ratelimit = 3</span><br><span class=\"line\">direct-reply = 3</span><br><span class=\"line\">reply-to-self = true</span><br><span class=\"line\">require-author = true</span><br><span class=\"line\">require-email = true</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>其中，</p>\n<ul>\n<li><code>dbpath</code> 是数据库文件，会自动生成。</li>\n<li><code>host</code> 可以添加多个。</li>\n<li><code>notify</code> 选择新评论的通知方式。<code>stdout</code>或者<code>smtp</code>。</li>\n<li><code>listen</code> 设置端口。</li>\n<li><code>moderation</code> 是否开启评论审核。若开启，新的评论不会显示，除非你activate。</li>\n<li><code>smtp</code> 即设置邮件服务的配置信息。</li>\n<li><code>guard</code> 评论防火墙。</li>\n<li><code>ratelimit</code> 每个访客一分钟最多可以评论的次数。</li>\n<li><code>direct-reply</code> 评论回复次数。</li>\n<li><code>reply-to-self</code> 是否可以回复自己的评论，需要配合 JS 引用，下面会说</li>\n</ul>\n<p>更多设置选项参见<a href=\"https://posativ.org/isso/docs/configuration/server/?utm_source=sb.sb\" target=\"_blank\" rel=\"noopener\">官网文档</a>。</p>\n<p>运行isso：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ isso -c /path/to/isso.conf run</span><br></pre></td></tr></table></figure>\n<h2 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h2><p>根据上述配置，isso运行在<a href=\"http://localhost:8090下。我们现在需要通过反向代理功能，目的是让发送到comments.lszero.com的请求被转发到本地isso的端口。\" target=\"_blank\" rel=\"noopener\">http://localhost:8090下。我们现在需要通过反向代理功能，目的是让发送到comments.lszero.com的请求被转发到本地isso的端口。</a></p>\n<p>官网给了nginx的配置，我这里也用apache测试了。</p>\n<h3 id=\"with-nginx\"><a href=\"#with-nginx\" class=\"headerlink\" title=\"with nginx\"></a>with nginx</h3><p>修改nginx配置：<code>vi /etc/nginx/sites-enabled/default</code>，在开头添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name comments.lszero.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:8090;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动nginx：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo service nginx start</span><br></pre></td></tr></table></figure>\n<p>有时候nginx配置文件错误，上述命令并没有任何错误提示。</p>\n<p>可以通过<code>sudo service nginx status</code>查看是否真的启动了。或者通过<code>sudo nginx -t</code>来测试配置是否正确。</p>\n<h3 id=\"with-apache2\"><a href=\"#with-apache2\" class=\"headerlink\" title=\"with apache2\"></a>with apache2</h3><p>配置环境是Ubuntu apache2.</p>\n<p>首先要通过<code>a2enmod</code>加载命令加载代理模块：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">a2enmod proxy proxy_http</span><br></pre></td></tr></table></figure>\n<p>然后添加一个VirtualHost，为了方便，我这里就直接在 /etc/apache2/sites-available/000-default.conf 上改了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">        ServerAdmin intzero@outlook.com</span><br><span class=\"line\">        ServerName comments.lszero.com</span><br><span class=\"line\">        # off表示开启反向代理，on表示开启正向代理</span><br><span class=\"line\">        ProxyRequests Off</span><br><span class=\"line\">        # 将这个虚拟主机跳转到本机的8090端口</span><br><span class=\"line\">        ProxyPass / http://localhost:8090/</span><br><span class=\"line\">        ProxyPassReverse / http://localhost:8090/</span><br><span class=\"line\">        &lt;Proxy *&gt;</span><br><span class=\"line\">                Order Deny,Allow</span><br><span class=\"line\">                Allow from all</span><br><span class=\"line\">        &lt;/Proxy&gt;</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a>Test</h2><p>将下列代码插入你想显示评论功能的位置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script data-isso=&quot;//comments.lszero.com/&quot;</span><br><span class=\"line\">        src=&quot;//comments.lszero.com/js/embed.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;section id=&quot;isso-thread&quot;&gt;&lt;/section&gt;</span><br></pre></td></tr></table></figure>\n<p>这里的更多设置选项参见<a href=\"https://posativ.org/isso/docs/configuration/client/\" target=\"_blank\" rel=\"noopener\">官网文档</a>。比如开启支持/反对功能，一页显示评论数等。</p>\n<p>然后启动web服务和isso：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo service nginx start   # or &apos;sudo service apache2 start&apos;</span><br><span class=\"line\">$ isso -c /path/to/isso.conf run</span><br></pre></td></tr></table></figure>\n<p>这样就可以了。</p>\n<p>小提示：</p>\n<p>如果你在发评论自己测试的时候遇到403 Forbidden的错误，你可能是需要修改isso的配置文件，设置<code>reply-to-self = true</code>，让自己可以回复自己。</p>"},{"layout":"post","title":"jekyll","date":"2018-04-04T20:00:00.000Z","_content":"\n### 发音\n英  ['dʒekil; 'dʒi:kil]   \n美  ['dʒekil; 'dʒi:kil]\n\n### 介绍\n> jekyll是一个简单的免费的Blog生成工具，类似WordPress。但是和WordPress又有很大的不同，原因是jekyll只是一个生成静态网页的工具，不需要数据库支持。\n但是可以配合第三方服务,例如Disqus。最关键的是jekyll可以免费部署在Github上，而且可以绑定自己的域名。\n\n### 使用\n首先建立目录结构，然后增加文件，最后使用jekyll发行生成静态网页发行。如果使用github的话，那就有托管的地方了。\n\n_config.yml\n这个文件是为了保存配置的。所谓的配置，其实可以用在命令行里面。放在这个文件里面主要是比较方便。详细的配置说明这里有： \n\n_includes这里面的就是可以重复利用的文件。这个文件可以被其他的文件包含，重复利用。#% include file.ext %#，就是引用file.ext的格式。\n\n_layouts这里存放的是模板文件。\n\n_posts这里的文件就实际的文章内容了。文件名必须使用YEAR-MONTH-DATE-title.MARKUP的格式。如果使用textile的话，扩展名就是textile.\n\n_site这个文件夹存放的是最终生成的文件。\n对于目录下的每个文件，使用YAML Front Matter之后，都会被转格式，然后生成最终文件。\n\n—\nlayout: post\ntitle: xxxxx\ncategory: tech\n—\n这就是个简单的例子。\n其他的目录都会被拷贝到最终文件的目录下。所以css,images等目录都可以放在根目录下。","source":"_posts/2018-04-05-jekyll-js.md","raw":"---\nlayout: post\ntitle:  \"jekyll\"\ndate:   2018-04-05 04:00:00\ncategories: jekyll\ntags: [jekyll]\n---\n\n### 发音\n英  ['dʒekil; 'dʒi:kil]   \n美  ['dʒekil; 'dʒi:kil]\n\n### 介绍\n> jekyll是一个简单的免费的Blog生成工具，类似WordPress。但是和WordPress又有很大的不同，原因是jekyll只是一个生成静态网页的工具，不需要数据库支持。\n但是可以配合第三方服务,例如Disqus。最关键的是jekyll可以免费部署在Github上，而且可以绑定自己的域名。\n\n### 使用\n首先建立目录结构，然后增加文件，最后使用jekyll发行生成静态网页发行。如果使用github的话，那就有托管的地方了。\n\n_config.yml\n这个文件是为了保存配置的。所谓的配置，其实可以用在命令行里面。放在这个文件里面主要是比较方便。详细的配置说明这里有： \n\n_includes这里面的就是可以重复利用的文件。这个文件可以被其他的文件包含，重复利用。#% include file.ext %#，就是引用file.ext的格式。\n\n_layouts这里存放的是模板文件。\n\n_posts这里的文件就实际的文章内容了。文件名必须使用YEAR-MONTH-DATE-title.MARKUP的格式。如果使用textile的话，扩展名就是textile.\n\n_site这个文件夹存放的是最终生成的文件。\n对于目录下的每个文件，使用YAML Front Matter之后，都会被转格式，然后生成最终文件。\n\n—\nlayout: post\ntitle: xxxxx\ncategory: tech\n—\n这就是个简单的例子。\n其他的目录都会被拷贝到最终文件的目录下。所以css,images等目录都可以放在根目录下。","slug":"jekyll-js","published":1,"updated":"2018-09-26T03:24:17.386Z","comments":1,"photos":[],"link":"","_id":"cjminjcwq0005kdbbgulymcl0","content":"<h3 id=\"发音\"><a href=\"#发音\" class=\"headerlink\" title=\"发音\"></a>发音</h3><p>英  [‘dʒekil; ‘dʒi:kil]<br>美  [‘dʒekil; ‘dʒi:kil]</p>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><blockquote>\n<p>jekyll是一个简单的免费的Blog生成工具，类似WordPress。但是和WordPress又有很大的不同，原因是jekyll只是一个生成静态网页的工具，不需要数据库支持。<br>但是可以配合第三方服务,例如Disqus。最关键的是jekyll可以免费部署在Github上，而且可以绑定自己的域名。</p>\n</blockquote>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>首先建立目录结构，然后增加文件，最后使用jekyll发行生成静态网页发行。如果使用github的话，那就有托管的地方了。</p>\n<p>_config.yml<br>这个文件是为了保存配置的。所谓的配置，其实可以用在命令行里面。放在这个文件里面主要是比较方便。详细的配置说明这里有： </p>\n<p>_includes这里面的就是可以重复利用的文件。这个文件可以被其他的文件包含，重复利用。#% include file.ext %#，就是引用file.ext的格式。</p>\n<p>_layouts这里存放的是模板文件。</p>\n<p>_posts这里的文件就实际的文章内容了。文件名必须使用YEAR-MONTH-DATE-title.MARKUP的格式。如果使用textile的话，扩展名就是textile.</p>\n<p>_site这个文件夹存放的是最终生成的文件。<br>对于目录下的每个文件，使用YAML Front Matter之后，都会被转格式，然后生成最终文件。</p>\n<p>—<br>layout: post<br>title: xxxxx<br>category: tech<br>—<br>这就是个简单的例子。<br>其他的目录都会被拷贝到最终文件的目录下。所以css,images等目录都可以放在根目录下。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"发音\"><a href=\"#发音\" class=\"headerlink\" title=\"发音\"></a>发音</h3><p>英  [‘dʒekil; ‘dʒi:kil]<br>美  [‘dʒekil; ‘dʒi:kil]</p>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><blockquote>\n<p>jekyll是一个简单的免费的Blog生成工具，类似WordPress。但是和WordPress又有很大的不同，原因是jekyll只是一个生成静态网页的工具，不需要数据库支持。<br>但是可以配合第三方服务,例如Disqus。最关键的是jekyll可以免费部署在Github上，而且可以绑定自己的域名。</p>\n</blockquote>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>首先建立目录结构，然后增加文件，最后使用jekyll发行生成静态网页发行。如果使用github的话，那就有托管的地方了。</p>\n<p>_config.yml<br>这个文件是为了保存配置的。所谓的配置，其实可以用在命令行里面。放在这个文件里面主要是比较方便。详细的配置说明这里有： </p>\n<p>_includes这里面的就是可以重复利用的文件。这个文件可以被其他的文件包含，重复利用。#% include file.ext %#，就是引用file.ext的格式。</p>\n<p>_layouts这里存放的是模板文件。</p>\n<p>_posts这里的文件就实际的文章内容了。文件名必须使用YEAR-MONTH-DATE-title.MARKUP的格式。如果使用textile的话，扩展名就是textile.</p>\n<p>_site这个文件夹存放的是最终生成的文件。<br>对于目录下的每个文件，使用YAML Front Matter之后，都会被转格式，然后生成最终文件。</p>\n<p>—<br>layout: post<br>title: xxxxx<br>category: tech<br>—<br>这就是个简单的例子。<br>其他的目录都会被拷贝到最终文件的目录下。所以css,images等目录都可以放在根目录下。</p>\n"},{"layout":"post","title":"Linux终端链接到远程服务器，如何设置链接超时断开时间","date":"2018-04-04T21:00:00.000Z","_content":"\n\n```\n可以查看/etc/ssh/sshd_config文件，配置参数\n\nClientAliveInterval 30     #每30秒向客户端请求消息\n\nClientAliveCountMax 5      #连的人多就设大一点\n\n```","source":"_posts/2018-04-05-linux-ssh-1.md","raw":"---\nlayout: post\ntitle: \"Linux终端链接到远程服务器，如何设置链接超时断开时间\"\ndate:   2018-04-05 05:00:00\ncategories: linux ssh\ntags: [linux,ssh]\n---\n\n\n```\n可以查看/etc/ssh/sshd_config文件，配置参数\n\nClientAliveInterval 30     #每30秒向客户端请求消息\n\nClientAliveCountMax 5      #连的人多就设大一点\n\n```","slug":"linux-ssh-1","published":1,"updated":"2018-09-26T03:22:51.823Z","comments":1,"photos":[],"link":"","_id":"cjminjcwr0006kdbbfxfl2mg0","content":"<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">可以查看/etc/ssh/sshd_config文件，配置参数</span><br><span class=\"line\"></span><br><span class=\"line\">ClientAliveInterval 30     #每30秒向客户端请求消息</span><br><span class=\"line\"></span><br><span class=\"line\">ClientAliveCountMax 5      #连的人多就设大一点</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">可以查看/etc/ssh/sshd_config文件，配置参数</span><br><span class=\"line\"></span><br><span class=\"line\">ClientAliveInterval 30     #每30秒向客户端请求消息</span><br><span class=\"line\"></span><br><span class=\"line\">ClientAliveCountMax 5      #连的人多就设大一点</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"2015总结","date":"2015-12-30T17:00:00.000Z","_content":"\n 1、 请简述你这一年的工作内容，业绩数据回顾\n* 架构方面：服务器安全，数据库性能，高性能缓存\n* 技术沙龙：今年是我听技术分享最多的一年（20场）\n* 分享：加入开源社区，公司内部做git分享，公司内部做mysql索引优化\n* 新技术：docker 学习，redis-cluster 学习\n* coding: 代码比以前精炼 \n    \n2、2015年度解决最核心的三个问题\n* 学习开源项目，加入开源项目\n* mongo+php 开源卡牌库系统\n* 加入明星衣橱，开启新的商城业务 ，运用自己项目的积累，发挥自己的价值\n\n3、请叙述你认为2015年度完成最不好的三件事，并说明原因，如何避免\n* 处理问题的广度还不够，需要我多看看一些课外，开拓自己的视野\n* 安静的思考问题，需要慢下节奏，来思考\n* 自己对时间管理问题，流逝很多不该浪费的时间\n\n4、请描述2016年度你的重点工作内容及计划\n* 购物车，结算，支付（微信+支付宝），用户订单，商家订单，物流 业务的维护\n* redis 技术分享\n* 提供高质量的api接口\n* 整理技术文档\n\n5、请结合个人实际情况分析自己的优势、劣势\n* 优势：\n    * 爱思考\n    * 爱分享\n* 劣势：\n    * 时间优质管理\n    * 对问题广度不够，需要自己多多阅读相关书籍\n\n6、你有哪些建议和意见\n* 组织员工户外活动，增强团队的凝聚力\n* 定期员工代码codeview","source":"_posts/2018-04-05-me-20151231.md","raw":"---\nlayout: post\ntitle:  2015总结\ndate:   2015-12-31 01:00:00\ncategories: 生活\ntags: [年终总结]\n---\n\n 1、 请简述你这一年的工作内容，业绩数据回顾\n* 架构方面：服务器安全，数据库性能，高性能缓存\n* 技术沙龙：今年是我听技术分享最多的一年（20场）\n* 分享：加入开源社区，公司内部做git分享，公司内部做mysql索引优化\n* 新技术：docker 学习，redis-cluster 学习\n* coding: 代码比以前精炼 \n    \n2、2015年度解决最核心的三个问题\n* 学习开源项目，加入开源项目\n* mongo+php 开源卡牌库系统\n* 加入明星衣橱，开启新的商城业务 ，运用自己项目的积累，发挥自己的价值\n\n3、请叙述你认为2015年度完成最不好的三件事，并说明原因，如何避免\n* 处理问题的广度还不够，需要我多看看一些课外，开拓自己的视野\n* 安静的思考问题，需要慢下节奏，来思考\n* 自己对时间管理问题，流逝很多不该浪费的时间\n\n4、请描述2016年度你的重点工作内容及计划\n* 购物车，结算，支付（微信+支付宝），用户订单，商家订单，物流 业务的维护\n* redis 技术分享\n* 提供高质量的api接口\n* 整理技术文档\n\n5、请结合个人实际情况分析自己的优势、劣势\n* 优势：\n    * 爱思考\n    * 爱分享\n* 劣势：\n    * 时间优质管理\n    * 对问题广度不够，需要自己多多阅读相关书籍\n\n6、你有哪些建议和意见\n* 组织员工户外活动，增强团队的凝聚力\n* 定期员工代码codeview","slug":"me-20151231","published":1,"updated":"2018-09-25T02:47:50.563Z","comments":1,"photos":[],"link":"","_id":"cjminjcwt000akdbbnxpb4qjp","content":"<p> 1、 请简述你这一年的工作内容，业绩数据回顾</p>\n<ul>\n<li>架构方面：服务器安全，数据库性能，高性能缓存</li>\n<li>技术沙龙：今年是我听技术分享最多的一年（20场）</li>\n<li>分享：加入开源社区，公司内部做git分享，公司内部做mysql索引优化</li>\n<li>新技术：docker 学习，redis-cluster 学习</li>\n<li>coding: 代码比以前精炼 </li>\n</ul>\n<p>2、2015年度解决最核心的三个问题</p>\n<ul>\n<li>学习开源项目，加入开源项目</li>\n<li>mongo+php 开源卡牌库系统</li>\n<li>加入明星衣橱，开启新的商城业务 ，运用自己项目的积累，发挥自己的价值</li>\n</ul>\n<p>3、请叙述你认为2015年度完成最不好的三件事，并说明原因，如何避免</p>\n<ul>\n<li>处理问题的广度还不够，需要我多看看一些课外，开拓自己的视野</li>\n<li>安静的思考问题，需要慢下节奏，来思考</li>\n<li>自己对时间管理问题，流逝很多不该浪费的时间</li>\n</ul>\n<p>4、请描述2016年度你的重点工作内容及计划</p>\n<ul>\n<li>购物车，结算，支付（微信+支付宝），用户订单，商家订单，物流 业务的维护</li>\n<li>redis 技术分享</li>\n<li>提供高质量的api接口</li>\n<li>整理技术文档</li>\n</ul>\n<p>5、请结合个人实际情况分析自己的优势、劣势</p>\n<ul>\n<li>优势：<ul>\n<li>爱思考</li>\n<li>爱分享</li>\n</ul>\n</li>\n<li>劣势：<ul>\n<li>时间优质管理</li>\n<li>对问题广度不够，需要自己多多阅读相关书籍</li>\n</ul>\n</li>\n</ul>\n<p>6、你有哪些建议和意见</p>\n<ul>\n<li>组织员工户外活动，增强团队的凝聚力</li>\n<li>定期员工代码codeview</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p> 1、 请简述你这一年的工作内容，业绩数据回顾</p>\n<ul>\n<li>架构方面：服务器安全，数据库性能，高性能缓存</li>\n<li>技术沙龙：今年是我听技术分享最多的一年（20场）</li>\n<li>分享：加入开源社区，公司内部做git分享，公司内部做mysql索引优化</li>\n<li>新技术：docker 学习，redis-cluster 学习</li>\n<li>coding: 代码比以前精炼 </li>\n</ul>\n<p>2、2015年度解决最核心的三个问题</p>\n<ul>\n<li>学习开源项目，加入开源项目</li>\n<li>mongo+php 开源卡牌库系统</li>\n<li>加入明星衣橱，开启新的商城业务 ，运用自己项目的积累，发挥自己的价值</li>\n</ul>\n<p>3、请叙述你认为2015年度完成最不好的三件事，并说明原因，如何避免</p>\n<ul>\n<li>处理问题的广度还不够，需要我多看看一些课外，开拓自己的视野</li>\n<li>安静的思考问题，需要慢下节奏，来思考</li>\n<li>自己对时间管理问题，流逝很多不该浪费的时间</li>\n</ul>\n<p>4、请描述2016年度你的重点工作内容及计划</p>\n<ul>\n<li>购物车，结算，支付（微信+支付宝），用户订单，商家订单，物流 业务的维护</li>\n<li>redis 技术分享</li>\n<li>提供高质量的api接口</li>\n<li>整理技术文档</li>\n</ul>\n<p>5、请结合个人实际情况分析自己的优势、劣势</p>\n<ul>\n<li>优势：<ul>\n<li>爱思考</li>\n<li>爱分享</li>\n</ul>\n</li>\n<li>劣势：<ul>\n<li>时间优质管理</li>\n<li>对问题广度不够，需要自己多多阅读相关书籍</li>\n</ul>\n</li>\n</ul>\n<p>6、你有哪些建议和意见</p>\n<ul>\n<li>组织员工户外活动，增强团队的凝聚力</li>\n<li>定期员工代码codeview</li>\n</ul>\n"},{"layout":"post","title":"python 正则表达式","date":"2018-04-04T17:00:00.000Z","_content":"\n![]({{ site.url }}/img/atlas/python正则表达式.png){:height=\"100%\" width=\"100%\"}","source":"_posts/2018-04-05-python-zz.md","raw":"---\nlayout: post\ntitle:  \"python 正则表达式\"\ndate:   2018-04-05 01:00:00\ncategories: Python\ntags: [学习,python]\n---\n\n![]({{ site.url }}/img/atlas/python正则表达式.png){:height=\"100%\" width=\"100%\"}","slug":"python-zz","published":1,"updated":"2018-09-25T02:47:50.563Z","comments":1,"photos":[],"link":"","_id":"cjminjcwu000bkdbbf72yks48","content":"<p><img src=\"!--￼0--&gt;/img/atlas/python正则表达式.png\" alt=\"\">{:height=”100%” width=”100%”}</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"!--￼0--&gt;/img/atlas/python正则表达式.png\" alt=\"\">{:height=”100%” width=”100%”}</p>\n"},{"layout":"post","title":"shell 打包发布","date":"2018-04-04T18:00:00.000Z","_content":"\n## 发布代码 服务器[ linux ]\n\n```\n    #!/bin/bash\n    #author:yongze.chen\n    WEBIP=\"114.215.xx.xx\"\n    S_PATH=\"/data/excel/\"\n    echo \" ========= start==== $WEBIP ====\"\n    cd $S_PATH\n    TAG_PACK=`date +%Y%m%d%s`-excel.tar.gz\n    tar -zcvf  $TAG_PACK *\n    echo \"========== scp $TAG_PACK========\"\n    scp $TAG_PACK root@${WEBIP}:$S_PATH\n    rm $TAG_PACK\n    ssh root@$WEBIP \"cd ${S_PATH} && tar -zxvf ${TAG_PACK} && rm ${TAG_PACK}\"\n    echo \"=========== sucess ================\"\n```","source":"_posts/2018-04-05-shell-push.md","raw":"---\nlayout: post\ntitle:  \"shell 打包发布\"\ndate:   2018-04-05 02:00:00\ncategories: shell\ntags: [shell,ssh]\n---\n\n## 发布代码 服务器[ linux ]\n\n```\n    #!/bin/bash\n    #author:yongze.chen\n    WEBIP=\"114.215.xx.xx\"\n    S_PATH=\"/data/excel/\"\n    echo \" ========= start==== $WEBIP ====\"\n    cd $S_PATH\n    TAG_PACK=`date +%Y%m%d%s`-excel.tar.gz\n    tar -zcvf  $TAG_PACK *\n    echo \"========== scp $TAG_PACK========\"\n    scp $TAG_PACK root@${WEBIP}:$S_PATH\n    rm $TAG_PACK\n    ssh root@$WEBIP \"cd ${S_PATH} && tar -zxvf ${TAG_PACK} && rm ${TAG_PACK}\"\n    echo \"=========== sucess ================\"\n```","slug":"shell-push","published":1,"updated":"2018-09-25T02:47:50.563Z","comments":1,"photos":[],"link":"","_id":"cjminjcww000fkdbbxe2f6c2i","content":"<h2 id=\"发布代码-服务器-linux\"><a href=\"#发布代码-服务器-linux\" class=\"headerlink\" title=\"发布代码 服务器[ linux ]\"></a>发布代码 服务器[ linux ]</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#author:yongze.chen</span><br><span class=\"line\">WEBIP=&quot;114.215.xx.xx&quot;</span><br><span class=\"line\">S_PATH=&quot;/data/excel/&quot;</span><br><span class=\"line\">echo &quot; ========= start==== $WEBIP ====&quot;</span><br><span class=\"line\">cd $S_PATH</span><br><span class=\"line\">TAG_PACK=`date +%Y%m%d%s`-excel.tar.gz</span><br><span class=\"line\">tar -zcvf  $TAG_PACK *</span><br><span class=\"line\">echo &quot;========== scp $TAG_PACK========&quot;</span><br><span class=\"line\">scp $TAG_PACK root@$&#123;WEBIP&#125;:$S_PATH</span><br><span class=\"line\">rm $TAG_PACK</span><br><span class=\"line\">ssh root@$WEBIP &quot;cd $&#123;S_PATH&#125; &amp;&amp; tar -zxvf $&#123;TAG_PACK&#125; &amp;&amp; rm $&#123;TAG_PACK&#125;&quot;</span><br><span class=\"line\">echo &quot;=========== sucess ================&quot;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"发布代码-服务器-linux\"><a href=\"#发布代码-服务器-linux\" class=\"headerlink\" title=\"发布代码 服务器[ linux ]\"></a>发布代码 服务器[ linux ]</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#author:yongze.chen</span><br><span class=\"line\">WEBIP=&quot;114.215.xx.xx&quot;</span><br><span class=\"line\">S_PATH=&quot;/data/excel/&quot;</span><br><span class=\"line\">echo &quot; ========= start==== $WEBIP ====&quot;</span><br><span class=\"line\">cd $S_PATH</span><br><span class=\"line\">TAG_PACK=`date +%Y%m%d%s`-excel.tar.gz</span><br><span class=\"line\">tar -zcvf  $TAG_PACK *</span><br><span class=\"line\">echo &quot;========== scp $TAG_PACK========&quot;</span><br><span class=\"line\">scp $TAG_PACK root@$&#123;WEBIP&#125;:$S_PATH</span><br><span class=\"line\">rm $TAG_PACK</span><br><span class=\"line\">ssh root@$WEBIP &quot;cd $&#123;S_PATH&#125; &amp;&amp; tar -zxvf $&#123;TAG_PACK&#125; &amp;&amp; rm $&#123;TAG_PACK&#125;&quot;</span><br><span class=\"line\">echo &quot;=========== sucess ================&quot;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"清明假期","date":"2018-04-04T16:00:00.000Z","_content":"\n### 早晨\n草堂春睡足，窗外日迟迟。\n\n![]({{ site.url }}/img/20180405-1.jpeg){:height=\"100%\" width=\"100%\"}\n\n### 中午\n\n### 晚上","source":"_posts/2018-04-05-tomb-sweeping-day.md","raw":"---\nlayout: post\ntitle:  \"清明假期\"\ndate:   2018-04-05 00:00:00\ncategories: 生活\ntags: [学习,雪]\n---\n\n### 早晨\n草堂春睡足，窗外日迟迟。\n\n![]({{ site.url }}/img/20180405-1.jpeg){:height=\"100%\" width=\"100%\"}\n\n### 中午\n\n### 晚上","slug":"tomb-sweeping-day","published":1,"updated":"2018-09-25T02:47:50.564Z","comments":1,"photos":[],"link":"","_id":"cjminjcwx000gkdbb8qpa1rab","content":"<h3 id=\"早晨\"><a href=\"#早晨\" class=\"headerlink\" title=\"早晨\"></a>早晨</h3><p>草堂春睡足，窗外日迟迟。</p>\n<p><img src=\"!--￼0--&gt;/img/20180405-1.jpeg\" alt=\"\">{:height=”100%” width=”100%”}</p>\n<h3 id=\"中午\"><a href=\"#中午\" class=\"headerlink\" title=\"中午\"></a>中午</h3><h3 id=\"晚上\"><a href=\"#晚上\" class=\"headerlink\" title=\"晚上\"></a>晚上</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"早晨\"><a href=\"#早晨\" class=\"headerlink\" title=\"早晨\"></a>早晨</h3><p>草堂春睡足，窗外日迟迟。</p>\n<p><img src=\"!--￼0--&gt;/img/20180405-1.jpeg\" alt=\"\">{:height=”100%” width=”100%”}</p>\n<h3 id=\"中午\"><a href=\"#中午\" class=\"headerlink\" title=\"中午\"></a>中午</h3><h3 id=\"晚上\"><a href=\"#晚上\" class=\"headerlink\" title=\"晚上\"></a>晚上</h3>"},{"layout":"post","title":"kafka消息队列","date":"2018-04-07T16:00:00.000Z","_content":"\n> 下载地址:\n\ngithub pro:[kafka docker](https://github.com/wurstmeister/kafka-docker)\n\n> Usage:\n\n```\n\nStart a cluster:\n\ndocker-compose up -d\nAdd more brokers:\n\ndocker-compose scale kafka=3\nDestroy a cluster:\n\ndocker-compose stop\n\n```","source":"_posts/2018-04-08-kafka-1.md","raw":"---\nlayout: post\ntitle:  \"kafka消息队列\"\ndate:   2018-04-08 00:00:00\ncategories: kafka\ntags: [kafka]\n---\n\n> 下载地址:\n\ngithub pro:[kafka docker](https://github.com/wurstmeister/kafka-docker)\n\n> Usage:\n\n```\n\nStart a cluster:\n\ndocker-compose up -d\nAdd more brokers:\n\ndocker-compose scale kafka=3\nDestroy a cluster:\n\ndocker-compose stop\n\n```","slug":"kafka-1","published":1,"updated":"2018-09-25T02:47:50.564Z","comments":1,"photos":[],"link":"","_id":"cjminjcwz000kkdbbdxgejci9","content":"<blockquote>\n<p>下载地址:</p>\n</blockquote>\n<p>github pro:<a href=\"https://github.com/wurstmeister/kafka-docker\" target=\"_blank\" rel=\"noopener\">kafka docker</a></p>\n<blockquote>\n<p>Usage:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Start a cluster:</span><br><span class=\"line\"></span><br><span class=\"line\">docker-compose up -d</span><br><span class=\"line\">Add more brokers:</span><br><span class=\"line\"></span><br><span class=\"line\">docker-compose scale kafka=3</span><br><span class=\"line\">Destroy a cluster:</span><br><span class=\"line\"></span><br><span class=\"line\">docker-compose stop</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>下载地址:</p>\n</blockquote>\n<p>github pro:<a href=\"https://github.com/wurstmeister/kafka-docker\" target=\"_blank\" rel=\"noopener\">kafka docker</a></p>\n<blockquote>\n<p>Usage:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Start a cluster:</span><br><span class=\"line\"></span><br><span class=\"line\">docker-compose up -d</span><br><span class=\"line\">Add more brokers:</span><br><span class=\"line\"></span><br><span class=\"line\">docker-compose scale kafka=3</span><br><span class=\"line\">Destroy a cluster:</span><br><span class=\"line\"></span><br><span class=\"line\">docker-compose stop</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"解决大文件上传$_FILES 为空情况","date":"2018-04-09T16:00:00.000Z","_content":"\n> $_FILES\n\n```\n array()\n```\n\n> 解决方式\n\n1.找到 php.ini 文件\n\n![]({{ site.url }}/img/post-img/1523348587499.jpg){:height=\"100%\" width=\"100%\"}\n\n2.修改 php.ini 文件\n```\n\n post_max_size = 50M\n \n \n upload_max_filesize = 50M\n \n```\n\n3.重启 php-fpm \n","source":"_posts/2018-04-10-$_FILES.md","raw":"---\nlayout: post\ntitle:  '解决大文件上传$_FILES 为空情况'\ndate:   2018-04-10 00:00:00\ncategories: PHP\ntags: [PHP]\n---\n\n> $_FILES\n\n```\n array()\n```\n\n> 解决方式\n\n1.找到 php.ini 文件\n\n![]({{ site.url }}/img/post-img/1523348587499.jpg){:height=\"100%\" width=\"100%\"}\n\n2.修改 php.ini 文件\n```\n\n post_max_size = 50M\n \n \n upload_max_filesize = 50M\n \n```\n\n3.重启 php-fpm \n","slug":"$_FILES","published":1,"updated":"2018-09-25T02:47:50.564Z","comments":1,"photos":[],"link":"","_id":"cjminjcx2000mkdbb68m9kgiv","content":"<blockquote>\n<p>$_FILES</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">array()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>解决方式</p>\n</blockquote>\n<p>1.找到 php.ini 文件</p>\n<p><img src=\"!--￼2--&gt;/img/post-img/1523348587499.jpg\" alt=\"\">{:height=”100%” width=”100%”}</p>\n<p>2.修改 php.ini 文件<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">post_max_size = 50M</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">upload_max_filesize = 50M</span><br></pre></td></tr></table></figure></p>\n<p>3.重启 php-fpm </p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>$_FILES</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">array()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>解决方式</p>\n</blockquote>\n<p>1.找到 php.ini 文件</p>\n<p><img src=\"!--￼2--&gt;/img/post-img/1523348587499.jpg\" alt=\"\">{:height=”100%” width=”100%”}</p>\n<p>2.修改 php.ini 文件<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">post_max_size = 50M</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">upload_max_filesize = 50M</span><br></pre></td></tr></table></figure></p>\n<p>3.重启 php-fpm </p>\n"},{"layout":"post","title":"\"触手可及，用完即走\"-小程序","date":"2018-04-08T16:00:00.000Z","_content":"\n> 伴随着微信小程序出现以及功能接口的不断开放升级等，现在移动互联网的盈利模式来说，小程序会成为一个新的盈利模式，微信小程序在一年多的沉淀中，已经在各行各业的商家应用中了，有很多当中已经尝到了甜头。\n\n> 对于用户而言，微信小程序“触手可及，用完即走”的概念一直备受关注，随着附近的小程序、“搜一搜”小程序、公众号跳转小程序等功能的开发，使用户能更便捷、快速地找到微信小程序。同时，线下各个行业都开始进行小程序的开发，使得用户在使用附近的微信小程序功能时，能够找到更多符合自己需求的产品和服务，这也使得线下企业成功对接线上，从而获得更多的盈利机会。\n\n> 在微信小程序出现前期，其传播内容和方式都比较单一。传播形式以线下扫码的方式为主，后来随着与公众号的入口打通，各种转发分享接口的开发，微信小程序的传播方式变得更加便捷及入品多样化。从此，微信小程序变身成为一个流量入口，使得微信小程序成为了各个行业盈利的一个崭新渠道。\n\n> 现在的微信小程序逐渐与内容电商、传统电商、微商等实现了对接，从而能够以一种更加便捷的方式来引流。当然，也能给消费者提供一种更加便捷的购物模式。通过微信小程序的数据统计功能，还能够帮助商家更好的实现运营，利用云端数据制定出更加详尽营销活动，为自己制造更多的利润收益。\n最为关注的是，微信小程序现在各种功能模式在不断完善中，微信小程序依靠微信这背后社交的流量，微信拥有这巨大的用户量。小程序将会是下一个商业的新的风口。","source":"_posts/2018-04-09-小程序-介绍.md","raw":"---\nlayout: post\ntitle:  '\"触手可及，用完即走\"-小程序'\ndate:   2018-04-09 00:00:00\ncategories: 小程序\ntags: [小程序]\n---\n\n> 伴随着微信小程序出现以及功能接口的不断开放升级等，现在移动互联网的盈利模式来说，小程序会成为一个新的盈利模式，微信小程序在一年多的沉淀中，已经在各行各业的商家应用中了，有很多当中已经尝到了甜头。\n\n> 对于用户而言，微信小程序“触手可及，用完即走”的概念一直备受关注，随着附近的小程序、“搜一搜”小程序、公众号跳转小程序等功能的开发，使用户能更便捷、快速地找到微信小程序。同时，线下各个行业都开始进行小程序的开发，使得用户在使用附近的微信小程序功能时，能够找到更多符合自己需求的产品和服务，这也使得线下企业成功对接线上，从而获得更多的盈利机会。\n\n> 在微信小程序出现前期，其传播内容和方式都比较单一。传播形式以线下扫码的方式为主，后来随着与公众号的入口打通，各种转发分享接口的开发，微信小程序的传播方式变得更加便捷及入品多样化。从此，微信小程序变身成为一个流量入口，使得微信小程序成为了各个行业盈利的一个崭新渠道。\n\n> 现在的微信小程序逐渐与内容电商、传统电商、微商等实现了对接，从而能够以一种更加便捷的方式来引流。当然，也能给消费者提供一种更加便捷的购物模式。通过微信小程序的数据统计功能，还能够帮助商家更好的实现运营，利用云端数据制定出更加详尽营销活动，为自己制造更多的利润收益。\n最为关注的是，微信小程序现在各种功能模式在不断完善中，微信小程序依靠微信这背后社交的流量，微信拥有这巨大的用户量。小程序将会是下一个商业的新的风口。","slug":"小程序-介绍","published":1,"updated":"2018-09-25T02:47:50.564Z","comments":1,"photos":[],"link":"","_id":"cjminjcx3000rkdbb1g2nwiqb","content":"<blockquote>\n<p>伴随着微信小程序出现以及功能接口的不断开放升级等，现在移动互联网的盈利模式来说，小程序会成为一个新的盈利模式，微信小程序在一年多的沉淀中，已经在各行各业的商家应用中了，有很多当中已经尝到了甜头。</p>\n</blockquote>\n<blockquote>\n<p>对于用户而言，微信小程序“触手可及，用完即走”的概念一直备受关注，随着附近的小程序、“搜一搜”小程序、公众号跳转小程序等功能的开发，使用户能更便捷、快速地找到微信小程序。同时，线下各个行业都开始进行小程序的开发，使得用户在使用附近的微信小程序功能时，能够找到更多符合自己需求的产品和服务，这也使得线下企业成功对接线上，从而获得更多的盈利机会。</p>\n</blockquote>\n<blockquote>\n<p>在微信小程序出现前期，其传播内容和方式都比较单一。传播形式以线下扫码的方式为主，后来随着与公众号的入口打通，各种转发分享接口的开发，微信小程序的传播方式变得更加便捷及入品多样化。从此，微信小程序变身成为一个流量入口，使得微信小程序成为了各个行业盈利的一个崭新渠道。</p>\n</blockquote>\n<blockquote>\n<p>现在的微信小程序逐渐与内容电商、传统电商、微商等实现了对接，从而能够以一种更加便捷的方式来引流。当然，也能给消费者提供一种更加便捷的购物模式。通过微信小程序的数据统计功能，还能够帮助商家更好的实现运营，利用云端数据制定出更加详尽营销活动，为自己制造更多的利润收益。<br>最为关注的是，微信小程序现在各种功能模式在不断完善中，微信小程序依靠微信这背后社交的流量，微信拥有这巨大的用户量。小程序将会是下一个商业的新的风口。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>伴随着微信小程序出现以及功能接口的不断开放升级等，现在移动互联网的盈利模式来说，小程序会成为一个新的盈利模式，微信小程序在一年多的沉淀中，已经在各行各业的商家应用中了，有很多当中已经尝到了甜头。</p>\n</blockquote>\n<blockquote>\n<p>对于用户而言，微信小程序“触手可及，用完即走”的概念一直备受关注，随着附近的小程序、“搜一搜”小程序、公众号跳转小程序等功能的开发，使用户能更便捷、快速地找到微信小程序。同时，线下各个行业都开始进行小程序的开发，使得用户在使用附近的微信小程序功能时，能够找到更多符合自己需求的产品和服务，这也使得线下企业成功对接线上，从而获得更多的盈利机会。</p>\n</blockquote>\n<blockquote>\n<p>在微信小程序出现前期，其传播内容和方式都比较单一。传播形式以线下扫码的方式为主，后来随着与公众号的入口打通，各种转发分享接口的开发，微信小程序的传播方式变得更加便捷及入品多样化。从此，微信小程序变身成为一个流量入口，使得微信小程序成为了各个行业盈利的一个崭新渠道。</p>\n</blockquote>\n<blockquote>\n<p>现在的微信小程序逐渐与内容电商、传统电商、微商等实现了对接，从而能够以一种更加便捷的方式来引流。当然，也能给消费者提供一种更加便捷的购物模式。通过微信小程序的数据统计功能，还能够帮助商家更好的实现运营，利用云端数据制定出更加详尽营销活动，为自己制造更多的利润收益。<br>最为关注的是，微信小程序现在各种功能模式在不断完善中，微信小程序依靠微信这背后社交的流量，微信拥有这巨大的用户量。小程序将会是下一个商业的新的风口。</p>\n</blockquote>\n"},{"title":"好好的","date":"2018-09-26T04:30:28.000Z","_content":"","source":"_posts/2018-09-26-好好的.md","raw":"---\ntitle: 好好的\ndate: 2018-09-26 12:30:28\ntags:\n---\n","slug":"好好的","published":1,"updated":"2018-09-26T04:30:28.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjminjcx5000tkdbbda9zm7o1","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"post","title":"centos yum","date":"2018-04-10T16:00:00.000Z","_content":"\n> yum   资源\n\n```\n    [root@iZm5e0o3yq2o3sc6vc3hu0Z yum.repos.d]# ll\n    总用量 52\n    drwxr-xr-x 2 root root 4096 2月  13 2017 backup\n    -r--r--r-- 1 root root 1887 2月  13 2017 CentOS-Base.repo\n    -rw-r--r-- 1 root root 1309 8月  30 2017 CentOS-CR.repo\n    -rw-r--r-- 1 root root  649 8月  30 2017 CentOS-Debuginfo.repo\n    -rw-r--r-- 1 root root  314 8月  30 2017 CentOS-fasttrack.repo\n    -rw-r--r-- 1 root root  630 8月  30 2017 CentOS-Media.repo\n    -rw-r--r-- 1 root root 1331 8月  30 2017 CentOS-Sources.repo\n    -rw-r--r-- 1 root root 3830 8月  30 2017 CentOS-Vault.repo\n    -rw-r--r-- 1 root root  175 12月 28 16:09 elastic-beats.repo\n    -r--r--r-- 1 root root  825 2月  13 2017 epel.repo\n    -rw-r--r-- 1 root root  951 10月  3 2017 epel.repo.rpmnew\n    -rw-r--r-- 1 root root 1050 10月  3 2017 epel-testing.repo\n    -rw-r--r-- 1 root root  267 5月  23 2017 openresty.repo\n    [root@iZm5e0o3yq2o3sc6vc3hu0Z yum.repos.d]# pwd\n    /etc/yum.repos.d\n\n```","source":"_posts/2018-04-11-centos-yum.md","raw":"---\nlayout: post\ntitle:  'centos yum'\ndate:   2018-04-11 00:00:00\ncategories: centos\ntags: [yum,linux,shell]\n---\n\n> yum   资源\n\n```\n    [root@iZm5e0o3yq2o3sc6vc3hu0Z yum.repos.d]# ll\n    总用量 52\n    drwxr-xr-x 2 root root 4096 2月  13 2017 backup\n    -r--r--r-- 1 root root 1887 2月  13 2017 CentOS-Base.repo\n    -rw-r--r-- 1 root root 1309 8月  30 2017 CentOS-CR.repo\n    -rw-r--r-- 1 root root  649 8月  30 2017 CentOS-Debuginfo.repo\n    -rw-r--r-- 1 root root  314 8月  30 2017 CentOS-fasttrack.repo\n    -rw-r--r-- 1 root root  630 8月  30 2017 CentOS-Media.repo\n    -rw-r--r-- 1 root root 1331 8月  30 2017 CentOS-Sources.repo\n    -rw-r--r-- 1 root root 3830 8月  30 2017 CentOS-Vault.repo\n    -rw-r--r-- 1 root root  175 12月 28 16:09 elastic-beats.repo\n    -r--r--r-- 1 root root  825 2月  13 2017 epel.repo\n    -rw-r--r-- 1 root root  951 10月  3 2017 epel.repo.rpmnew\n    -rw-r--r-- 1 root root 1050 10月  3 2017 epel-testing.repo\n    -rw-r--r-- 1 root root  267 5月  23 2017 openresty.repo\n    [root@iZm5e0o3yq2o3sc6vc3hu0Z yum.repos.d]# pwd\n    /etc/yum.repos.d\n\n```","slug":"centos-yum","published":1,"updated":"2018-09-25T02:47:50.565Z","comments":1,"photos":[],"link":"","_id":"cjminjcx6000vkdbbqsmdmpmh","content":"<blockquote>\n<p>yum   资源</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@iZm5e0o3yq2o3sc6vc3hu0Z yum.repos.d]# ll</span><br><span class=\"line\">总用量 52</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 2月  13 2017 backup</span><br><span class=\"line\">-r--r--r-- 1 root root 1887 2月  13 2017 CentOS-Base.repo</span><br><span class=\"line\">-rw-r--r-- 1 root root 1309 8月  30 2017 CentOS-CR.repo</span><br><span class=\"line\">-rw-r--r-- 1 root root  649 8月  30 2017 CentOS-Debuginfo.repo</span><br><span class=\"line\">-rw-r--r-- 1 root root  314 8月  30 2017 CentOS-fasttrack.repo</span><br><span class=\"line\">-rw-r--r-- 1 root root  630 8月  30 2017 CentOS-Media.repo</span><br><span class=\"line\">-rw-r--r-- 1 root root 1331 8月  30 2017 CentOS-Sources.repo</span><br><span class=\"line\">-rw-r--r-- 1 root root 3830 8月  30 2017 CentOS-Vault.repo</span><br><span class=\"line\">-rw-r--r-- 1 root root  175 12月 28 16:09 elastic-beats.repo</span><br><span class=\"line\">-r--r--r-- 1 root root  825 2月  13 2017 epel.repo</span><br><span class=\"line\">-rw-r--r-- 1 root root  951 10月  3 2017 epel.repo.rpmnew</span><br><span class=\"line\">-rw-r--r-- 1 root root 1050 10月  3 2017 epel-testing.repo</span><br><span class=\"line\">-rw-r--r-- 1 root root  267 5月  23 2017 openresty.repo</span><br><span class=\"line\">[root@iZm5e0o3yq2o3sc6vc3hu0Z yum.repos.d]# pwd</span><br><span class=\"line\">/etc/yum.repos.d</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>yum   资源</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@iZm5e0o3yq2o3sc6vc3hu0Z yum.repos.d]# ll</span><br><span class=\"line\">总用量 52</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 2月  13 2017 backup</span><br><span class=\"line\">-r--r--r-- 1 root root 1887 2月  13 2017 CentOS-Base.repo</span><br><span class=\"line\">-rw-r--r-- 1 root root 1309 8月  30 2017 CentOS-CR.repo</span><br><span class=\"line\">-rw-r--r-- 1 root root  649 8月  30 2017 CentOS-Debuginfo.repo</span><br><span class=\"line\">-rw-r--r-- 1 root root  314 8月  30 2017 CentOS-fasttrack.repo</span><br><span class=\"line\">-rw-r--r-- 1 root root  630 8月  30 2017 CentOS-Media.repo</span><br><span class=\"line\">-rw-r--r-- 1 root root 1331 8月  30 2017 CentOS-Sources.repo</span><br><span class=\"line\">-rw-r--r-- 1 root root 3830 8月  30 2017 CentOS-Vault.repo</span><br><span class=\"line\">-rw-r--r-- 1 root root  175 12月 28 16:09 elastic-beats.repo</span><br><span class=\"line\">-r--r--r-- 1 root root  825 2月  13 2017 epel.repo</span><br><span class=\"line\">-rw-r--r-- 1 root root  951 10月  3 2017 epel.repo.rpmnew</span><br><span class=\"line\">-rw-r--r-- 1 root root 1050 10月  3 2017 epel-testing.repo</span><br><span class=\"line\">-rw-r--r-- 1 root root  267 5月  23 2017 openresty.repo</span><br><span class=\"line\">[root@iZm5e0o3yq2o3sc6vc3hu0Z yum.repos.d]# pwd</span><br><span class=\"line\">/etc/yum.repos.d</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"更新zsh","date":"2018-04-10T16:00:00.000Z","_content":"\n> start\n\n```\nupgrade_oh_my_zsh\n\n```\n\n\n> 主题\n\n```\n vim  ~/.zshrc\n \n ###\n \n ZSH_THEME=\"muse\"\n```\n\n[主题链接](https://github.com/robbyrussell/oh-my-zsh/wiki/themes)","source":"_posts/2018-04-11-zsh.md","raw":"---\nlayout: post\ntitle:  '更新zsh'\ndate:   2018-04-11 00:00:00\ncategories: zsh\ntags: [mac]\n---\n\n> start\n\n```\nupgrade_oh_my_zsh\n\n```\n\n\n> 主题\n\n```\n vim  ~/.zshrc\n \n ###\n \n ZSH_THEME=\"muse\"\n```\n\n[主题链接](https://github.com/robbyrussell/oh-my-zsh/wiki/themes)","slug":"zsh","published":1,"updated":"2018-09-25T02:47:50.565Z","comments":1,"photos":[],"link":"","_id":"cjminjcx8000zkdbbp76jwbtq","content":"<blockquote>\n<p>start</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">upgrade_oh_my_zsh</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>主题</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim  ~/.zshrc</span><br><span class=\"line\"></span><br><span class=\"line\">###</span><br><span class=\"line\"></span><br><span class=\"line\">ZSH_THEME=&quot;muse&quot;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/themes\" target=\"_blank\" rel=\"noopener\">主题链接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>start</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">upgrade_oh_my_zsh</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>主题</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim  ~/.zshrc</span><br><span class=\"line\"></span><br><span class=\"line\">###</span><br><span class=\"line\"></span><br><span class=\"line\">ZSH_THEME=&quot;muse&quot;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/themes\" target=\"_blank\" rel=\"noopener\">主题链接</a></p>\n"},{"layout":"post","title":"ngrok","description":"内网穿透","_content":"\n内网穿透\n\n\n```markdown\nngrok by @inconshreveable  \nSession Status                online\nAccount                       yongze (Plan: Free)\nVersion                       2.2.8\nRegion                        United States (us)\nWeb Interface                 http://127.0.0.1:4040\nForwarding                    http://b0cecd04.ngrok.io -> localhost:80\nForwarding                    https://b0cecd04.ngrok.io -> localhost:80\n\nConnections                   ttl     opn     rt1     rt5     p50     p90\n                              3       0       0.00    0.01    0.65    98.26\n\nHTTP Requests\n-------------\n\nGET /                          200 OK\nGET /                          200 OK\nGET /                          200 OK\nGET /favicon.ico               404 Not Found\nGET /                          200 OK\n\n\n```","source":"_posts/2018-05-18-ngrok.md","raw":"---\nlayout: post\ntitle: ngrok\ncategories: [ngrok, 内网穿透]\ndescription: 内网穿透\ntags: [内网,ngrok]\n---\n\n内网穿透\n\n\n```markdown\nngrok by @inconshreveable  \nSession Status                online\nAccount                       yongze (Plan: Free)\nVersion                       2.2.8\nRegion                        United States (us)\nWeb Interface                 http://127.0.0.1:4040\nForwarding                    http://b0cecd04.ngrok.io -> localhost:80\nForwarding                    https://b0cecd04.ngrok.io -> localhost:80\n\nConnections                   ttl     opn     rt1     rt5     p50     p90\n                              3       0       0.00    0.01    0.65    98.26\n\nHTTP Requests\n-------------\n\nGET /                          200 OK\nGET /                          200 OK\nGET /                          200 OK\nGET /favicon.ico               404 Not Found\nGET /                          200 OK\n\n\n```","slug":"ngrok","published":1,"date":"2018-05-17T16:00:00.000Z","updated":"2018-09-26T03:48:47.997Z","comments":1,"photos":[],"link":"","_id":"cjminjcx90011kdbb08osjdjp","content":"<p>内网穿透</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">ngrok by @inconshreveable  </span><br><span class=\"line\">Session Status                online</span><br><span class=\"line\">Account                       yongze (Plan: Free)</span><br><span class=\"line\">Version                       2.2.8</span><br><span class=\"line\">Region                        United States (us)</span><br><span class=\"line\">Web Interface                 http://127.0.0.1:4040</span><br><span class=\"line\">Forwarding                    http://b0cecd04.ngrok.io -&gt; localhost:80</span><br><span class=\"line\">Forwarding                    https://b0cecd04.ngrok.io -&gt; localhost:80</span><br><span class=\"line\"></span><br><span class=\"line\">Connections                   ttl     opn     rt1     rt5     p50     p90</span><br><span class=\"line\"><span class=\"code\">                              3       0       0.00    0.01    0.65    98.26</span></span><br><span class=\"line\"></span><br><span class=\"line\">HTTP Requests</span><br><span class=\"line\">-------------</span><br><span class=\"line\"></span><br><span class=\"line\">GET /                          200 OK</span><br><span class=\"line\">GET /                          200 OK</span><br><span class=\"line\">GET /                          200 OK</span><br><span class=\"line\">GET /favicon.ico               404 Not Found</span><br><span class=\"line\">GET /                          200 OK</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>内网穿透</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">ngrok by @inconshreveable  </span><br><span class=\"line\">Session Status                online</span><br><span class=\"line\">Account                       yongze (Plan: Free)</span><br><span class=\"line\">Version                       2.2.8</span><br><span class=\"line\">Region                        United States (us)</span><br><span class=\"line\">Web Interface                 http://127.0.0.1:4040</span><br><span class=\"line\">Forwarding                    http://b0cecd04.ngrok.io -&gt; localhost:80</span><br><span class=\"line\">Forwarding                    https://b0cecd04.ngrok.io -&gt; localhost:80</span><br><span class=\"line\"></span><br><span class=\"line\">Connections                   ttl     opn     rt1     rt5     p50     p90</span><br><span class=\"line\"><span class=\"code\">                              3       0       0.00    0.01    0.65    98.26</span></span><br><span class=\"line\"></span><br><span class=\"line\">HTTP Requests</span><br><span class=\"line\">-------------</span><br><span class=\"line\"></span><br><span class=\"line\">GET /                          200 OK</span><br><span class=\"line\">GET /                          200 OK</span><br><span class=\"line\">GET /                          200 OK</span><br><span class=\"line\">GET /favicon.ico               404 Not Found</span><br><span class=\"line\">GET /                          200 OK</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"从WordPress到静态网站","date":"2017-08-01T04:00:00.000Z","_content":"\n作为一个极简主义者，越来越受不了WordPress的臃肿。主要自己平时都是用Markdown来做记录，而WordPress支持的不是很好，另外有时写的md长文通过三方软件导出的html也不造放在wp的什么地方才合适，管理起来还不如几个静态页面来得方便。于是有了某天来个大整顿的想法。\n\n对前端只停留在css的我，花了整三天时间，从Hexo到Jekyll再到Bootstrap，以及各种markdown2html解析器...最后基本算是从头写了一个基于Jekyll的website theme 😓  在此记录了各种前端坑，自认为还算详细吧。<!-- more -->\n\n\n## Hexo\n\n主流的静态页面生成器有俩，一个Jekyll，一个Hexo，都支持Markdown。 前者用的是Ruby，后者为Node.js。\n\nHexo会比Jekyll搭建起来更方便一些，而且各种配置项的设计也很便捷，网站themes还很丰富，所以我一开始弄的就是这个。\n\n* [Hexo官方文档](https://hexo.io/zh-cn/docs/)\n* [next](https://github.com/iissnan/hexo-theme-next) : 一款优雅并且功能强大的主题. [[doc]](http://theme-next.iissnan.com/getting-started.html) [[demo]]([http://notes.iissnan.com](http://notes.iissnan.com/))\n\n搭建方法上面这两个链接写的很详细。\n\n这里主要记录一下让Hexo支持LaTex的注意地方。Hexo用MathJax时会有一些[转义问题](http://2wildkids.com/2016/10/06/%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86Hexo%E5%92%8CMathJax%E7%9A%84%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/#)，经我自己测试，最好的方式是用`hexo-renderer-pandoc`渲染器代替原有的`hexo-renderer-marked`。而网上说的用`hexo-renderer-kramed`，对矩阵的情况显示的不好。\n\n~~~\n$ npm uninstall hexo-renderer-marked --save\n$ npm install hexo-renderer-kramed --save\n~~~\n\n\n## Jekyll\n\n其实用Hexo/Jekyll+现成的主题，很方便就能搭出一个静态网站出来。只是除了代码高亮、LaTex这些功能之外，我还想能区分出code block 和普通无需highlighting的`<pre>`部分，还有其他一些改动。因为markdown解析的原因，基本所有themes出的效果都是将两者统一处理了。强迫症（其实就是zuo），主题挑来挑去都没找到个合心意的，比如next这种，太复杂，让我一个前端白痴改，哈，那还是自己从头写一个比较符合程序员造轮子的习惯吧。。。（捂脸\n\n（至于为啥从Hexo转到了Jekyll，原因未明）\n\n## Get Started\n\n参考：[Jekyll Doc](https://jekyllrb.com/docs/home/) ([中文版](http://jekyll.com.cn/docs/home/)，内容比较旧)\n\n### Installation\n\n本来在本地用Homebrew安装一路顺畅，但放到服务器就各种问题。\n\n首先直接用apt-get下载的Ruby版本比较旧。\n\n~~~\n# Install Ruby & RubyGems\n$ sudo apt-add-repository ppa:brightbox/ruby-ng\n$ sudo apt-get update\n$ sudo apt-get install ruby2.4\n\n# Install Jekyll and Bundler gems\n$ sudo gem install jekyll bundler\n~~~\n然后在`gem install jekyll`时会报错：\n\n```\nerror: could not find a valid gem (>= 0) in any repository\n```\n\n参考[github issues](https://github.com/jekyll/jekyll/issues/1409)，F*k GWF，需要将`https://rubygems.org/`换成其他可访问的镜像，如[Ruby China 镜像](http://gems.ruby-china.org/)。\n\n```\n$ gem sources --remove https://rubygems.org/\n$ gem sources -a https://gems.ruby-china.org/\n$ gem sources -l\n*** CURRENT SOURCES ***\nhttps://gems.ruby-china.org/   \n# 确保只有 gems.ruby-china.org\n```\n\n重新尝试 install jekyll，还是报错：\n\n```\ncurrent directory: /var/lib/gems/2.4.0/gems/ffi-1.9.18/ext/ffi_c\n/usr/bin/ruby2.4 -r ./siteconf20170801-1836-1n75umz.rb extconf.rb\nmkmf.rb can't find header files for ruby at /usr/lib/ruby/include/ruby.h\n```\n\n解决方式：\n\n```\n$ sudo apt-get install ruby2.4-dev\n```\n\n之后就可以正常安装jekyll了。\n\n另外，根据[Ruby China 镜像](http://gems.ruby-china.org/)，你可以用 Bundler 的 [Gem 源代码镜像命令](http://bundler.io/v1.5/bundle_config.html#gem-source-mirrors)：\n\n```\n$ bundle config mirror.https://rubygems.org https://gems.ruby-china.org\n```\n这样就不用改你的 Gemfile 中的 source了。\n\n```\nsource \"https://rubygems.org\"\n...\n```\n\n### Basic Command\n\n用jekyll新建一个site:\n\n```\n$ jekyll new myblog\n$ cd myblog\n$ bundle exec jekyll serve\n```\n\n打开http://localhost:4000测试。\n\n默认使用的是`Minima theme`. 目前基于jekyll 3.x的themes还比较少。\n因为我是自己新建的theme，就不用这样方式了。\n\n---\n\n启动服务：\n\n```\n# 启动服务\n$ jekyll serve\n\n# 启动服务(gem-based theme)\n$ bundle exec jekyll serve\n\n# 脱离终端在后台运行\n# 如果你想关闭服务器，可以使用`kill -9 1234`命令，\"1234\" 是进程号（PID）。\n# 如果你找不到进程号，那么就用`ps aux | grep jekyll`命令来查看，然后关闭服务器。\n$ jekyll serve --detach\n\n# 和jekyll serve相同，但是会查看变更并且自动再生成。\n$ jekyll serve --watch\n```\n\n生成静态页面（位于`_site`目录）：\n\n```\n$ jekyll build\n```\n\n或者用：(watched for changes, and regenerated automatically.)\n\n```\n$ jekyll build --watch\n```\n\n# Set up Your Site on VPS\n\n网上清一色都是通过github pages来发布的站点，然后通过修改`CNAME`文件来达到绑定域名的目的。\n\n我这里是放到VPS上，需要自己搭建web server环境。\n\n> Jekyll is a static site generator, not a webserver. You may generate the static files and serve with webserver like `nginx`, which provides such abilities.\n\n参考：\n\n* [How To Get Started with Jekyll on an Ubuntu VPS](https://www.digitalocean.com/community/tutorials/how-to-get-started-with-jekyll-on-an-ubuntu-vps)\n* [Set up a Jekyll site on a vps with Ubuntu, Nginx and Letsencrypt](https://thomasroest.com/2016/11/05/set-up-a-jekyll-site-on-a-vps-with-ubuntu-nginx-and-letsencrypt.html)\n\n因为是静态网站，所以Jekyll其实安装在本地就可以，静态页面也放在本地。然后将Jekyll生成的静态HTML文件（`_site`目录下）通过类似FTP的方式上传到VPS就行。\n\n将本地数据上传到远程服务用`scp`就行，后来了解到`rsync`这个命令。`rsync`只传送两个文件的不同部分，而不是每次都整份传送，因此速度很快。\n\n先来理清关系：\n\n- [Jekyll](http://jekyllrb.com/) for write our content\n- [nginx](http://nginx.org/en/) to serve our content\n- [Capistrano](http://www.capistranorb.com/) to deploy\n\n## Nginx\n\n```\nsudo apt-get install nginx\nsudo service nginx start\n```\n\n然后输入vps地址就能看到nginx的欢迎页面。\n\n查看运行状态：\n\n```\nsudo service nginx status\n# 显示：\n- nginx is running\n```\n\n修改 nginx 配置：sudo vim /etc/nginx/sites-enabled/default\n\n将 `root /usr/share/nginx/html;` 注释掉，改为 `root /home/deploy/your_blog_name/_site`。\n\n将 `server_name localhost;` 注释掉，改为 `server_name your_domain.com;`。\n\n重新启动nginx，就能看到建的blog内容了。\n\n## Capistrano\n\nCapistrano 是一个 Ruby 程序，参考第一个文章链接，它可以通过Git复制代码到服务器等操作。\n\n```\nsudo gem install capistrano \n```\n\n这里先存留吧，暂时还没用到Capistrano。\n\n目前是按照[利用Apache进行多站点配置](http://blog.lszero.com/coding4fun/multisite-setting.html)设置的。\n\n# Create New Theme From Scratch\n\n既然是from scratch，就先把jekyll的目录结构理清，然后借助bootstrap框架创建主题，最后就是各种features了。\n\n## Basic\n\n### Directory Structure\n\n用`jekyll new-theme xxx`命令，就可以创建出一个theme需要的基本目录项。\n\n```\n.\n├── _config.yml\n├── _drafts\n|   ├── begin-with-the-crazy-ideas.textile\n|   └── on-simplicity-in-technology.markdown\n├── _includes\n|   ├── footer.html\n|   └── header.html\n├── _layouts\n|   ├── default.html\n|   ├── post.html\n├── _posts\n|   ├── 2007-10-29-why-every-programmer-should-play-nethack.textile\n|   └── 2009-04-26-barcamp-boston-4-roundup.textile\n├── _data\n|   └── members.yml\n├── _site\n└── index.html\n```\n\n说明：\n\n`_config.yml` 是配置文件。默认配置参见：[https://jekyllrb.com/docs/configuration/#default-configuration](https://jekyllrb.com/docs/configuration/#default-configuration)\n\n`_includes` 里的文件为了布局重用。\n\n`_layouts` 站点布局模板。布局可以在 [YAML 头信息](http://jekyll.com.cn/docs/frontmatter/)中根据不同文章进行选择。 \n\n`_posts` 将md文件以`2017-08-01-welcome-to-jekyll.md`的格式放到该目录中。\n\n`_drafts` 中的md文件直接以`title.md`命名，并不会发布出来。当运行`jekyll serve`或者`jekyll build --drafts`时，草稿文章会被加上日期值并发布出来。\n\n`_site` 存放jekyll转化完成的html文件。有时修改效果不生效，可以尝试删除该目录。\n\n### Variables\n\n自带的变量详见：[Variables](http://jekyllrb.com/docs/variables/)。\n\n或者通过`_config.yml`添加。\n\n### Need to Know\n\n若在`index.html`的YAML头信息中加入：\n\n```\n---\nlayout: default\n...\n---\n```\n\n则在`default.html`中调用{% raw %}`{{ content }}`{% endraw %}时，就会把`index.html`中的所有内容放到调用处。\n\n## Bootstrap\n\nBootstrap前端框架真是我这种前端白痴的福音。\n\n下载[Bootstrp](https://github.com/twbs/bootstrap/releases/download/v3.3.7/bootstrap-3.3.7-dist.zip)，我这里将解压后的文件放到了`assets/bootstrap-3.3.7-dist` 目录下。\n\n使用Bootstrap：\n\n参考Bootstrap官网里给的[基本HTML模板](http://getbootstrap.com/getting-started/#template)，\n\n（1）将下面这行代码改成自己的相应路径后，放到`head.html` 的`<head></head>` 标签中。\n\n```  html\n<!-- Bootstrap -->\n<link rel=\"stylesheet\" href=\"/assets/bootstrap-3.3.7-dist/css/bootstrap.min.css\">\n```\n\n（2）将下两行改成自己的相应路径后，放到`default.html` 的`<body></body>` 标签中的最下方，为了最后加载。\n\n```html\n<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js\"></script>\n<!-- Include all compiled plugins (below), or include individual files as needed -->\n<script src=\"/assets/bootstrap-3.3.7-dist/js/bootstrap.min.js\"></script>\n```\n\n若没效果，删除 `_site` 目录再试试，或者用命令重新 build。\n\n### NavBar\n\n参考Bootstrap官网给的[示例代码](http://getbootstrap.com/components/#navbar)，写入`header.html`文件中。\n\n然后在`default.html`的`<body></body>`标签中引入{% raw %}`{% include header.html %}`{% endraw %}。\n\n注意的点是，\n\n若使用了`.navbar-fixed-top` 类，这个固定的导航条会遮住页面上的其它内容，除非你给 `<body>` 元素底部设置了 `padding`，例如：\n\n```\nbody { padding-top: 70px; }\n```\n\n## Features\n\n### Post Excerpt\n\n在`index.html` 中显示文章摘要。参见[https://jekyllrb.com/docs/posts/#post-excerpts](https://jekyllrb.com/docs/posts/#post-excerpts)。\n\n（1）自带的{% raw %}`{{ post.excerpt }}`{% endraw %} 会自动取第一段的内容作为摘要。\n\n若想自定义，\n\n（2）在`_config.yml` 文件中指定摘要的分隔符：\n\n```\nexcerpt_separator: <!-- more -->\n```\n\n这样会覆盖自带的{% raw %}`{{ post.excerpt }}`{% endraw %}功能，然后在文章内容需要分隔的摘要后面加上`<!-- more -->`。而`<!-- more -->` 本身作为注释，不会影响 markdown 的显示。\n\n（3）或者采用这样的方式：\n\n```\n{% raw %}{{ post.content | strip_html | truncatewords:75 }}{% endraw %}\n```\n\n### Pagination\n\n用于`index.html` 里对文章的分页显示功能。\n\n（1）首先安装`jekyll-paginate`：\n\n```\n$ sudo gem install jekyll-paginate\n```\n\n在配置文件`_config.yml`中添加：\n\n```\nplugins:\n  - jekyll-paginate\npaginate: 5\npaginate_path: \"/pages:num/\"\n```\n\n其中，`paginate: 5` 设置的是分页数；\n`paginate_path: \"/pages:num/\"` 设置的是URL的显示格式，如 http://localhost:4000/pages2/。\n\n（2）然后参考[https://jekyllrb.com/docs/pagination/](https://jekyllrb.com/docs/pagination/)在`index.html`添加分页功能，并结合Bootstrap里的分页样式修改：[http://getbootstrap.com/components/#pagination](http://getbootstrap.com/components/#pagination)。\n\n### SideBar\n\n这里利用了 bootstrap 的栅格布局，栅格布局将一个页面分割成12个等宽的列。(详见 [example](http://getbootstrap.com/css/#grid-example-basic))\n\n```html\n<div class=\"row-fluid\">\n  <div class=\"col-md-9\">\n    <h2>Content</h2>\n  </div>\n  <div class=\"col-md-3\">\n    <h2>Sidebar</h2>  \n  </div>\n</div>\n```\n\n让侧边栏固定住，不随页面滚动而滚动：加入`class=\"affix\"`。\n\n---\n\n**说明：**\n\n我这里设置两种sidebar：\n\n* 一种是`index.html`里的，用于显示author信息，写在`main_sidebar.html`中；\n* 另一种是`post`对应的，用于显示目录列表，写在`post_sidebar.html`中。\n\n---\n\n### Social Icons\n\nicons用的是 [fontawesome](http://fontawesome.io/)。我这里将解压后的 `fonts`和`css`文件夹复制到了`assets`目录下。\n\n在`head.html`中添加：\n\n```html\n<link rel=\"stylesheet\" href=\"/assets/css/font-awesome.min.css\">\n```\n\n要使用哪个图标，直接去[官网](http://fontawesome.io/icons/)搜代码就行。\n\n修改图标颜色，因为其本身就是一种字体，故使用`color `修改即可。\n\n修改图标大小也是，用`font-size`即可，或者：\n\n```html\n<i class=\"fa fa-camera-retro\"></i>\n<i class=\"fa fa-camera-retro fa-2x\"></i>\n<i class=\"fa fa-camera-retro fa-3x\"></i>\n```\n\n对官网搜不到的社交网站图标怎么办，如“知乎”的：\n\n```html\n<a href=\"{{ site.social_media.zhihu_url }}\" class=\"btn\" title=\"Zhihu\"><span class=\"fa-stack fa-lg\"><i class=\"fa fa-circle fa-stack-2x\"></i><i class=\"fa fa-stack-1x fa-inverse\">知</i></span></a>\n```\n\n### Table of Content\n\n#### post中显示目录 \n\nkramdown自带了解析目录的功能。详见：[https://kramdown.gettalong.org/converter/html.html#toc](https://kramdown.gettalong.org/converter/html.html#toc)\n\n在md文件中加入：\n\n```\n# 无序列表\n* TOC\n{:toc}\n{: .this-is-my-class}\n```\n\n或者：\n\n```\n# 有序列表\n1. TOC\n{:toc}\n{: .this-is-my-class}\n```\n\n并且可在`_config.yml`中设置要显示的标题级别：\n\n```\nkramdown: \n  toc_levels: \"2,3\" \n```\n#### sidebar中显示目录\n\n侧边栏目录随浏览内容动态滚动功能，利用Bootstrap的[Scrollspy](http://getbootstrap.com/javascript/#scrollspy)来实现。\n\n* 参考 [application.js](http://www.thomaszhao.cn/2015/01/08/how-do-i-build-this-jekyll-blog/#toctable-of-content-) 获取目录结构，和标题滚动效果。\n* 参考 [JQUERY实现侧边栏随滚动条滚动并固定位置](https://www.mywpku.com/jquery-pin-elements.html) 来固定sidebar的位置，并且效果是：当滚动到指定模块时才置顶该模块。\n\n最后写了个 [TOP.js](https://github.com/lszero/lszero.github.io/blob/master/assets/js/toc/TOC.js) 终于实现得还算满意了。（当然，还要配合 css 使用）\n\n另外，其它不错的实现：\n\n- [bootstrap-toc](https://afeld.github.io/bootstrap-toc/) ([github](https://github.com/afeld/bootstrap-toc/tree/gh-pages/dist))\n- [Tocify plugin](http://gregfranko.com/jquery.tocify.js/)\n- [TOC plugin](http://projects.jga.me/toc/)\n\n#### Hide sidebar for mobile display\n\n手机显示时，隐藏侧边栏，否则会显示混乱。\n\n```css\n@media (max-width: 800px) {\n    #sidebar {\n        display:none !important;\n    }\n}\n```\n\n### Search\n\n参考：[Button addons](http://getbootstrap.com/components/#input-groups-buttons) & [Forms](http://getbootstrap.com/components/#navbar-forms)\n\n将下面代码加入`header.html`中：\n\n```html\n<form class=\"navbar-form navbar-left\" role=\"search\">\n  <div class=\"input-group\">\n    <span class=\"input-group-btn\">\n      <button class=\"btn btn-default\" type=\"button\">Go!</button>\n    </span>\n    <input type=\"text\" class=\"form-control\" placeholder=\"Search\">\n  </div>\n</form>\n```\n\n对于search逻辑，目前还没找到一个很好的方式去实现。。。（如果知道的，麻烦告诉我一声！）\n\n### Back to Top\n\n该功能我放在了`post_sidebar.html`中：\n\n```html\n<a href=\"#top\" class=\"back-to-top\">^</a>\n```\n\n其实就是个link，最后再用css设置样式。\n\n---\n\n更新：\n\n为了不让footer覆盖掉 back-to-top，只能把back-to-top写在footer后面。故改在了`default.html`里。\n\n### Comments\n\n#### Gitment\n\n[Gitment](https://imsun.net/posts/gitment-introduction/) 挺不错的的。按照官网的说明引入js后，在其中修改自己的OAuth Application信息。\n\n#### isso\n\n这是自建评论系统的一种方式。[官网](https://posativ.org/isso/)需要fq.\n\n我之后用的也是这种方法，详见：[搭建Isso评论服务](http://blog.lszero.com/coding4fun/comments-with-isso.html)\n\n### Archives\n\n{% raw %}`{% for post in paginator.posts %}`{% endraw %} 并不能使用，因为paginator只会对`index.html`有效。\n\n`site.posts | size` 获取总的文章数。\n\n因为jekyll不支持按日期获取，只能暂时用{% raw %}`{% for post in site.posts %}`{% endraw %}。\n\n这部分待补充吧。\n\n### Category\n\n参考 [使用Category分类](https://segmentfault.com/a/1190000000406017#articleHeader2)。\n\n首先在每个文章的YAML头信息中定义类别，如：\n\n```\n---\nlayout: post\ntitle:  \"your title\"\ncategories: Algorithm\n---\n```\n\n**获取所有类别：**\n\n```html\n{% raw %}{% for category in site.categories %}\n  <h2>{{ category[0] }} ({{ category[1].size }})</h2>\n  <ul>\n  {% for post in category[1] %}\n    <li>{{ post.date | date:\"%d/%m/%Y\"}}<a href=\"{{ post.url }}\">{{ post.title }}</a></li>\n  {% endfor %}\n  </ul>\n{% endfor %}{% endraw %}\n```\n\n使用：\n\n* `site.categories.size` 获取总的类别数。\n* `category[0]` 获取分类名称。\n* `category[1].size` 获取该分类下文章的数目。\n* `site.categories.CATEGORY` 可得到某个特定类别的所有文章。\n\n更多变量可参见：[http://jekyllrb.com/docs/variables/#site-variables](http://jekyllrb.com/docs/variables/#site-variables).\n\n输出单个分类下的所有文章：\n\n`site.categories.CATEGORY` 需要手动指定，并不是很方便。\n\n[使用Category分类](https://segmentfault.com/a/1190000000406017#articleHeader2)这篇文章里使用js来实现。\n\n我这里是先生成好`categories.html`，里面列出了所有的文章。然后利用锚点`categories.html#xxx`进行跳转到指定的类别。\n\n### Tags\n\n参考[使用文章标签索引文章](https://segmentfault.com/a/1190000000406017#articleHeader5)。\n\n首先在每个文章的YAML头信息中定义tags，如：\n\n```\n---\nlayout: post\ntitle:  \"your title\"\ntags: [github, jekyll]\n---\n```\n\n和[category](#category)的设置方法差不多，就不赘述了。\n\n### Latex\n\n参考：[https://jekyllrb.com/docs/extras/#math-support](https://jekyllrb.com/docs/extras/#math-support)\n\n我这里为了避免所有pages都引入mathjax相关js代码，采用了不同的设置：\n\n在配置文件`_config.yml`中添加：\n\n```\nmathjax: false\n```\n\n在`head.html`中添加：\n\n```html\n{% raw %}{% if page.mathjax %}\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML\" type=\"text/javascript\"></script>\n{% endif %}{% endraw %}\n```\n然后在需要引入mathjax的md文件头中加入`mathjax: true`，如：\n\n```\n---\nlayout: post\n...\nmathjax: true\n---\n```\n\n####  Support $\n\n默认只支持双`$`符，修改：\n\n```js\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({\n    TeX: {\n      equationNumbers: {\n        autoNumber: \"AMS\"\n      }\n    },\n    tex2jax: {\n      inlineMath: [ ['$','$'] ],\n      displayMath: [ ['$$','$$'] ],\n      processEscapes: true,\n    }\n  });\n</script>\n```\n\n#### Mathjax Rendering Problem\n\n若latex公式中包含`|`符，如`|a|`，会被markdown解析器当成`<table></table>`来处理。\n\n又如，定义矩阵时，其中的换行`\\\\`也会被解析出问题，把第一个`\\`当成了转义符。\n\n解决方式：\n\n对第一种情况，根据 [Syntax \\| Kramdown](https://kramdown.gettalong.org/syntax.html#math-blocks) 上的说明，将`|`用`\\vert`来代替。\n\n对第二种情况，用双`$$`符解决转义问题。\n\n### Code Highlighting\n\nJekyll 3.x 自带了rouge代码高亮的功能，但是不造为啥一直not working（难道又被看脸了。。\n\n于是这里用的是[highlightjs](https://highlightjs.org/)。在`head.html`里添加：\n\n```html\n<link rel=\"stylesheet\" href=\"/lib/highlight/styles/hybrid.css\">\n<script src=\"/lib/highlight/highlight.pack.js\"></script>\n<script>hljs.initHighlightingOnLoad();</script>\n```\n\n我这里把下载的`highlightjs`的相关文件放在了`lib`目录下，样式选的是`hybrid.css`。（monokai-sublime 和 hybrid 配色也不错。）\n\n`highlightjs`会解析并高亮`<pre><code>...</code></pre>`中的内容。如\n\n```html\n<pre><code class=\"html\">...</code></pre>\n```\n\n若不需要高亮则设为：\n\n```html\n<pre><code class=\"nohighlight\">...</code></pre>\n```\n\n这里有个麻烦的地方，若md里没有指明语言，`highlightjs`也会自动检测是什么语言。如果不想对某个code block进行高亮，有两种解决方式：（当然了，我比较折腾，一般人也不需要这个。。（捂脸）\n\n（1）每次手动加入`nohighlight`。\n\n```\n​```nohighlight\nxxx\n​```\n```\n\n（2）修改markdown解析器。\n\n第一种方式比较麻烦，但`highlightjs`又没有提供关闭`highlightAuto`的接口。\n\n### Custom Markdown Parser\n\n在`_config.yml`中可以看到，默认使用的是`kramdown`解析器。\n\n```\nmarkdown: kramdown\n```\n\n关于[Custom Markdown Processors](https://jekyllrb.com/docs/configuration/#custom-markdown-processors)官网有一些说明，好吧，没看懂，毕竟不会Ruby。kramdown也不能以overwrited的方式改写相应的convert方法，然后又写了段js代码试图修改kramdown解析出的html，但还是没成功。真是艰辛，网上找了好久都无果，最后还不如直接看代码改来得快。。。\n\n好在`highlightjs`提供了这个：\n\n```js\n// ignore languages\n<script>hljs.configure({ ignore: ['text'] });</script>\n```\n\n然后看Jekyll源码，找到了 `jekyll/lib/jekyll/converters/markdown/kramdown_parser.rb` (see [code](https://github.com/jekyll/jekyll/blob/57fd5f887da1189a16bdfbb982d75f725c38d725/lib/jekyll/converters/markdown/kramdown_parser.rb)) \n\n```ruby\ndef convert(content)\n  Kramdown::Document.new(content, @config).to_html\nend\n```\n\n接着看kramdown源码，找到了`kramdown/lib/kramdown/converter/html.rb` (see [code](https://github.com/gettalong/kramdown/blob/f4cdae257159ce0addf542739fed262e4a2cf401/lib/kramdown/converter/html.rb)) \n\n在我的本地电脑中，相关文件位于`/usr/local/lib/ruby/gems/2.4.0/gems/kramdown-1.14.0/lib/kramdown/converter/html.rb`。\n\n找到`def convert_codeblock(el, indent)`函数进行修改：\n\n在代码`code_attr['class'] = \"language-#{lang}\" if lang` 前添加：\n\n```ruby\nif lang.nil?\n  lang = \"text\"\nend\n```\n\n并将代码`if highlighted_code` 改为 `if highlighted_code && lang`。\n\n（其中，`nil`是判空的意思。）\n\n这样在不指明语言的时候，不高亮显示。\n\n---\n\n上面是mac环境下，可以直接改代码。但是在linux环境下，只有一个二进制执行文件。\n\n于是，先删除原有的：\n\n```\n$ sudo gem uninstall kramdown\n```\n\n然后在官网[下载源码](https://github.com/gettalong/kramdown/releases)重新安装：\n\n```\n$ ruby setup.rb config\n$ ruby setup.rb setup\n$ ruby setup.rb install\n```\n\n好吧，暂时没弄好。。。\n\n## Else\n\n### Permalinks\n\n在`_config.yml`中设置，如：\n\n```\npermalink: /:categories/:year/:month/:day/:title.html\n```\n### footer\n\n当页面内容长度不够时，footer显示位置可能有问题。\n\n让footer内容永远处于最末端：\n\n```html\n$height-footer: 40px;\n\nhtml {\n    height: 100%;\n}\n\nbody {\n    min-height: 100%;\n    position: relative;\n    padding-bottom: $height-footer;\n}\n\n.footer {\n    bottom: 0;\n    width: 100%;\n    position: absolute;\n    height: $height-footer;\n}\n```\n\n子元素的百分比高度也可以基于父元素的百分比高度，前提是父元素的父元素必须有一个明确的高度。要使`min-height`的百分比值生效，其父元素的`height`值必须为一个固定的高度或者是一个有效的百分比高度。\n\n## Problems\n\n{% raw %}`{{ xxx }}`{% endraw %} 或者 {% raw %}`{% xxx %}`{% endraw %} 显示不出来。\n\n解决方式：\n\n（1）\n\n```\n\\{\\{ xxx \\}\\}\n```\n\n（2）参考：[Escaping double curly braces inside a markdown code block in Jekyll](https://stackoverflow.com/questions/24102498/escaping-double-curly-braces-inside-a-markdown-code-block-in-jekyll)\n\n```\n{% assign openTag = '{%' %}{{ openTag }} raw %}    \nThis is a test: {% raw %}{{ xxx }}{% endraw %}\n{{ openTag }} endraw %}\n```\n（3）那么问题又来了，如何显示上面的 raw 和 endraw 呢？参考：[jekyll 如何转义字符](http://www.cnblogs.com/OceanHeaven/p/6959669.html)\n\n```\nserver {\n    listen [::]:80;\n    server_name comments.lszero.com;\n    \n    location /isso {\n        proxy_pass http://localhost:8090;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Script-Name /isso;\n    }\n}\n```\n\n\n","source":"_posts/2017-08-01-static-website-with-jekyll.md","raw":"---\nlayout: post\ntitle:  \"从WordPress到静态网站\"\ndate:   2017-08-01 12:00:00\ncategories: coding4fun\ntags: [github, jekyll, bootstrap]\n---\n\n作为一个极简主义者，越来越受不了WordPress的臃肿。主要自己平时都是用Markdown来做记录，而WordPress支持的不是很好，另外有时写的md长文通过三方软件导出的html也不造放在wp的什么地方才合适，管理起来还不如几个静态页面来得方便。于是有了某天来个大整顿的想法。\n\n对前端只停留在css的我，花了整三天时间，从Hexo到Jekyll再到Bootstrap，以及各种markdown2html解析器...最后基本算是从头写了一个基于Jekyll的website theme 😓  在此记录了各种前端坑，自认为还算详细吧。<!-- more -->\n\n\n## Hexo\n\n主流的静态页面生成器有俩，一个Jekyll，一个Hexo，都支持Markdown。 前者用的是Ruby，后者为Node.js。\n\nHexo会比Jekyll搭建起来更方便一些，而且各种配置项的设计也很便捷，网站themes还很丰富，所以我一开始弄的就是这个。\n\n* [Hexo官方文档](https://hexo.io/zh-cn/docs/)\n* [next](https://github.com/iissnan/hexo-theme-next) : 一款优雅并且功能强大的主题. [[doc]](http://theme-next.iissnan.com/getting-started.html) [[demo]]([http://notes.iissnan.com](http://notes.iissnan.com/))\n\n搭建方法上面这两个链接写的很详细。\n\n这里主要记录一下让Hexo支持LaTex的注意地方。Hexo用MathJax时会有一些[转义问题](http://2wildkids.com/2016/10/06/%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86Hexo%E5%92%8CMathJax%E7%9A%84%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/#)，经我自己测试，最好的方式是用`hexo-renderer-pandoc`渲染器代替原有的`hexo-renderer-marked`。而网上说的用`hexo-renderer-kramed`，对矩阵的情况显示的不好。\n\n~~~\n$ npm uninstall hexo-renderer-marked --save\n$ npm install hexo-renderer-kramed --save\n~~~\n\n\n## Jekyll\n\n其实用Hexo/Jekyll+现成的主题，很方便就能搭出一个静态网站出来。只是除了代码高亮、LaTex这些功能之外，我还想能区分出code block 和普通无需highlighting的`<pre>`部分，还有其他一些改动。因为markdown解析的原因，基本所有themes出的效果都是将两者统一处理了。强迫症（其实就是zuo），主题挑来挑去都没找到个合心意的，比如next这种，太复杂，让我一个前端白痴改，哈，那还是自己从头写一个比较符合程序员造轮子的习惯吧。。。（捂脸\n\n（至于为啥从Hexo转到了Jekyll，原因未明）\n\n## Get Started\n\n参考：[Jekyll Doc](https://jekyllrb.com/docs/home/) ([中文版](http://jekyll.com.cn/docs/home/)，内容比较旧)\n\n### Installation\n\n本来在本地用Homebrew安装一路顺畅，但放到服务器就各种问题。\n\n首先直接用apt-get下载的Ruby版本比较旧。\n\n~~~\n# Install Ruby & RubyGems\n$ sudo apt-add-repository ppa:brightbox/ruby-ng\n$ sudo apt-get update\n$ sudo apt-get install ruby2.4\n\n# Install Jekyll and Bundler gems\n$ sudo gem install jekyll bundler\n~~~\n然后在`gem install jekyll`时会报错：\n\n```\nerror: could not find a valid gem (>= 0) in any repository\n```\n\n参考[github issues](https://github.com/jekyll/jekyll/issues/1409)，F*k GWF，需要将`https://rubygems.org/`换成其他可访问的镜像，如[Ruby China 镜像](http://gems.ruby-china.org/)。\n\n```\n$ gem sources --remove https://rubygems.org/\n$ gem sources -a https://gems.ruby-china.org/\n$ gem sources -l\n*** CURRENT SOURCES ***\nhttps://gems.ruby-china.org/   \n# 确保只有 gems.ruby-china.org\n```\n\n重新尝试 install jekyll，还是报错：\n\n```\ncurrent directory: /var/lib/gems/2.4.0/gems/ffi-1.9.18/ext/ffi_c\n/usr/bin/ruby2.4 -r ./siteconf20170801-1836-1n75umz.rb extconf.rb\nmkmf.rb can't find header files for ruby at /usr/lib/ruby/include/ruby.h\n```\n\n解决方式：\n\n```\n$ sudo apt-get install ruby2.4-dev\n```\n\n之后就可以正常安装jekyll了。\n\n另外，根据[Ruby China 镜像](http://gems.ruby-china.org/)，你可以用 Bundler 的 [Gem 源代码镜像命令](http://bundler.io/v1.5/bundle_config.html#gem-source-mirrors)：\n\n```\n$ bundle config mirror.https://rubygems.org https://gems.ruby-china.org\n```\n这样就不用改你的 Gemfile 中的 source了。\n\n```\nsource \"https://rubygems.org\"\n...\n```\n\n### Basic Command\n\n用jekyll新建一个site:\n\n```\n$ jekyll new myblog\n$ cd myblog\n$ bundle exec jekyll serve\n```\n\n打开http://localhost:4000测试。\n\n默认使用的是`Minima theme`. 目前基于jekyll 3.x的themes还比较少。\n因为我是自己新建的theme，就不用这样方式了。\n\n---\n\n启动服务：\n\n```\n# 启动服务\n$ jekyll serve\n\n# 启动服务(gem-based theme)\n$ bundle exec jekyll serve\n\n# 脱离终端在后台运行\n# 如果你想关闭服务器，可以使用`kill -9 1234`命令，\"1234\" 是进程号（PID）。\n# 如果你找不到进程号，那么就用`ps aux | grep jekyll`命令来查看，然后关闭服务器。\n$ jekyll serve --detach\n\n# 和jekyll serve相同，但是会查看变更并且自动再生成。\n$ jekyll serve --watch\n```\n\n生成静态页面（位于`_site`目录）：\n\n```\n$ jekyll build\n```\n\n或者用：(watched for changes, and regenerated automatically.)\n\n```\n$ jekyll build --watch\n```\n\n# Set up Your Site on VPS\n\n网上清一色都是通过github pages来发布的站点，然后通过修改`CNAME`文件来达到绑定域名的目的。\n\n我这里是放到VPS上，需要自己搭建web server环境。\n\n> Jekyll is a static site generator, not a webserver. You may generate the static files and serve with webserver like `nginx`, which provides such abilities.\n\n参考：\n\n* [How To Get Started with Jekyll on an Ubuntu VPS](https://www.digitalocean.com/community/tutorials/how-to-get-started-with-jekyll-on-an-ubuntu-vps)\n* [Set up a Jekyll site on a vps with Ubuntu, Nginx and Letsencrypt](https://thomasroest.com/2016/11/05/set-up-a-jekyll-site-on-a-vps-with-ubuntu-nginx-and-letsencrypt.html)\n\n因为是静态网站，所以Jekyll其实安装在本地就可以，静态页面也放在本地。然后将Jekyll生成的静态HTML文件（`_site`目录下）通过类似FTP的方式上传到VPS就行。\n\n将本地数据上传到远程服务用`scp`就行，后来了解到`rsync`这个命令。`rsync`只传送两个文件的不同部分，而不是每次都整份传送，因此速度很快。\n\n先来理清关系：\n\n- [Jekyll](http://jekyllrb.com/) for write our content\n- [nginx](http://nginx.org/en/) to serve our content\n- [Capistrano](http://www.capistranorb.com/) to deploy\n\n## Nginx\n\n```\nsudo apt-get install nginx\nsudo service nginx start\n```\n\n然后输入vps地址就能看到nginx的欢迎页面。\n\n查看运行状态：\n\n```\nsudo service nginx status\n# 显示：\n- nginx is running\n```\n\n修改 nginx 配置：sudo vim /etc/nginx/sites-enabled/default\n\n将 `root /usr/share/nginx/html;` 注释掉，改为 `root /home/deploy/your_blog_name/_site`。\n\n将 `server_name localhost;` 注释掉，改为 `server_name your_domain.com;`。\n\n重新启动nginx，就能看到建的blog内容了。\n\n## Capistrano\n\nCapistrano 是一个 Ruby 程序，参考第一个文章链接，它可以通过Git复制代码到服务器等操作。\n\n```\nsudo gem install capistrano \n```\n\n这里先存留吧，暂时还没用到Capistrano。\n\n目前是按照[利用Apache进行多站点配置](http://blog.lszero.com/coding4fun/multisite-setting.html)设置的。\n\n# Create New Theme From Scratch\n\n既然是from scratch，就先把jekyll的目录结构理清，然后借助bootstrap框架创建主题，最后就是各种features了。\n\n## Basic\n\n### Directory Structure\n\n用`jekyll new-theme xxx`命令，就可以创建出一个theme需要的基本目录项。\n\n```\n.\n├── _config.yml\n├── _drafts\n|   ├── begin-with-the-crazy-ideas.textile\n|   └── on-simplicity-in-technology.markdown\n├── _includes\n|   ├── footer.html\n|   └── header.html\n├── _layouts\n|   ├── default.html\n|   ├── post.html\n├── _posts\n|   ├── 2007-10-29-why-every-programmer-should-play-nethack.textile\n|   └── 2009-04-26-barcamp-boston-4-roundup.textile\n├── _data\n|   └── members.yml\n├── _site\n└── index.html\n```\n\n说明：\n\n`_config.yml` 是配置文件。默认配置参见：[https://jekyllrb.com/docs/configuration/#default-configuration](https://jekyllrb.com/docs/configuration/#default-configuration)\n\n`_includes` 里的文件为了布局重用。\n\n`_layouts` 站点布局模板。布局可以在 [YAML 头信息](http://jekyll.com.cn/docs/frontmatter/)中根据不同文章进行选择。 \n\n`_posts` 将md文件以`2017-08-01-welcome-to-jekyll.md`的格式放到该目录中。\n\n`_drafts` 中的md文件直接以`title.md`命名，并不会发布出来。当运行`jekyll serve`或者`jekyll build --drafts`时，草稿文章会被加上日期值并发布出来。\n\n`_site` 存放jekyll转化完成的html文件。有时修改效果不生效，可以尝试删除该目录。\n\n### Variables\n\n自带的变量详见：[Variables](http://jekyllrb.com/docs/variables/)。\n\n或者通过`_config.yml`添加。\n\n### Need to Know\n\n若在`index.html`的YAML头信息中加入：\n\n```\n---\nlayout: default\n...\n---\n```\n\n则在`default.html`中调用{% raw %}`{{ content }}`{% endraw %}时，就会把`index.html`中的所有内容放到调用处。\n\n## Bootstrap\n\nBootstrap前端框架真是我这种前端白痴的福音。\n\n下载[Bootstrp](https://github.com/twbs/bootstrap/releases/download/v3.3.7/bootstrap-3.3.7-dist.zip)，我这里将解压后的文件放到了`assets/bootstrap-3.3.7-dist` 目录下。\n\n使用Bootstrap：\n\n参考Bootstrap官网里给的[基本HTML模板](http://getbootstrap.com/getting-started/#template)，\n\n（1）将下面这行代码改成自己的相应路径后，放到`head.html` 的`<head></head>` 标签中。\n\n```  html\n<!-- Bootstrap -->\n<link rel=\"stylesheet\" href=\"/assets/bootstrap-3.3.7-dist/css/bootstrap.min.css\">\n```\n\n（2）将下两行改成自己的相应路径后，放到`default.html` 的`<body></body>` 标签中的最下方，为了最后加载。\n\n```html\n<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js\"></script>\n<!-- Include all compiled plugins (below), or include individual files as needed -->\n<script src=\"/assets/bootstrap-3.3.7-dist/js/bootstrap.min.js\"></script>\n```\n\n若没效果，删除 `_site` 目录再试试，或者用命令重新 build。\n\n### NavBar\n\n参考Bootstrap官网给的[示例代码](http://getbootstrap.com/components/#navbar)，写入`header.html`文件中。\n\n然后在`default.html`的`<body></body>`标签中引入{% raw %}`{% include header.html %}`{% endraw %}。\n\n注意的点是，\n\n若使用了`.navbar-fixed-top` 类，这个固定的导航条会遮住页面上的其它内容，除非你给 `<body>` 元素底部设置了 `padding`，例如：\n\n```\nbody { padding-top: 70px; }\n```\n\n## Features\n\n### Post Excerpt\n\n在`index.html` 中显示文章摘要。参见[https://jekyllrb.com/docs/posts/#post-excerpts](https://jekyllrb.com/docs/posts/#post-excerpts)。\n\n（1）自带的{% raw %}`{{ post.excerpt }}`{% endraw %} 会自动取第一段的内容作为摘要。\n\n若想自定义，\n\n（2）在`_config.yml` 文件中指定摘要的分隔符：\n\n```\nexcerpt_separator: <!-- more -->\n```\n\n这样会覆盖自带的{% raw %}`{{ post.excerpt }}`{% endraw %}功能，然后在文章内容需要分隔的摘要后面加上`<!-- more -->`。而`<!-- more -->` 本身作为注释，不会影响 markdown 的显示。\n\n（3）或者采用这样的方式：\n\n```\n{% raw %}{{ post.content | strip_html | truncatewords:75 }}{% endraw %}\n```\n\n### Pagination\n\n用于`index.html` 里对文章的分页显示功能。\n\n（1）首先安装`jekyll-paginate`：\n\n```\n$ sudo gem install jekyll-paginate\n```\n\n在配置文件`_config.yml`中添加：\n\n```\nplugins:\n  - jekyll-paginate\npaginate: 5\npaginate_path: \"/pages:num/\"\n```\n\n其中，`paginate: 5` 设置的是分页数；\n`paginate_path: \"/pages:num/\"` 设置的是URL的显示格式，如 http://localhost:4000/pages2/。\n\n（2）然后参考[https://jekyllrb.com/docs/pagination/](https://jekyllrb.com/docs/pagination/)在`index.html`添加分页功能，并结合Bootstrap里的分页样式修改：[http://getbootstrap.com/components/#pagination](http://getbootstrap.com/components/#pagination)。\n\n### SideBar\n\n这里利用了 bootstrap 的栅格布局，栅格布局将一个页面分割成12个等宽的列。(详见 [example](http://getbootstrap.com/css/#grid-example-basic))\n\n```html\n<div class=\"row-fluid\">\n  <div class=\"col-md-9\">\n    <h2>Content</h2>\n  </div>\n  <div class=\"col-md-3\">\n    <h2>Sidebar</h2>  \n  </div>\n</div>\n```\n\n让侧边栏固定住，不随页面滚动而滚动：加入`class=\"affix\"`。\n\n---\n\n**说明：**\n\n我这里设置两种sidebar：\n\n* 一种是`index.html`里的，用于显示author信息，写在`main_sidebar.html`中；\n* 另一种是`post`对应的，用于显示目录列表，写在`post_sidebar.html`中。\n\n---\n\n### Social Icons\n\nicons用的是 [fontawesome](http://fontawesome.io/)。我这里将解压后的 `fonts`和`css`文件夹复制到了`assets`目录下。\n\n在`head.html`中添加：\n\n```html\n<link rel=\"stylesheet\" href=\"/assets/css/font-awesome.min.css\">\n```\n\n要使用哪个图标，直接去[官网](http://fontawesome.io/icons/)搜代码就行。\n\n修改图标颜色，因为其本身就是一种字体，故使用`color `修改即可。\n\n修改图标大小也是，用`font-size`即可，或者：\n\n```html\n<i class=\"fa fa-camera-retro\"></i>\n<i class=\"fa fa-camera-retro fa-2x\"></i>\n<i class=\"fa fa-camera-retro fa-3x\"></i>\n```\n\n对官网搜不到的社交网站图标怎么办，如“知乎”的：\n\n```html\n<a href=\"{{ site.social_media.zhihu_url }}\" class=\"btn\" title=\"Zhihu\"><span class=\"fa-stack fa-lg\"><i class=\"fa fa-circle fa-stack-2x\"></i><i class=\"fa fa-stack-1x fa-inverse\">知</i></span></a>\n```\n\n### Table of Content\n\n#### post中显示目录 \n\nkramdown自带了解析目录的功能。详见：[https://kramdown.gettalong.org/converter/html.html#toc](https://kramdown.gettalong.org/converter/html.html#toc)\n\n在md文件中加入：\n\n```\n# 无序列表\n* TOC\n{:toc}\n{: .this-is-my-class}\n```\n\n或者：\n\n```\n# 有序列表\n1. TOC\n{:toc}\n{: .this-is-my-class}\n```\n\n并且可在`_config.yml`中设置要显示的标题级别：\n\n```\nkramdown: \n  toc_levels: \"2,3\" \n```\n#### sidebar中显示目录\n\n侧边栏目录随浏览内容动态滚动功能，利用Bootstrap的[Scrollspy](http://getbootstrap.com/javascript/#scrollspy)来实现。\n\n* 参考 [application.js](http://www.thomaszhao.cn/2015/01/08/how-do-i-build-this-jekyll-blog/#toctable-of-content-) 获取目录结构，和标题滚动效果。\n* 参考 [JQUERY实现侧边栏随滚动条滚动并固定位置](https://www.mywpku.com/jquery-pin-elements.html) 来固定sidebar的位置，并且效果是：当滚动到指定模块时才置顶该模块。\n\n最后写了个 [TOP.js](https://github.com/lszero/lszero.github.io/blob/master/assets/js/toc/TOC.js) 终于实现得还算满意了。（当然，还要配合 css 使用）\n\n另外，其它不错的实现：\n\n- [bootstrap-toc](https://afeld.github.io/bootstrap-toc/) ([github](https://github.com/afeld/bootstrap-toc/tree/gh-pages/dist))\n- [Tocify plugin](http://gregfranko.com/jquery.tocify.js/)\n- [TOC plugin](http://projects.jga.me/toc/)\n\n#### Hide sidebar for mobile display\n\n手机显示时，隐藏侧边栏，否则会显示混乱。\n\n```css\n@media (max-width: 800px) {\n    #sidebar {\n        display:none !important;\n    }\n}\n```\n\n### Search\n\n参考：[Button addons](http://getbootstrap.com/components/#input-groups-buttons) & [Forms](http://getbootstrap.com/components/#navbar-forms)\n\n将下面代码加入`header.html`中：\n\n```html\n<form class=\"navbar-form navbar-left\" role=\"search\">\n  <div class=\"input-group\">\n    <span class=\"input-group-btn\">\n      <button class=\"btn btn-default\" type=\"button\">Go!</button>\n    </span>\n    <input type=\"text\" class=\"form-control\" placeholder=\"Search\">\n  </div>\n</form>\n```\n\n对于search逻辑，目前还没找到一个很好的方式去实现。。。（如果知道的，麻烦告诉我一声！）\n\n### Back to Top\n\n该功能我放在了`post_sidebar.html`中：\n\n```html\n<a href=\"#top\" class=\"back-to-top\">^</a>\n```\n\n其实就是个link，最后再用css设置样式。\n\n---\n\n更新：\n\n为了不让footer覆盖掉 back-to-top，只能把back-to-top写在footer后面。故改在了`default.html`里。\n\n### Comments\n\n#### Gitment\n\n[Gitment](https://imsun.net/posts/gitment-introduction/) 挺不错的的。按照官网的说明引入js后，在其中修改自己的OAuth Application信息。\n\n#### isso\n\n这是自建评论系统的一种方式。[官网](https://posativ.org/isso/)需要fq.\n\n我之后用的也是这种方法，详见：[搭建Isso评论服务](http://blog.lszero.com/coding4fun/comments-with-isso.html)\n\n### Archives\n\n{% raw %}`{% for post in paginator.posts %}`{% endraw %} 并不能使用，因为paginator只会对`index.html`有效。\n\n`site.posts | size` 获取总的文章数。\n\n因为jekyll不支持按日期获取，只能暂时用{% raw %}`{% for post in site.posts %}`{% endraw %}。\n\n这部分待补充吧。\n\n### Category\n\n参考 [使用Category分类](https://segmentfault.com/a/1190000000406017#articleHeader2)。\n\n首先在每个文章的YAML头信息中定义类别，如：\n\n```\n---\nlayout: post\ntitle:  \"your title\"\ncategories: Algorithm\n---\n```\n\n**获取所有类别：**\n\n```html\n{% raw %}{% for category in site.categories %}\n  <h2>{{ category[0] }} ({{ category[1].size }})</h2>\n  <ul>\n  {% for post in category[1] %}\n    <li>{{ post.date | date:\"%d/%m/%Y\"}}<a href=\"{{ post.url }}\">{{ post.title }}</a></li>\n  {% endfor %}\n  </ul>\n{% endfor %}{% endraw %}\n```\n\n使用：\n\n* `site.categories.size` 获取总的类别数。\n* `category[0]` 获取分类名称。\n* `category[1].size` 获取该分类下文章的数目。\n* `site.categories.CATEGORY` 可得到某个特定类别的所有文章。\n\n更多变量可参见：[http://jekyllrb.com/docs/variables/#site-variables](http://jekyllrb.com/docs/variables/#site-variables).\n\n输出单个分类下的所有文章：\n\n`site.categories.CATEGORY` 需要手动指定，并不是很方便。\n\n[使用Category分类](https://segmentfault.com/a/1190000000406017#articleHeader2)这篇文章里使用js来实现。\n\n我这里是先生成好`categories.html`，里面列出了所有的文章。然后利用锚点`categories.html#xxx`进行跳转到指定的类别。\n\n### Tags\n\n参考[使用文章标签索引文章](https://segmentfault.com/a/1190000000406017#articleHeader5)。\n\n首先在每个文章的YAML头信息中定义tags，如：\n\n```\n---\nlayout: post\ntitle:  \"your title\"\ntags: [github, jekyll]\n---\n```\n\n和[category](#category)的设置方法差不多，就不赘述了。\n\n### Latex\n\n参考：[https://jekyllrb.com/docs/extras/#math-support](https://jekyllrb.com/docs/extras/#math-support)\n\n我这里为了避免所有pages都引入mathjax相关js代码，采用了不同的设置：\n\n在配置文件`_config.yml`中添加：\n\n```\nmathjax: false\n```\n\n在`head.html`中添加：\n\n```html\n{% raw %}{% if page.mathjax %}\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML\" type=\"text/javascript\"></script>\n{% endif %}{% endraw %}\n```\n然后在需要引入mathjax的md文件头中加入`mathjax: true`，如：\n\n```\n---\nlayout: post\n...\nmathjax: true\n---\n```\n\n####  Support $\n\n默认只支持双`$`符，修改：\n\n```js\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({\n    TeX: {\n      equationNumbers: {\n        autoNumber: \"AMS\"\n      }\n    },\n    tex2jax: {\n      inlineMath: [ ['$','$'] ],\n      displayMath: [ ['$$','$$'] ],\n      processEscapes: true,\n    }\n  });\n</script>\n```\n\n#### Mathjax Rendering Problem\n\n若latex公式中包含`|`符，如`|a|`，会被markdown解析器当成`<table></table>`来处理。\n\n又如，定义矩阵时，其中的换行`\\\\`也会被解析出问题，把第一个`\\`当成了转义符。\n\n解决方式：\n\n对第一种情况，根据 [Syntax \\| Kramdown](https://kramdown.gettalong.org/syntax.html#math-blocks) 上的说明，将`|`用`\\vert`来代替。\n\n对第二种情况，用双`$$`符解决转义问题。\n\n### Code Highlighting\n\nJekyll 3.x 自带了rouge代码高亮的功能，但是不造为啥一直not working（难道又被看脸了。。\n\n于是这里用的是[highlightjs](https://highlightjs.org/)。在`head.html`里添加：\n\n```html\n<link rel=\"stylesheet\" href=\"/lib/highlight/styles/hybrid.css\">\n<script src=\"/lib/highlight/highlight.pack.js\"></script>\n<script>hljs.initHighlightingOnLoad();</script>\n```\n\n我这里把下载的`highlightjs`的相关文件放在了`lib`目录下，样式选的是`hybrid.css`。（monokai-sublime 和 hybrid 配色也不错。）\n\n`highlightjs`会解析并高亮`<pre><code>...</code></pre>`中的内容。如\n\n```html\n<pre><code class=\"html\">...</code></pre>\n```\n\n若不需要高亮则设为：\n\n```html\n<pre><code class=\"nohighlight\">...</code></pre>\n```\n\n这里有个麻烦的地方，若md里没有指明语言，`highlightjs`也会自动检测是什么语言。如果不想对某个code block进行高亮，有两种解决方式：（当然了，我比较折腾，一般人也不需要这个。。（捂脸）\n\n（1）每次手动加入`nohighlight`。\n\n```\n​```nohighlight\nxxx\n​```\n```\n\n（2）修改markdown解析器。\n\n第一种方式比较麻烦，但`highlightjs`又没有提供关闭`highlightAuto`的接口。\n\n### Custom Markdown Parser\n\n在`_config.yml`中可以看到，默认使用的是`kramdown`解析器。\n\n```\nmarkdown: kramdown\n```\n\n关于[Custom Markdown Processors](https://jekyllrb.com/docs/configuration/#custom-markdown-processors)官网有一些说明，好吧，没看懂，毕竟不会Ruby。kramdown也不能以overwrited的方式改写相应的convert方法，然后又写了段js代码试图修改kramdown解析出的html，但还是没成功。真是艰辛，网上找了好久都无果，最后还不如直接看代码改来得快。。。\n\n好在`highlightjs`提供了这个：\n\n```js\n// ignore languages\n<script>hljs.configure({ ignore: ['text'] });</script>\n```\n\n然后看Jekyll源码，找到了 `jekyll/lib/jekyll/converters/markdown/kramdown_parser.rb` (see [code](https://github.com/jekyll/jekyll/blob/57fd5f887da1189a16bdfbb982d75f725c38d725/lib/jekyll/converters/markdown/kramdown_parser.rb)) \n\n```ruby\ndef convert(content)\n  Kramdown::Document.new(content, @config).to_html\nend\n```\n\n接着看kramdown源码，找到了`kramdown/lib/kramdown/converter/html.rb` (see [code](https://github.com/gettalong/kramdown/blob/f4cdae257159ce0addf542739fed262e4a2cf401/lib/kramdown/converter/html.rb)) \n\n在我的本地电脑中，相关文件位于`/usr/local/lib/ruby/gems/2.4.0/gems/kramdown-1.14.0/lib/kramdown/converter/html.rb`。\n\n找到`def convert_codeblock(el, indent)`函数进行修改：\n\n在代码`code_attr['class'] = \"language-#{lang}\" if lang` 前添加：\n\n```ruby\nif lang.nil?\n  lang = \"text\"\nend\n```\n\n并将代码`if highlighted_code` 改为 `if highlighted_code && lang`。\n\n（其中，`nil`是判空的意思。）\n\n这样在不指明语言的时候，不高亮显示。\n\n---\n\n上面是mac环境下，可以直接改代码。但是在linux环境下，只有一个二进制执行文件。\n\n于是，先删除原有的：\n\n```\n$ sudo gem uninstall kramdown\n```\n\n然后在官网[下载源码](https://github.com/gettalong/kramdown/releases)重新安装：\n\n```\n$ ruby setup.rb config\n$ ruby setup.rb setup\n$ ruby setup.rb install\n```\n\n好吧，暂时没弄好。。。\n\n## Else\n\n### Permalinks\n\n在`_config.yml`中设置，如：\n\n```\npermalink: /:categories/:year/:month/:day/:title.html\n```\n### footer\n\n当页面内容长度不够时，footer显示位置可能有问题。\n\n让footer内容永远处于最末端：\n\n```html\n$height-footer: 40px;\n\nhtml {\n    height: 100%;\n}\n\nbody {\n    min-height: 100%;\n    position: relative;\n    padding-bottom: $height-footer;\n}\n\n.footer {\n    bottom: 0;\n    width: 100%;\n    position: absolute;\n    height: $height-footer;\n}\n```\n\n子元素的百分比高度也可以基于父元素的百分比高度，前提是父元素的父元素必须有一个明确的高度。要使`min-height`的百分比值生效，其父元素的`height`值必须为一个固定的高度或者是一个有效的百分比高度。\n\n## Problems\n\n{% raw %}`{{ xxx }}`{% endraw %} 或者 {% raw %}`{% xxx %}`{% endraw %} 显示不出来。\n\n解决方式：\n\n（1）\n\n```\n\\{\\{ xxx \\}\\}\n```\n\n（2）参考：[Escaping double curly braces inside a markdown code block in Jekyll](https://stackoverflow.com/questions/24102498/escaping-double-curly-braces-inside-a-markdown-code-block-in-jekyll)\n\n```\n{% assign openTag = '{%' %}{{ openTag }} raw %}    \nThis is a test: {% raw %}{{ xxx }}{% endraw %}\n{{ openTag }} endraw %}\n```\n（3）那么问题又来了，如何显示上面的 raw 和 endraw 呢？参考：[jekyll 如何转义字符](http://www.cnblogs.com/OceanHeaven/p/6959669.html)\n\n```\nserver {\n    listen [::]:80;\n    server_name comments.lszero.com;\n    \n    location /isso {\n        proxy_pass http://localhost:8090;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Script-Name /isso;\n    }\n}\n```\n\n\n","slug":"static-website-with-jekyll","published":1,"updated":"2018-09-26T03:23:32.972Z","comments":1,"photos":[],"link":"","_id":"cjminjcy7002tkdbbgxsb6dcb","content":"<p>作为一个极简主义者，越来越受不了WordPress的臃肿。主要自己平时都是用Markdown来做记录，而WordPress支持的不是很好，另外有时写的md长文通过三方软件导出的html也不造放在wp的什么地方才合适，管理起来还不如几个静态页面来得方便。于是有了某天来个大整顿的想法。</p>\n<p>对前端只停留在css的我，花了整三天时间，从Hexo到Jekyll再到Bootstrap，以及各种markdown2html解析器…最后基本算是从头写了一个基于Jekyll的website theme 😓  在此记录了各种前端坑，自认为还算详细吧。<a id=\"more\"></a></p>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p>主流的静态页面生成器有俩，一个Jekyll，一个Hexo，都支持Markdown。 前者用的是Ruby，后者为Node.js。</p>\n<p>Hexo会比Jekyll搭建起来更方便一些，而且各种配置项的设计也很便捷，网站themes还很丰富，所以我一开始弄的就是这个。</p>\n<ul>\n<li><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a></li>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">next</a> : 一款优雅并且功能强大的主题. <a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"noopener\">[doc]</a> <a href=\"[http://notes.iissnan.com](http://notes.iissnan.com/\">[demo]</a>)</li>\n</ul>\n<p>搭建方法上面这两个链接写的很详细。</p>\n<p>这里主要记录一下让Hexo支持LaTex的注意地方。Hexo用MathJax时会有一些<a href=\"http://2wildkids.com/2016/10/06/%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86Hexo%E5%92%8CMathJax%E7%9A%84%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/#\" target=\"_blank\" rel=\"noopener\">转义问题</a>，经我自己测试，最好的方式是用<code>hexo-renderer-pandoc</code>渲染器代替原有的<code>hexo-renderer-marked</code>。而网上说的用<code>hexo-renderer-kramed</code>，对矩阵的情况显示的不好。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm uninstall hexo-renderer-marked --save</span><br><span class=\"line\">$ npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>\n<h2 id=\"Jekyll\"><a href=\"#Jekyll\" class=\"headerlink\" title=\"Jekyll\"></a>Jekyll</h2><p>其实用Hexo/Jekyll+现成的主题，很方便就能搭出一个静态网站出来。只是除了代码高亮、LaTex这些功能之外，我还想能区分出code block 和普通无需highlighting的<code>&lt;pre&gt;</code>部分，还有其他一些改动。因为markdown解析的原因，基本所有themes出的效果都是将两者统一处理了。强迫症（其实就是zuo），主题挑来挑去都没找到个合心意的，比如next这种，太复杂，让我一个前端白痴改，哈，那还是自己从头写一个比较符合程序员造轮子的习惯吧。。。（捂脸</p>\n<p>（至于为啥从Hexo转到了Jekyll，原因未明）</p>\n<h2 id=\"Get-Started\"><a href=\"#Get-Started\" class=\"headerlink\" title=\"Get Started\"></a>Get Started</h2><p>参考：<a href=\"https://jekyllrb.com/docs/home/\" target=\"_blank\" rel=\"noopener\">Jekyll Doc</a> (<a href=\"http://jekyll.com.cn/docs/home/\" target=\"_blank\" rel=\"noopener\">中文版</a>，内容比较旧)</p>\n<h3 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h3><p>本来在本地用Homebrew安装一路顺畅，但放到服务器就各种问题。</p>\n<p>首先直接用apt-get下载的Ruby版本比较旧。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Install Ruby &amp; RubyGems</span><br><span class=\"line\">$ sudo apt-add-repository ppa:brightbox/ruby-ng</span><br><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install ruby2.4</span><br><span class=\"line\"></span><br><span class=\"line\"># Install Jekyll and Bundler gems</span><br><span class=\"line\">$ sudo gem install jekyll bundler</span><br></pre></td></tr></table></figure>\n<p>然后在<code>gem install jekyll</code>时会报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">error: could not find a valid gem (&gt;= 0) in any repository</span><br></pre></td></tr></table></figure>\n<p>参考<a href=\"https://github.com/jekyll/jekyll/issues/1409\" target=\"_blank\" rel=\"noopener\">github issues</a>，F*k GWF，需要将<code>https://rubygems.org/</code>换成其他可访问的镜像，如<a href=\"http://gems.ruby-china.org/\" target=\"_blank\" rel=\"noopener\">Ruby China 镜像</a>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gem sources --remove https://rubygems.org/</span><br><span class=\"line\">$ gem sources -a https://gems.ruby-china.org/</span><br><span class=\"line\">$ gem sources -l</span><br><span class=\"line\">*** CURRENT SOURCES ***</span><br><span class=\"line\">https://gems.ruby-china.org/   </span><br><span class=\"line\"># 确保只有 gems.ruby-china.org</span><br></pre></td></tr></table></figure>\n<p>重新尝试 install jekyll，还是报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">current directory: /var/lib/gems/2.4.0/gems/ffi-1.9.18/ext/ffi_c</span><br><span class=\"line\">/usr/bin/ruby2.4 -r ./siteconf20170801-1836-1n75umz.rb extconf.rb</span><br><span class=\"line\">mkmf.rb can&apos;t find header files for ruby at /usr/lib/ruby/include/ruby.h</span><br></pre></td></tr></table></figure>\n<p>解决方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install ruby2.4-dev</span><br></pre></td></tr></table></figure>\n<p>之后就可以正常安装jekyll了。</p>\n<p>另外，根据<a href=\"http://gems.ruby-china.org/\" target=\"_blank\" rel=\"noopener\">Ruby China 镜像</a>，你可以用 Bundler 的 <a href=\"http://bundler.io/v1.5/bundle_config.html#gem-source-mirrors\" target=\"_blank\" rel=\"noopener\">Gem 源代码镜像命令</a>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ bundle config mirror.https://rubygems.org https://gems.ruby-china.org</span><br></pre></td></tr></table></figure>\n<p>这样就不用改你的 Gemfile 中的 source了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">source &quot;https://rubygems.org&quot;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h3 id=\"Basic-Command\"><a href=\"#Basic-Command\" class=\"headerlink\" title=\"Basic Command\"></a>Basic Command</h3><p>用jekyll新建一个site:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ jekyll new myblog</span><br><span class=\"line\">$ cd myblog</span><br><span class=\"line\">$ bundle exec jekyll serve</span><br></pre></td></tr></table></figure>\n<p>打开<a href=\"http://localhost:4000测试。\" target=\"_blank\" rel=\"noopener\">http://localhost:4000测试。</a></p>\n<p>默认使用的是<code>Minima theme</code>. 目前基于jekyll 3.x的themes还比较少。<br>因为我是自己新建的theme，就不用这样方式了。</p>\n<hr>\n<p>启动服务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 启动服务</span><br><span class=\"line\">$ jekyll serve</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动服务(gem-based theme)</span><br><span class=\"line\">$ bundle exec jekyll serve</span><br><span class=\"line\"></span><br><span class=\"line\"># 脱离终端在后台运行</span><br><span class=\"line\"># 如果你想关闭服务器，可以使用`kill -9 1234`命令，&quot;1234&quot; 是进程号（PID）。</span><br><span class=\"line\"># 如果你找不到进程号，那么就用`ps aux | grep jekyll`命令来查看，然后关闭服务器。</span><br><span class=\"line\">$ jekyll serve --detach</span><br><span class=\"line\"></span><br><span class=\"line\"># 和jekyll serve相同，但是会查看变更并且自动再生成。</span><br><span class=\"line\">$ jekyll serve --watch</span><br></pre></td></tr></table></figure>\n<p>生成静态页面（位于<code>_site</code>目录）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ jekyll build</span><br></pre></td></tr></table></figure>\n<p>或者用：(watched for changes, and regenerated automatically.)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ jekyll build --watch</span><br></pre></td></tr></table></figure>\n<h1 id=\"Set-up-Your-Site-on-VPS\"><a href=\"#Set-up-Your-Site-on-VPS\" class=\"headerlink\" title=\"Set up Your Site on VPS\"></a>Set up Your Site on VPS</h1><p>网上清一色都是通过github pages来发布的站点，然后通过修改<code>CNAME</code>文件来达到绑定域名的目的。</p>\n<p>我这里是放到VPS上，需要自己搭建web server环境。</p>\n<blockquote>\n<p>Jekyll is a static site generator, not a webserver. You may generate the static files and serve with webserver like <code>nginx</code>, which provides such abilities.</p>\n</blockquote>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-get-started-with-jekyll-on-an-ubuntu-vps\" target=\"_blank\" rel=\"noopener\">How To Get Started with Jekyll on an Ubuntu VPS</a></li>\n<li><a href=\"https://thomasroest.com/2016/11/05/set-up-a-jekyll-site-on-a-vps-with-ubuntu-nginx-and-letsencrypt.html\" target=\"_blank\" rel=\"noopener\">Set up a Jekyll site on a vps with Ubuntu, Nginx and Letsencrypt</a></li>\n</ul>\n<p>因为是静态网站，所以Jekyll其实安装在本地就可以，静态页面也放在本地。然后将Jekyll生成的静态HTML文件（<code>_site</code>目录下）通过类似FTP的方式上传到VPS就行。</p>\n<p>将本地数据上传到远程服务用<code>scp</code>就行，后来了解到<code>rsync</code>这个命令。<code>rsync</code>只传送两个文件的不同部分，而不是每次都整份传送，因此速度很快。</p>\n<p>先来理清关系：</p>\n<ul>\n<li><a href=\"http://jekyllrb.com/\" target=\"_blank\" rel=\"noopener\">Jekyll</a> for write our content</li>\n<li><a href=\"http://nginx.org/en/\" target=\"_blank\" rel=\"noopener\">nginx</a> to serve our content</li>\n<li><a href=\"http://www.capistranorb.com/\" target=\"_blank\" rel=\"noopener\">Capistrano</a> to deploy</li>\n</ul>\n<h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nginx</span><br><span class=\"line\">sudo service nginx start</span><br></pre></td></tr></table></figure>\n<p>然后输入vps地址就能看到nginx的欢迎页面。</p>\n<p>查看运行状态：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo service nginx status</span><br><span class=\"line\"># 显示：</span><br><span class=\"line\">- nginx is running</span><br></pre></td></tr></table></figure>\n<p>修改 nginx 配置：sudo vim /etc/nginx/sites-enabled/default</p>\n<p>将 <code>root /usr/share/nginx/html;</code> 注释掉，改为 <code>root /home/deploy/your_blog_name/_site</code>。</p>\n<p>将 <code>server_name localhost;</code> 注释掉，改为 <code>server_name your_domain.com;</code>。</p>\n<p>重新启动nginx，就能看到建的blog内容了。</p>\n<h2 id=\"Capistrano\"><a href=\"#Capistrano\" class=\"headerlink\" title=\"Capistrano\"></a>Capistrano</h2><p>Capistrano 是一个 Ruby 程序，参考第一个文章链接，它可以通过Git复制代码到服务器等操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo gem install capistrano</span><br></pre></td></tr></table></figure>\n<p>这里先存留吧，暂时还没用到Capistrano。</p>\n<p>目前是按照<a href=\"http://blog.lszero.com/coding4fun/multisite-setting.html\" target=\"_blank\" rel=\"noopener\">利用Apache进行多站点配置</a>设置的。</p>\n<h1 id=\"Create-New-Theme-From-Scratch\"><a href=\"#Create-New-Theme-From-Scratch\" class=\"headerlink\" title=\"Create New Theme From Scratch\"></a>Create New Theme From Scratch</h1><p>既然是from scratch，就先把jekyll的目录结构理清，然后借助bootstrap框架创建主题，最后就是各种features了。</p>\n<h2 id=\"Basic\"><a href=\"#Basic\" class=\"headerlink\" title=\"Basic\"></a>Basic</h2><h3 id=\"Directory-Structure\"><a href=\"#Directory-Structure\" class=\"headerlink\" title=\"Directory Structure\"></a>Directory Structure</h3><p>用<code>jekyll new-theme xxx</code>命令，就可以创建出一个theme需要的基本目录项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── _drafts</span><br><span class=\"line\">|   ├── begin-with-the-crazy-ideas.textile</span><br><span class=\"line\">|   └── on-simplicity-in-technology.markdown</span><br><span class=\"line\">├── _includes</span><br><span class=\"line\">|   ├── footer.html</span><br><span class=\"line\">|   └── header.html</span><br><span class=\"line\">├── _layouts</span><br><span class=\"line\">|   ├── default.html</span><br><span class=\"line\">|   ├── post.html</span><br><span class=\"line\">├── _posts</span><br><span class=\"line\">|   ├── 2007-10-29-why-every-programmer-should-play-nethack.textile</span><br><span class=\"line\">|   └── 2009-04-26-barcamp-boston-4-roundup.textile</span><br><span class=\"line\">├── _data</span><br><span class=\"line\">|   └── members.yml</span><br><span class=\"line\">├── _site</span><br><span class=\"line\">└── index.html</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<p><code>_config.yml</code> 是配置文件。默认配置参见：<a href=\"https://jekyllrb.com/docs/configuration/#default-configuration\" target=\"_blank\" rel=\"noopener\">https://jekyllrb.com/docs/configuration/#default-configuration</a></p>\n<p><code>_includes</code> 里的文件为了布局重用。</p>\n<p><code>_layouts</code> 站点布局模板。布局可以在 <a href=\"http://jekyll.com.cn/docs/frontmatter/\" target=\"_blank\" rel=\"noopener\">YAML 头信息</a>中根据不同文章进行选择。 </p>\n<p><code>_posts</code> 将md文件以<code>2017-08-01-welcome-to-jekyll.md</code>的格式放到该目录中。</p>\n<p><code>_drafts</code> 中的md文件直接以<code>title.md</code>命名，并不会发布出来。当运行<code>jekyll serve</code>或者<code>jekyll build --drafts</code>时，草稿文章会被加上日期值并发布出来。</p>\n<p><code>_site</code> 存放jekyll转化完成的html文件。有时修改效果不生效，可以尝试删除该目录。</p>\n<h3 id=\"Variables\"><a href=\"#Variables\" class=\"headerlink\" title=\"Variables\"></a>Variables</h3><p>自带的变量详见：<a href=\"http://jekyllrb.com/docs/variables/\" target=\"_blank\" rel=\"noopener\">Variables</a>。</p>\n<p>或者通过<code>_config.yml</code>添加。</p>\n<h3 id=\"Need-to-Know\"><a href=\"#Need-to-Know\" class=\"headerlink\" title=\"Need to Know\"></a>Need to Know</h3><p>若在<code>index.html</code>的YAML头信息中加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: default</span><br><span class=\"line\">...</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>则在<code>default.html</code>中调用`{{ content }}`时，就会把<code>index.html</code>中的所有内容放到调用处。</p>\n<h2 id=\"Bootstrap\"><a href=\"#Bootstrap\" class=\"headerlink\" title=\"Bootstrap\"></a>Bootstrap</h2><p>Bootstrap前端框架真是我这种前端白痴的福音。</p>\n<p>下载<a href=\"https://github.com/twbs/bootstrap/releases/download/v3.3.7/bootstrap-3.3.7-dist.zip\" target=\"_blank\" rel=\"noopener\">Bootstrp</a>，我这里将解压后的文件放到了<code>assets/bootstrap-3.3.7-dist</code> 目录下。</p>\n<p>使用Bootstrap：</p>\n<p>参考Bootstrap官网里给的<a href=\"http://getbootstrap.com/getting-started/#template\" target=\"_blank\" rel=\"noopener\">基本HTML模板</a>，</p>\n<p>（1）将下面这行代码改成自己的相应路径后，放到<code>head.html</code> 的<code>&lt;head&gt;&lt;/head&gt;</code> 标签中。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Bootstrap --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/assets/bootstrap-3.3.7-dist/css/bootstrap.min.css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（2）将下两行改成自己的相应路径后，放到<code>default.html</code> 的<code>&lt;body&gt;&lt;/body&gt;</code> 标签中的最下方，为了最后加载。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- jQuery (necessary for Bootstrap's JavaScript plugins) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/assets/bootstrap-3.3.7-dist/js/bootstrap.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>若没效果，删除 <code>_site</code> 目录再试试，或者用命令重新 build。</p>\n<h3 id=\"NavBar\"><a href=\"#NavBar\" class=\"headerlink\" title=\"NavBar\"></a>NavBar</h3><p>参考Bootstrap官网给的<a href=\"http://getbootstrap.com/components/#navbar\" target=\"_blank\" rel=\"noopener\">示例代码</a>，写入<code>header.html</code>文件中。</p>\n<p>然后在<code>default.html</code>的<code>&lt;body&gt;&lt;/body&gt;</code>标签中引入`{% include header.html %}`。</p>\n<p>注意的点是，</p>\n<p>若使用了<code>.navbar-fixed-top</code> 类，这个固定的导航条会遮住页面上的其它内容，除非你给 <code>&lt;body&gt;</code> 元素底部设置了 <code>padding</code>，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">body &#123; padding-top: 70px; &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Features\"><a href=\"#Features\" class=\"headerlink\" title=\"Features\"></a>Features</h2><h3 id=\"Post-Excerpt\"><a href=\"#Post-Excerpt\" class=\"headerlink\" title=\"Post Excerpt\"></a>Post Excerpt</h3><p>在<code>index.html</code> 中显示文章摘要。参见<a href=\"https://jekyllrb.com/docs/posts/#post-excerpts\" target=\"_blank\" rel=\"noopener\">https://jekyllrb.com/docs/posts/#post-excerpts</a>。</p>\n<p>（1）自带的`{{ post.excerpt }}` 会自动取第一段的内容作为摘要。</p>\n<p>若想自定义，</p>\n<p>（2）在<code>_config.yml</code> 文件中指定摘要的分隔符：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">excerpt_separator: &lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>\n<p>这样会覆盖自带的`{{ post.excerpt }}`功能，然后在文章内容需要分隔的摘要后面加上<code>&lt;!-- more --&gt;</code>。而<code>&lt;!-- more --&gt;</code> 本身作为注释，不会影响 markdown 的显示。</p>\n<p>（3）或者采用这样的方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% raw %&#125;&#123;&#123; post.content | strip_html | truncatewords:75 &#125;&#125;&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Pagination\"><a href=\"#Pagination\" class=\"headerlink\" title=\"Pagination\"></a>Pagination</h3><p>用于<code>index.html</code> 里对文章的分页显示功能。</p>\n<p>（1）首先安装<code>jekyll-paginate</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo gem install jekyll-paginate</span><br></pre></td></tr></table></figure>\n<p>在配置文件<code>_config.yml</code>中添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">plugins:</span><br><span class=\"line\">  - jekyll-paginate</span><br><span class=\"line\">paginate: 5</span><br><span class=\"line\">paginate_path: &quot;/pages:num/&quot;</span><br></pre></td></tr></table></figure>\n<p>其中，<code>paginate: 5</code> 设置的是分页数；<br><code>paginate_path: &quot;/pages:num/&quot;</code> 设置的是URL的显示格式，如 <a href=\"http://localhost:4000/pages2/。\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/pages2/。</a></p>\n<p>（2）然后参考<a href=\"https://jekyllrb.com/docs/pagination/\" target=\"_blank\" rel=\"noopener\">https://jekyllrb.com/docs/pagination/</a>在<code>index.html</code>添加分页功能，并结合Bootstrap里的分页样式修改：<a href=\"http://getbootstrap.com/components/#pagination\" target=\"_blank\" rel=\"noopener\">http://getbootstrap.com/components/#pagination</a>。</p>\n<h3 id=\"SideBar\"><a href=\"#SideBar\" class=\"headerlink\" title=\"SideBar\"></a>SideBar</h3><p>这里利用了 bootstrap 的栅格布局，栅格布局将一个页面分割成12个等宽的列。(详见 <a href=\"http://getbootstrap.com/css/#grid-example-basic\" target=\"_blank\" rel=\"noopener\">example</a>)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row-fluid\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-9\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Content<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-3\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Sidebar<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>让侧边栏固定住，不随页面滚动而滚动：加入<code>class=&quot;affix&quot;</code>。</p>\n<hr>\n<p><strong>说明：</strong></p>\n<p>我这里设置两种sidebar：</p>\n<ul>\n<li>一种是<code>index.html</code>里的，用于显示author信息，写在<code>main_sidebar.html</code>中；</li>\n<li>另一种是<code>post</code>对应的，用于显示目录列表，写在<code>post_sidebar.html</code>中。</li>\n</ul>\n<hr>\n<h3 id=\"Social-Icons\"><a href=\"#Social-Icons\" class=\"headerlink\" title=\"Social Icons\"></a>Social Icons</h3><p>icons用的是 <a href=\"http://fontawesome.io/\" target=\"_blank\" rel=\"noopener\">fontawesome</a>。我这里将解压后的 <code>fonts</code>和<code>css</code>文件夹复制到了<code>assets</code>目录下。</p>\n<p>在<code>head.html</code>中添加：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/assets/css/font-awesome.min.css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>要使用哪个图标，直接去<a href=\"http://fontawesome.io/icons/\" target=\"_blank\" rel=\"noopener\">官网</a>搜代码就行。</p>\n<p>修改图标颜色，因为其本身就是一种字体，故使用<code>color</code>修改即可。</p>\n<p>修改图标大小也是，用<code>font-size</code>即可，或者：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-camera-retro\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-camera-retro fa-2x\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-camera-retro fa-3x\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>对官网搜不到的社交网站图标怎么办，如“知乎”的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; site.social_media.zhihu_url &#125;&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Zhihu\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa-stack fa-lg\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-circle fa-stack-2x\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-stack-1x fa-inverse\"</span>&gt;</span>知<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Table-of-Content\"><a href=\"#Table-of-Content\" class=\"headerlink\" title=\"Table of Content\"></a>Table of Content</h3><h4 id=\"post中显示目录\"><a href=\"#post中显示目录\" class=\"headerlink\" title=\"post中显示目录\"></a>post中显示目录</h4><p>kramdown自带了解析目录的功能。详见：<a href=\"https://kramdown.gettalong.org/converter/html.html#toc\" target=\"_blank\" rel=\"noopener\">https://kramdown.gettalong.org/converter/html.html#toc</a></p>\n<p>在md文件中加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 无序列表</span><br><span class=\"line\">* TOC</span><br><span class=\"line\">&#123;:toc&#125;</span><br><span class=\"line\">&#123;: .this-is-my-class&#125;</span><br></pre></td></tr></table></figure>\n<p>或者：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 有序列表</span><br><span class=\"line\">1. TOC</span><br><span class=\"line\">&#123;:toc&#125;</span><br><span class=\"line\">&#123;: .this-is-my-class&#125;</span><br></pre></td></tr></table></figure>\n<p>并且可在<code>_config.yml</code>中设置要显示的标题级别：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">kramdown: </span><br><span class=\"line\">  toc_levels: &quot;2,3&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"sidebar中显示目录\"><a href=\"#sidebar中显示目录\" class=\"headerlink\" title=\"sidebar中显示目录\"></a>sidebar中显示目录</h4><p>侧边栏目录随浏览内容动态滚动功能，利用Bootstrap的<a href=\"http://getbootstrap.com/javascript/#scrollspy\" target=\"_blank\" rel=\"noopener\">Scrollspy</a>来实现。</p>\n<ul>\n<li>参考 <a href=\"http://www.thomaszhao.cn/2015/01/08/how-do-i-build-this-jekyll-blog/#toctable-of-content-\" target=\"_blank\" rel=\"noopener\">application.js</a> 获取目录结构，和标题滚动效果。</li>\n<li>参考 <a href=\"https://www.mywpku.com/jquery-pin-elements.html\" target=\"_blank\" rel=\"noopener\">JQUERY实现侧边栏随滚动条滚动并固定位置</a> 来固定sidebar的位置，并且效果是：当滚动到指定模块时才置顶该模块。</li>\n</ul>\n<p>最后写了个 <a href=\"https://github.com/lszero/lszero.github.io/blob/master/assets/js/toc/TOC.js\" target=\"_blank\" rel=\"noopener\">TOP.js</a> 终于实现得还算满意了。（当然，还要配合 css 使用）</p>\n<p>另外，其它不错的实现：</p>\n<ul>\n<li><a href=\"https://afeld.github.io/bootstrap-toc/\" target=\"_blank\" rel=\"noopener\">bootstrap-toc</a> (<a href=\"https://github.com/afeld/bootstrap-toc/tree/gh-pages/dist\" target=\"_blank\" rel=\"noopener\">github</a>)</li>\n<li><a href=\"http://gregfranko.com/jquery.tocify.js/\" target=\"_blank\" rel=\"noopener\">Tocify plugin</a></li>\n<li><a href=\"http://projects.jga.me/toc/\" target=\"_blank\" rel=\"noopener\">TOC plugin</a></li>\n</ul>\n<h4 id=\"Hide-sidebar-for-mobile-display\"><a href=\"#Hide-sidebar-for-mobile-display\" class=\"headerlink\" title=\"Hide sidebar for mobile display\"></a>Hide sidebar for mobile display</h4><p>手机显示时，隐藏侧边栏，否则会显示混乱。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> (max-width: <span class=\"number\">800px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-id\">#sidebar</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">display</span>:none <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Search\"><a href=\"#Search\" class=\"headerlink\" title=\"Search\"></a>Search</h3><p>参考：<a href=\"http://getbootstrap.com/components/#input-groups-buttons\" target=\"_blank\" rel=\"noopener\">Button addons</a> &amp; <a href=\"http://getbootstrap.com/components/#navbar-forms\" target=\"_blank\" rel=\"noopener\">Forms</a></p>\n<p>将下面代码加入<code>header.html</code>中：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar-form navbar-left\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"search\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-group\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-group-btn\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span>&gt;</span>Go!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Search\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>对于search逻辑，目前还没找到一个很好的方式去实现。。。（如果知道的，麻烦告诉我一声！）</p>\n<h3 id=\"Back-to-Top\"><a href=\"#Back-to-Top\" class=\"headerlink\" title=\"Back to Top\"></a>Back to Top</h3><p>该功能我放在了<code>post_sidebar.html</code>中：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#top\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"back-to-top\"</span>&gt;</span>^<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其实就是个link，最后再用css设置样式。</p>\n<hr>\n<p>更新：</p>\n<p>为了不让footer覆盖掉 back-to-top，只能把back-to-top写在footer后面。故改在了<code>default.html</code>里。</p>\n<h3 id=\"Comments\"><a href=\"#Comments\" class=\"headerlink\" title=\"Comments\"></a>Comments</h3><h4 id=\"Gitment\"><a href=\"#Gitment\" class=\"headerlink\" title=\"Gitment\"></a>Gitment</h4><p><a href=\"https://imsun.net/posts/gitment-introduction/\" target=\"_blank\" rel=\"noopener\">Gitment</a> 挺不错的的。按照官网的说明引入js后，在其中修改自己的OAuth Application信息。</p>\n<h4 id=\"isso\"><a href=\"#isso\" class=\"headerlink\" title=\"isso\"></a>isso</h4><p>这是自建评论系统的一种方式。<a href=\"https://posativ.org/isso/\" target=\"_blank\" rel=\"noopener\">官网</a>需要fq.</p>\n<p>我之后用的也是这种方法，详见：<a href=\"http://blog.lszero.com/coding4fun/comments-with-isso.html\" target=\"_blank\" rel=\"noopener\">搭建Isso评论服务</a></p>\n<h3 id=\"Archives\"><a href=\"#Archives\" class=\"headerlink\" title=\"Archives\"></a>Archives</h3>`{% for post in paginator.posts %}` 并不能使用，因为paginator只会对<code>index.html</code>有效。<br><br><code>site.posts | size</code> 获取总的文章数。<br><br>因为jekyll不支持按日期获取，只能暂时用`{% for post in site.posts %}`。<br><br>这部分待补充吧。<br><br>### Category<br><br>参考 <a href=\"https://segmentfault.com/a/1190000000406017#articleHeader2\" target=\"_blank\" rel=\"noopener\">使用Category分类</a>。<br><br>首先在每个文章的YAML头信息中定义类别，如：<br><br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: post</span><br><span class=\"line\">title:  &quot;your title&quot;</span><br><span class=\"line\">categories: Algorithm</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p><strong>获取所有类别：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% raw %&#125;&#123;% for category in site.categories %&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123; category[0] &#125;&#125; (&#123;&#123; category[1].size &#125;&#125;)<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  &#123;% for post in category[1] %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;&#123; post.date | date:\"%d/%m/%Y\"&#125;&#125;<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; post.url &#125;&#125;\"</span>&gt;</span>&#123;&#123; post.title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  &#123;% endfor %&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">&#123;% endfor %&#125;&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<ul>\n<li><code>site.categories.size</code> 获取总的类别数。</li>\n<li><code>category[0]</code> 获取分类名称。</li>\n<li><code>category[1].size</code> 获取该分类下文章的数目。</li>\n<li><code>site.categories.CATEGORY</code> 可得到某个特定类别的所有文章。</li>\n</ul>\n<p>更多变量可参见：<a href=\"http://jekyllrb.com/docs/variables/#site-variables\" target=\"_blank\" rel=\"noopener\">http://jekyllrb.com/docs/variables/#site-variables</a>.</p>\n<p>输出单个分类下的所有文章：</p>\n<p><code>site.categories.CATEGORY</code> 需要手动指定，并不是很方便。</p>\n<p><a href=\"https://segmentfault.com/a/1190000000406017#articleHeader2\" target=\"_blank\" rel=\"noopener\">使用Category分类</a>这篇文章里使用js来实现。</p>\n<p>我这里是先生成好<code>categories.html</code>，里面列出了所有的文章。然后利用锚点<code>categories.html#xxx</code>进行跳转到指定的类别。</p>\n<h3 id=\"Tags\"><a href=\"#Tags\" class=\"headerlink\" title=\"Tags\"></a>Tags</h3><p>参考<a href=\"https://segmentfault.com/a/1190000000406017#articleHeader5\" target=\"_blank\" rel=\"noopener\">使用文章标签索引文章</a>。</p>\n<p>首先在每个文章的YAML头信息中定义tags，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: post</span><br><span class=\"line\">title:  &quot;your title&quot;</span><br><span class=\"line\">tags: [github, jekyll]</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>和<a href=\"#category\">category</a>的设置方法差不多，就不赘述了。</p>\n<h3 id=\"Latex\"><a href=\"#Latex\" class=\"headerlink\" title=\"Latex\"></a>Latex</h3><p>参考：<a href=\"https://jekyllrb.com/docs/extras/#math-support\" target=\"_blank\" rel=\"noopener\">https://jekyllrb.com/docs/extras/#math-support</a></p>\n<p>我这里为了避免所有pages都引入mathjax相关js代码，采用了不同的设置：</p>\n<p>在配置文件<code>_config.yml</code>中添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mathjax: false</span><br></pre></td></tr></table></figure>\n<p>在<code>head.html</code>中添加：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% raw %&#125;&#123;% if page.mathjax %&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">&#123;% endif %&#125;&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在需要引入mathjax的md文件头中加入<code>mathjax: true</code>，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: post</span><br><span class=\"line\">...</span><br><span class=\"line\">mathjax: true</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h4 id=\"Support\"><a href=\"#Support\" class=\"headerlink\" title=\"Support $\"></a>Support $</h4><p>默认只支持双<code>$</code>符，修改：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/x-mathjax-config\"</span>&gt;</span><br><span class=\"line\">  MathJax.Hub.Config(&#123;</span><br><span class=\"line\">    TeX: &#123;</span><br><span class=\"line\">      equationNumbers: &#123;</span><br><span class=\"line\">        autoNumber: <span class=\"string\">\"AMS\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    tex2jax: &#123;</span><br><span class=\"line\">      inlineMath: [ [<span class=\"string\">'$'</span>,<span class=\"string\">'$'</span>] ],</span><br><span class=\"line\">      displayMath: [ [<span class=\"string\">'$$'</span>,<span class=\"string\">'$$'</span>] ],</span><br><span class=\"line\">      processEscapes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Mathjax-Rendering-Problem\"><a href=\"#Mathjax-Rendering-Problem\" class=\"headerlink\" title=\"Mathjax Rendering Problem\"></a>Mathjax Rendering Problem</h4><p>若latex公式中包含<code>|</code>符，如<code>|a|</code>，会被markdown解析器当成<code>&lt;table&gt;&lt;/table&gt;</code>来处理。</p>\n<p>又如，定义矩阵时，其中的换行<code>\\\\</code>也会被解析出问题，把第一个<code>\\</code>当成了转义符。</p>\n<p>解决方式：</p>\n<p>对第一种情况，根据 <a href=\"https://kramdown.gettalong.org/syntax.html#math-blocks\" target=\"_blank\" rel=\"noopener\">Syntax | Kramdown</a> 上的说明，将<code>|</code>用<code>\\vert</code>来代替。</p>\n<p>对第二种情况，用双<code>$$</code>符解决转义问题。</p>\n<h3 id=\"Code-Highlighting\"><a href=\"#Code-Highlighting\" class=\"headerlink\" title=\"Code Highlighting\"></a>Code Highlighting</h3><p>Jekyll 3.x 自带了rouge代码高亮的功能，但是不造为啥一直not working（难道又被看脸了。。</p>\n<p>于是这里用的是<a href=\"https://highlightjs.org/\" target=\"_blank\" rel=\"noopener\">highlightjs</a>。在<code>head.html</code>里添加：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/lib/highlight/styles/hybrid.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/lib/highlight/highlight.pack.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\">hljs.initHighlightingOnLoad();</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我这里把下载的<code>highlightjs</code>的相关文件放在了<code>lib</code>目录下，样式选的是<code>hybrid.css</code>。（monokai-sublime 和 hybrid 配色也不错。）</p>\n<p><code>highlightjs</code>会解析并高亮<code>&lt;pre&gt;&lt;code&gt;...&lt;/code&gt;&lt;/pre&gt;</code>中的内容。如</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">code</span> <span class=\"attr\">class</span>=<span class=\"string\">\"html\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">code</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>若不需要高亮则设为：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">code</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nohighlight\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">code</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里有个麻烦的地方，若md里没有指明语言，<code>highlightjs</code>也会自动检测是什么语言。如果不想对某个code block进行高亮，有两种解决方式：（当然了，我比较折腾，一般人也不需要这个。。（捂脸）</p>\n<p>（1）每次手动加入<code>nohighlight</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">​```nohighlight</span><br><span class=\"line\">xxx</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">（2）修改markdown解析器。</span><br><span class=\"line\"></span><br><span class=\"line\">第一种方式比较麻烦，但`highlightjs`又没有提供关闭`highlightAuto`的接口。</span><br><span class=\"line\"></span><br><span class=\"line\">### Custom Markdown Parser</span><br><span class=\"line\"></span><br><span class=\"line\">在`_config.yml`中可以看到，默认使用的是`kramdown`解析器。</span><br></pre></td></tr></table></figure>\n<p>markdown: kramdown<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">关于[Custom Markdown Processors](https://jekyllrb.com/docs/configuration/#custom-markdown-processors)官网有一些说明，好吧，没看懂，毕竟不会Ruby。kramdown也不能以overwrited的方式改写相应的convert方法，然后又写了段js代码试图修改kramdown解析出的html，但还是没成功。真是艰辛，网上找了好久都无果，最后还不如直接看代码改来得快。。。</span><br><span class=\"line\"></span><br><span class=\"line\">好在`highlightjs`提供了这个：</span><br><span class=\"line\"></span><br><span class=\"line\">```js</span><br><span class=\"line\">// ignore languages</span><br><span class=\"line\">&lt;script&gt;hljs.configure(&#123; ignore: [&apos;text&apos;] &#125;);&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>然后看Jekyll源码，找到了 <code>jekyll/lib/jekyll/converters/markdown/kramdown_parser.rb</code> (see <a href=\"https://github.com/jekyll/jekyll/blob/57fd5f887da1189a16bdfbb982d75f725c38d725/lib/jekyll/converters/markdown/kramdown_parser.rb\" target=\"_blank\" rel=\"noopener\">code</a>) </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">convert</span><span class=\"params\">(content)</span></span></span><br><span class=\"line\">  Kramdown::Document.new(content, @config).to_html</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>接着看kramdown源码，找到了<code>kramdown/lib/kramdown/converter/html.rb</code> (see <a href=\"https://github.com/gettalong/kramdown/blob/f4cdae257159ce0addf542739fed262e4a2cf401/lib/kramdown/converter/html.rb\" target=\"_blank\" rel=\"noopener\">code</a>) </p>\n<p>在我的本地电脑中，相关文件位于<code>/usr/local/lib/ruby/gems/2.4.0/gems/kramdown-1.14.0/lib/kramdown/converter/html.rb</code>。</p>\n<p>找到<code>def convert_codeblock(el, indent)</code>函数进行修改：</p>\n<p>在代码<code>code_attr[&#39;class&#39;] = &quot;language-#{lang}&quot; if lang</code> 前添加：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> lang.<span class=\"literal\">nil</span>?</span><br><span class=\"line\">  lang = <span class=\"string\">\"text\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>并将代码<code>if highlighted_code</code> 改为 <code>if highlighted_code &amp;&amp; lang</code>。</p>\n<p>（其中，<code>nil</code>是判空的意思。）</p>\n<p>这样在不指明语言的时候，不高亮显示。</p>\n<hr>\n<p>上面是mac环境下，可以直接改代码。但是在linux环境下，只有一个二进制执行文件。</p>\n<p>于是，先删除原有的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo gem uninstall kramdown</span><br></pre></td></tr></table></figure>\n<p>然后在官网<a href=\"https://github.com/gettalong/kramdown/releases\" target=\"_blank\" rel=\"noopener\">下载源码</a>重新安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ruby setup.rb config</span><br><span class=\"line\">$ ruby setup.rb setup</span><br><span class=\"line\">$ ruby setup.rb install</span><br></pre></td></tr></table></figure>\n<p>好吧，暂时没弄好。。。</p>\n<h2 id=\"Else\"><a href=\"#Else\" class=\"headerlink\" title=\"Else\"></a>Else</h2><h3 id=\"Permalinks\"><a href=\"#Permalinks\" class=\"headerlink\" title=\"Permalinks\"></a>Permalinks</h3><p>在<code>_config.yml</code>中设置，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">permalink: /:categories/:year/:month/:day/:title.html</span><br></pre></td></tr></table></figure>\n<h3 id=\"footer\"><a href=\"#footer\" class=\"headerlink\" title=\"footer\"></a>footer</h3><p>当页面内容长度不够时，footer显示位置可能有问题。</p>\n<p>让footer内容永远处于最末端：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">$height-footer: 40px;</span><br><span class=\"line\"></span><br><span class=\"line\">html &#123;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">    min-height: 100%;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    padding-bottom: $height-footer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.footer &#123;</span><br><span class=\"line\">    bottom: 0;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    height: $height-footer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>子元素的百分比高度也可以基于父元素的百分比高度，前提是父元素的父元素必须有一个明确的高度。要使<code>min-height</code>的百分比值生效，其父元素的<code>height</code>值必须为一个固定的高度或者是一个有效的百分比高度。</p>\n<h2 id=\"Problems\"><a href=\"#Problems\" class=\"headerlink\" title=\"Problems\"></a>Problems</h2>`{{ xxx }}` 或者 `{% xxx %}` 显示不出来。<br><br>解决方式：<br><br>（1）<br><br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\&#123;\\&#123; xxx \\&#125;\\&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）参考：<a href=\"https://stackoverflow.com/questions/24102498/escaping-double-curly-braces-inside-a-markdown-code-block-in-jekyll\" target=\"_blank\" rel=\"noopener\">Escaping double curly braces inside a markdown code block in Jekyll</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% assign openTag = &apos;&#123;%&apos; %&#125;&#123;&#123; openTag &#125;&#125; raw %&#125;    </span><br><span class=\"line\">This is a test: &#123;% raw %&#125;&#123;&#123; xxx &#125;&#125;&#123;% endraw %&#125;</span><br><span class=\"line\">&#123;&#123; openTag &#125;&#125; endraw %&#125;</span><br></pre></td></tr></table></figure>\n<p>（3）那么问题又来了，如何显示上面的 raw 和 endraw 呢？参考：<a href=\"http://www.cnblogs.com/OceanHeaven/p/6959669.html\" target=\"_blank\" rel=\"noopener\">jekyll 如何转义字符</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen [::]:80;</span><br><span class=\"line\">    server_name comments.lszero.com;</span><br><span class=\"line\">    </span><br><span class=\"line\">    location /isso &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:8090;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"line\">        proxy_set_header X-Script-Name /isso;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>作为一个极简主义者，越来越受不了WordPress的臃肿。主要自己平时都是用Markdown来做记录，而WordPress支持的不是很好，另外有时写的md长文通过三方软件导出的html也不造放在wp的什么地方才合适，管理起来还不如几个静态页面来得方便。于是有了某天来个大整顿的想法。</p>\n<p>对前端只停留在css的我，花了整三天时间，从Hexo到Jekyll再到Bootstrap，以及各种markdown2html解析器…最后基本算是从头写了一个基于Jekyll的website theme 😓  在此记录了各种前端坑，自认为还算详细吧。","more":"</p>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p>主流的静态页面生成器有俩，一个Jekyll，一个Hexo，都支持Markdown。 前者用的是Ruby，后者为Node.js。</p>\n<p>Hexo会比Jekyll搭建起来更方便一些，而且各种配置项的设计也很便捷，网站themes还很丰富，所以我一开始弄的就是这个。</p>\n<ul>\n<li><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a></li>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">next</a> : 一款优雅并且功能强大的主题. <a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"noopener\">[doc]</a> <a href=\"[http://notes.iissnan.com](http://notes.iissnan.com/\">[demo]</a>)</li>\n</ul>\n<p>搭建方法上面这两个链接写的很详细。</p>\n<p>这里主要记录一下让Hexo支持LaTex的注意地方。Hexo用MathJax时会有一些<a href=\"http://2wildkids.com/2016/10/06/%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86Hexo%E5%92%8CMathJax%E7%9A%84%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/#\" target=\"_blank\" rel=\"noopener\">转义问题</a>，经我自己测试，最好的方式是用<code>hexo-renderer-pandoc</code>渲染器代替原有的<code>hexo-renderer-marked</code>。而网上说的用<code>hexo-renderer-kramed</code>，对矩阵的情况显示的不好。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm uninstall hexo-renderer-marked --save</span><br><span class=\"line\">$ npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>\n<h2 id=\"Jekyll\"><a href=\"#Jekyll\" class=\"headerlink\" title=\"Jekyll\"></a>Jekyll</h2><p>其实用Hexo/Jekyll+现成的主题，很方便就能搭出一个静态网站出来。只是除了代码高亮、LaTex这些功能之外，我还想能区分出code block 和普通无需highlighting的<code>&lt;pre&gt;</code>部分，还有其他一些改动。因为markdown解析的原因，基本所有themes出的效果都是将两者统一处理了。强迫症（其实就是zuo），主题挑来挑去都没找到个合心意的，比如next这种，太复杂，让我一个前端白痴改，哈，那还是自己从头写一个比较符合程序员造轮子的习惯吧。。。（捂脸</p>\n<p>（至于为啥从Hexo转到了Jekyll，原因未明）</p>\n<h2 id=\"Get-Started\"><a href=\"#Get-Started\" class=\"headerlink\" title=\"Get Started\"></a>Get Started</h2><p>参考：<a href=\"https://jekyllrb.com/docs/home/\" target=\"_blank\" rel=\"noopener\">Jekyll Doc</a> (<a href=\"http://jekyll.com.cn/docs/home/\" target=\"_blank\" rel=\"noopener\">中文版</a>，内容比较旧)</p>\n<h3 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h3><p>本来在本地用Homebrew安装一路顺畅，但放到服务器就各种问题。</p>\n<p>首先直接用apt-get下载的Ruby版本比较旧。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Install Ruby &amp; RubyGems</span><br><span class=\"line\">$ sudo apt-add-repository ppa:brightbox/ruby-ng</span><br><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install ruby2.4</span><br><span class=\"line\"></span><br><span class=\"line\"># Install Jekyll and Bundler gems</span><br><span class=\"line\">$ sudo gem install jekyll bundler</span><br></pre></td></tr></table></figure>\n<p>然后在<code>gem install jekyll</code>时会报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">error: could not find a valid gem (&gt;= 0) in any repository</span><br></pre></td></tr></table></figure>\n<p>参考<a href=\"https://github.com/jekyll/jekyll/issues/1409\" target=\"_blank\" rel=\"noopener\">github issues</a>，F*k GWF，需要将<code>https://rubygems.org/</code>换成其他可访问的镜像，如<a href=\"http://gems.ruby-china.org/\" target=\"_blank\" rel=\"noopener\">Ruby China 镜像</a>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gem sources --remove https://rubygems.org/</span><br><span class=\"line\">$ gem sources -a https://gems.ruby-china.org/</span><br><span class=\"line\">$ gem sources -l</span><br><span class=\"line\">*** CURRENT SOURCES ***</span><br><span class=\"line\">https://gems.ruby-china.org/   </span><br><span class=\"line\"># 确保只有 gems.ruby-china.org</span><br></pre></td></tr></table></figure>\n<p>重新尝试 install jekyll，还是报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">current directory: /var/lib/gems/2.4.0/gems/ffi-1.9.18/ext/ffi_c</span><br><span class=\"line\">/usr/bin/ruby2.4 -r ./siteconf20170801-1836-1n75umz.rb extconf.rb</span><br><span class=\"line\">mkmf.rb can&apos;t find header files for ruby at /usr/lib/ruby/include/ruby.h</span><br></pre></td></tr></table></figure>\n<p>解决方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install ruby2.4-dev</span><br></pre></td></tr></table></figure>\n<p>之后就可以正常安装jekyll了。</p>\n<p>另外，根据<a href=\"http://gems.ruby-china.org/\" target=\"_blank\" rel=\"noopener\">Ruby China 镜像</a>，你可以用 Bundler 的 <a href=\"http://bundler.io/v1.5/bundle_config.html#gem-source-mirrors\" target=\"_blank\" rel=\"noopener\">Gem 源代码镜像命令</a>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ bundle config mirror.https://rubygems.org https://gems.ruby-china.org</span><br></pre></td></tr></table></figure>\n<p>这样就不用改你的 Gemfile 中的 source了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">source &quot;https://rubygems.org&quot;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h3 id=\"Basic-Command\"><a href=\"#Basic-Command\" class=\"headerlink\" title=\"Basic Command\"></a>Basic Command</h3><p>用jekyll新建一个site:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ jekyll new myblog</span><br><span class=\"line\">$ cd myblog</span><br><span class=\"line\">$ bundle exec jekyll serve</span><br></pre></td></tr></table></figure>\n<p>打开<a href=\"http://localhost:4000测试。\" target=\"_blank\" rel=\"noopener\">http://localhost:4000测试。</a></p>\n<p>默认使用的是<code>Minima theme</code>. 目前基于jekyll 3.x的themes还比较少。<br>因为我是自己新建的theme，就不用这样方式了。</p>\n<hr>\n<p>启动服务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 启动服务</span><br><span class=\"line\">$ jekyll serve</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动服务(gem-based theme)</span><br><span class=\"line\">$ bundle exec jekyll serve</span><br><span class=\"line\"></span><br><span class=\"line\"># 脱离终端在后台运行</span><br><span class=\"line\"># 如果你想关闭服务器，可以使用`kill -9 1234`命令，&quot;1234&quot; 是进程号（PID）。</span><br><span class=\"line\"># 如果你找不到进程号，那么就用`ps aux | grep jekyll`命令来查看，然后关闭服务器。</span><br><span class=\"line\">$ jekyll serve --detach</span><br><span class=\"line\"></span><br><span class=\"line\"># 和jekyll serve相同，但是会查看变更并且自动再生成。</span><br><span class=\"line\">$ jekyll serve --watch</span><br></pre></td></tr></table></figure>\n<p>生成静态页面（位于<code>_site</code>目录）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ jekyll build</span><br></pre></td></tr></table></figure>\n<p>或者用：(watched for changes, and regenerated automatically.)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ jekyll build --watch</span><br></pre></td></tr></table></figure>\n<h1 id=\"Set-up-Your-Site-on-VPS\"><a href=\"#Set-up-Your-Site-on-VPS\" class=\"headerlink\" title=\"Set up Your Site on VPS\"></a>Set up Your Site on VPS</h1><p>网上清一色都是通过github pages来发布的站点，然后通过修改<code>CNAME</code>文件来达到绑定域名的目的。</p>\n<p>我这里是放到VPS上，需要自己搭建web server环境。</p>\n<blockquote>\n<p>Jekyll is a static site generator, not a webserver. You may generate the static files and serve with webserver like <code>nginx</code>, which provides such abilities.</p>\n</blockquote>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-get-started-with-jekyll-on-an-ubuntu-vps\" target=\"_blank\" rel=\"noopener\">How To Get Started with Jekyll on an Ubuntu VPS</a></li>\n<li><a href=\"https://thomasroest.com/2016/11/05/set-up-a-jekyll-site-on-a-vps-with-ubuntu-nginx-and-letsencrypt.html\" target=\"_blank\" rel=\"noopener\">Set up a Jekyll site on a vps with Ubuntu, Nginx and Letsencrypt</a></li>\n</ul>\n<p>因为是静态网站，所以Jekyll其实安装在本地就可以，静态页面也放在本地。然后将Jekyll生成的静态HTML文件（<code>_site</code>目录下）通过类似FTP的方式上传到VPS就行。</p>\n<p>将本地数据上传到远程服务用<code>scp</code>就行，后来了解到<code>rsync</code>这个命令。<code>rsync</code>只传送两个文件的不同部分，而不是每次都整份传送，因此速度很快。</p>\n<p>先来理清关系：</p>\n<ul>\n<li><a href=\"http://jekyllrb.com/\" target=\"_blank\" rel=\"noopener\">Jekyll</a> for write our content</li>\n<li><a href=\"http://nginx.org/en/\" target=\"_blank\" rel=\"noopener\">nginx</a> to serve our content</li>\n<li><a href=\"http://www.capistranorb.com/\" target=\"_blank\" rel=\"noopener\">Capistrano</a> to deploy</li>\n</ul>\n<h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nginx</span><br><span class=\"line\">sudo service nginx start</span><br></pre></td></tr></table></figure>\n<p>然后输入vps地址就能看到nginx的欢迎页面。</p>\n<p>查看运行状态：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo service nginx status</span><br><span class=\"line\"># 显示：</span><br><span class=\"line\">- nginx is running</span><br></pre></td></tr></table></figure>\n<p>修改 nginx 配置：sudo vim /etc/nginx/sites-enabled/default</p>\n<p>将 <code>root /usr/share/nginx/html;</code> 注释掉，改为 <code>root /home/deploy/your_blog_name/_site</code>。</p>\n<p>将 <code>server_name localhost;</code> 注释掉，改为 <code>server_name your_domain.com;</code>。</p>\n<p>重新启动nginx，就能看到建的blog内容了。</p>\n<h2 id=\"Capistrano\"><a href=\"#Capistrano\" class=\"headerlink\" title=\"Capistrano\"></a>Capistrano</h2><p>Capistrano 是一个 Ruby 程序，参考第一个文章链接，它可以通过Git复制代码到服务器等操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo gem install capistrano</span><br></pre></td></tr></table></figure>\n<p>这里先存留吧，暂时还没用到Capistrano。</p>\n<p>目前是按照<a href=\"http://blog.lszero.com/coding4fun/multisite-setting.html\" target=\"_blank\" rel=\"noopener\">利用Apache进行多站点配置</a>设置的。</p>\n<h1 id=\"Create-New-Theme-From-Scratch\"><a href=\"#Create-New-Theme-From-Scratch\" class=\"headerlink\" title=\"Create New Theme From Scratch\"></a>Create New Theme From Scratch</h1><p>既然是from scratch，就先把jekyll的目录结构理清，然后借助bootstrap框架创建主题，最后就是各种features了。</p>\n<h2 id=\"Basic\"><a href=\"#Basic\" class=\"headerlink\" title=\"Basic\"></a>Basic</h2><h3 id=\"Directory-Structure\"><a href=\"#Directory-Structure\" class=\"headerlink\" title=\"Directory Structure\"></a>Directory Structure</h3><p>用<code>jekyll new-theme xxx</code>命令，就可以创建出一个theme需要的基本目录项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── _drafts</span><br><span class=\"line\">|   ├── begin-with-the-crazy-ideas.textile</span><br><span class=\"line\">|   └── on-simplicity-in-technology.markdown</span><br><span class=\"line\">├── _includes</span><br><span class=\"line\">|   ├── footer.html</span><br><span class=\"line\">|   └── header.html</span><br><span class=\"line\">├── _layouts</span><br><span class=\"line\">|   ├── default.html</span><br><span class=\"line\">|   ├── post.html</span><br><span class=\"line\">├── _posts</span><br><span class=\"line\">|   ├── 2007-10-29-why-every-programmer-should-play-nethack.textile</span><br><span class=\"line\">|   └── 2009-04-26-barcamp-boston-4-roundup.textile</span><br><span class=\"line\">├── _data</span><br><span class=\"line\">|   └── members.yml</span><br><span class=\"line\">├── _site</span><br><span class=\"line\">└── index.html</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<p><code>_config.yml</code> 是配置文件。默认配置参见：<a href=\"https://jekyllrb.com/docs/configuration/#default-configuration\" target=\"_blank\" rel=\"noopener\">https://jekyllrb.com/docs/configuration/#default-configuration</a></p>\n<p><code>_includes</code> 里的文件为了布局重用。</p>\n<p><code>_layouts</code> 站点布局模板。布局可以在 <a href=\"http://jekyll.com.cn/docs/frontmatter/\" target=\"_blank\" rel=\"noopener\">YAML 头信息</a>中根据不同文章进行选择。 </p>\n<p><code>_posts</code> 将md文件以<code>2017-08-01-welcome-to-jekyll.md</code>的格式放到该目录中。</p>\n<p><code>_drafts</code> 中的md文件直接以<code>title.md</code>命名，并不会发布出来。当运行<code>jekyll serve</code>或者<code>jekyll build --drafts</code>时，草稿文章会被加上日期值并发布出来。</p>\n<p><code>_site</code> 存放jekyll转化完成的html文件。有时修改效果不生效，可以尝试删除该目录。</p>\n<h3 id=\"Variables\"><a href=\"#Variables\" class=\"headerlink\" title=\"Variables\"></a>Variables</h3><p>自带的变量详见：<a href=\"http://jekyllrb.com/docs/variables/\" target=\"_blank\" rel=\"noopener\">Variables</a>。</p>\n<p>或者通过<code>_config.yml</code>添加。</p>\n<h3 id=\"Need-to-Know\"><a href=\"#Need-to-Know\" class=\"headerlink\" title=\"Need to Know\"></a>Need to Know</h3><p>若在<code>index.html</code>的YAML头信息中加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: default</span><br><span class=\"line\">...</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>则在<code>default.html</code>中调用`{{ content }}`时，就会把<code>index.html</code>中的所有内容放到调用处。</p>\n<h2 id=\"Bootstrap\"><a href=\"#Bootstrap\" class=\"headerlink\" title=\"Bootstrap\"></a>Bootstrap</h2><p>Bootstrap前端框架真是我这种前端白痴的福音。</p>\n<p>下载<a href=\"https://github.com/twbs/bootstrap/releases/download/v3.3.7/bootstrap-3.3.7-dist.zip\" target=\"_blank\" rel=\"noopener\">Bootstrp</a>，我这里将解压后的文件放到了<code>assets/bootstrap-3.3.7-dist</code> 目录下。</p>\n<p>使用Bootstrap：</p>\n<p>参考Bootstrap官网里给的<a href=\"http://getbootstrap.com/getting-started/#template\" target=\"_blank\" rel=\"noopener\">基本HTML模板</a>，</p>\n<p>（1）将下面这行代码改成自己的相应路径后，放到<code>head.html</code> 的<code>&lt;head&gt;&lt;/head&gt;</code> 标签中。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Bootstrap --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/assets/bootstrap-3.3.7-dist/css/bootstrap.min.css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>（2）将下两行改成自己的相应路径后，放到<code>default.html</code> 的<code>&lt;body&gt;&lt;/body&gt;</code> 标签中的最下方，为了最后加载。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- jQuery (necessary for Bootstrap's JavaScript plugins) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/assets/bootstrap-3.3.7-dist/js/bootstrap.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>若没效果，删除 <code>_site</code> 目录再试试，或者用命令重新 build。</p>\n<h3 id=\"NavBar\"><a href=\"#NavBar\" class=\"headerlink\" title=\"NavBar\"></a>NavBar</h3><p>参考Bootstrap官网给的<a href=\"http://getbootstrap.com/components/#navbar\" target=\"_blank\" rel=\"noopener\">示例代码</a>，写入<code>header.html</code>文件中。</p>\n<p>然后在<code>default.html</code>的<code>&lt;body&gt;&lt;/body&gt;</code>标签中引入`{% include header.html %}`。</p>\n<p>注意的点是，</p>\n<p>若使用了<code>.navbar-fixed-top</code> 类，这个固定的导航条会遮住页面上的其它内容，除非你给 <code>&lt;body&gt;</code> 元素底部设置了 <code>padding</code>，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">body &#123; padding-top: 70px; &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Features\"><a href=\"#Features\" class=\"headerlink\" title=\"Features\"></a>Features</h2><h3 id=\"Post-Excerpt\"><a href=\"#Post-Excerpt\" class=\"headerlink\" title=\"Post Excerpt\"></a>Post Excerpt</h3><p>在<code>index.html</code> 中显示文章摘要。参见<a href=\"https://jekyllrb.com/docs/posts/#post-excerpts\" target=\"_blank\" rel=\"noopener\">https://jekyllrb.com/docs/posts/#post-excerpts</a>。</p>\n<p>（1）自带的`{{ post.excerpt }}` 会自动取第一段的内容作为摘要。</p>\n<p>若想自定义，</p>\n<p>（2）在<code>_config.yml</code> 文件中指定摘要的分隔符：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">excerpt_separator: &lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>\n<p>这样会覆盖自带的`{{ post.excerpt }}`功能，然后在文章内容需要分隔的摘要后面加上<code>&lt;!-- more --&gt;</code>。而<code>&lt;!-- more --&gt;</code> 本身作为注释，不会影响 markdown 的显示。</p>\n<p>（3）或者采用这样的方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% raw %&#125;&#123;&#123; post.content | strip_html | truncatewords:75 &#125;&#125;&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Pagination\"><a href=\"#Pagination\" class=\"headerlink\" title=\"Pagination\"></a>Pagination</h3><p>用于<code>index.html</code> 里对文章的分页显示功能。</p>\n<p>（1）首先安装<code>jekyll-paginate</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo gem install jekyll-paginate</span><br></pre></td></tr></table></figure>\n<p>在配置文件<code>_config.yml</code>中添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">plugins:</span><br><span class=\"line\">  - jekyll-paginate</span><br><span class=\"line\">paginate: 5</span><br><span class=\"line\">paginate_path: &quot;/pages:num/&quot;</span><br></pre></td></tr></table></figure>\n<p>其中，<code>paginate: 5</code> 设置的是分页数；<br><code>paginate_path: &quot;/pages:num/&quot;</code> 设置的是URL的显示格式，如 <a href=\"http://localhost:4000/pages2/。\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/pages2/。</a></p>\n<p>（2）然后参考<a href=\"https://jekyllrb.com/docs/pagination/\" target=\"_blank\" rel=\"noopener\">https://jekyllrb.com/docs/pagination/</a>在<code>index.html</code>添加分页功能，并结合Bootstrap里的分页样式修改：<a href=\"http://getbootstrap.com/components/#pagination\" target=\"_blank\" rel=\"noopener\">http://getbootstrap.com/components/#pagination</a>。</p>\n<h3 id=\"SideBar\"><a href=\"#SideBar\" class=\"headerlink\" title=\"SideBar\"></a>SideBar</h3><p>这里利用了 bootstrap 的栅格布局，栅格布局将一个页面分割成12个等宽的列。(详见 <a href=\"http://getbootstrap.com/css/#grid-example-basic\" target=\"_blank\" rel=\"noopener\">example</a>)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row-fluid\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-9\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Content<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-3\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Sidebar<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>让侧边栏固定住，不随页面滚动而滚动：加入<code>class=&quot;affix&quot;</code>。</p>\n<hr>\n<p><strong>说明：</strong></p>\n<p>我这里设置两种sidebar：</p>\n<ul>\n<li>一种是<code>index.html</code>里的，用于显示author信息，写在<code>main_sidebar.html</code>中；</li>\n<li>另一种是<code>post</code>对应的，用于显示目录列表，写在<code>post_sidebar.html</code>中。</li>\n</ul>\n<hr>\n<h3 id=\"Social-Icons\"><a href=\"#Social-Icons\" class=\"headerlink\" title=\"Social Icons\"></a>Social Icons</h3><p>icons用的是 <a href=\"http://fontawesome.io/\" target=\"_blank\" rel=\"noopener\">fontawesome</a>。我这里将解压后的 <code>fonts</code>和<code>css</code>文件夹复制到了<code>assets</code>目录下。</p>\n<p>在<code>head.html</code>中添加：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/assets/css/font-awesome.min.css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>要使用哪个图标，直接去<a href=\"http://fontawesome.io/icons/\" target=\"_blank\" rel=\"noopener\">官网</a>搜代码就行。</p>\n<p>修改图标颜色，因为其本身就是一种字体，故使用<code>color</code>修改即可。</p>\n<p>修改图标大小也是，用<code>font-size</code>即可，或者：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-camera-retro\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-camera-retro fa-2x\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-camera-retro fa-3x\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>对官网搜不到的社交网站图标怎么办，如“知乎”的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; site.social_media.zhihu_url &#125;&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Zhihu\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa-stack fa-lg\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-circle fa-stack-2x\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-stack-1x fa-inverse\"</span>&gt;</span>知<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Table-of-Content\"><a href=\"#Table-of-Content\" class=\"headerlink\" title=\"Table of Content\"></a>Table of Content</h3><h4 id=\"post中显示目录\"><a href=\"#post中显示目录\" class=\"headerlink\" title=\"post中显示目录\"></a>post中显示目录</h4><p>kramdown自带了解析目录的功能。详见：<a href=\"https://kramdown.gettalong.org/converter/html.html#toc\" target=\"_blank\" rel=\"noopener\">https://kramdown.gettalong.org/converter/html.html#toc</a></p>\n<p>在md文件中加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 无序列表</span><br><span class=\"line\">* TOC</span><br><span class=\"line\">&#123;:toc&#125;</span><br><span class=\"line\">&#123;: .this-is-my-class&#125;</span><br></pre></td></tr></table></figure>\n<p>或者：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 有序列表</span><br><span class=\"line\">1. TOC</span><br><span class=\"line\">&#123;:toc&#125;</span><br><span class=\"line\">&#123;: .this-is-my-class&#125;</span><br></pre></td></tr></table></figure>\n<p>并且可在<code>_config.yml</code>中设置要显示的标题级别：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">kramdown: </span><br><span class=\"line\">  toc_levels: &quot;2,3&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"sidebar中显示目录\"><a href=\"#sidebar中显示目录\" class=\"headerlink\" title=\"sidebar中显示目录\"></a>sidebar中显示目录</h4><p>侧边栏目录随浏览内容动态滚动功能，利用Bootstrap的<a href=\"http://getbootstrap.com/javascript/#scrollspy\" target=\"_blank\" rel=\"noopener\">Scrollspy</a>来实现。</p>\n<ul>\n<li>参考 <a href=\"http://www.thomaszhao.cn/2015/01/08/how-do-i-build-this-jekyll-blog/#toctable-of-content-\" target=\"_blank\" rel=\"noopener\">application.js</a> 获取目录结构，和标题滚动效果。</li>\n<li>参考 <a href=\"https://www.mywpku.com/jquery-pin-elements.html\" target=\"_blank\" rel=\"noopener\">JQUERY实现侧边栏随滚动条滚动并固定位置</a> 来固定sidebar的位置，并且效果是：当滚动到指定模块时才置顶该模块。</li>\n</ul>\n<p>最后写了个 <a href=\"https://github.com/lszero/lszero.github.io/blob/master/assets/js/toc/TOC.js\" target=\"_blank\" rel=\"noopener\">TOP.js</a> 终于实现得还算满意了。（当然，还要配合 css 使用）</p>\n<p>另外，其它不错的实现：</p>\n<ul>\n<li><a href=\"https://afeld.github.io/bootstrap-toc/\" target=\"_blank\" rel=\"noopener\">bootstrap-toc</a> (<a href=\"https://github.com/afeld/bootstrap-toc/tree/gh-pages/dist\" target=\"_blank\" rel=\"noopener\">github</a>)</li>\n<li><a href=\"http://gregfranko.com/jquery.tocify.js/\" target=\"_blank\" rel=\"noopener\">Tocify plugin</a></li>\n<li><a href=\"http://projects.jga.me/toc/\" target=\"_blank\" rel=\"noopener\">TOC plugin</a></li>\n</ul>\n<h4 id=\"Hide-sidebar-for-mobile-display\"><a href=\"#Hide-sidebar-for-mobile-display\" class=\"headerlink\" title=\"Hide sidebar for mobile display\"></a>Hide sidebar for mobile display</h4><p>手机显示时，隐藏侧边栏，否则会显示混乱。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> (max-width: <span class=\"number\">800px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-id\">#sidebar</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">display</span>:none <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Search\"><a href=\"#Search\" class=\"headerlink\" title=\"Search\"></a>Search</h3><p>参考：<a href=\"http://getbootstrap.com/components/#input-groups-buttons\" target=\"_blank\" rel=\"noopener\">Button addons</a> &amp; <a href=\"http://getbootstrap.com/components/#navbar-forms\" target=\"_blank\" rel=\"noopener\">Forms</a></p>\n<p>将下面代码加入<code>header.html</code>中：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar-form navbar-left\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"search\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-group\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-group-btn\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-default\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span>&gt;</span>Go!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Search\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>对于search逻辑，目前还没找到一个很好的方式去实现。。。（如果知道的，麻烦告诉我一声！）</p>\n<h3 id=\"Back-to-Top\"><a href=\"#Back-to-Top\" class=\"headerlink\" title=\"Back to Top\"></a>Back to Top</h3><p>该功能我放在了<code>post_sidebar.html</code>中：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#top\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"back-to-top\"</span>&gt;</span>^<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其实就是个link，最后再用css设置样式。</p>\n<hr>\n<p>更新：</p>\n<p>为了不让footer覆盖掉 back-to-top，只能把back-to-top写在footer后面。故改在了<code>default.html</code>里。</p>\n<h3 id=\"Comments\"><a href=\"#Comments\" class=\"headerlink\" title=\"Comments\"></a>Comments</h3><h4 id=\"Gitment\"><a href=\"#Gitment\" class=\"headerlink\" title=\"Gitment\"></a>Gitment</h4><p><a href=\"https://imsun.net/posts/gitment-introduction/\" target=\"_blank\" rel=\"noopener\">Gitment</a> 挺不错的的。按照官网的说明引入js后，在其中修改自己的OAuth Application信息。</p>\n<h4 id=\"isso\"><a href=\"#isso\" class=\"headerlink\" title=\"isso\"></a>isso</h4><p>这是自建评论系统的一种方式。<a href=\"https://posativ.org/isso/\" target=\"_blank\" rel=\"noopener\">官网</a>需要fq.</p>\n<p>我之后用的也是这种方法，详见：<a href=\"http://blog.lszero.com/coding4fun/comments-with-isso.html\" target=\"_blank\" rel=\"noopener\">搭建Isso评论服务</a></p>\n<h3 id=\"Archives\"><a href=\"#Archives\" class=\"headerlink\" title=\"Archives\"></a>Archives</h3>`{% for post in paginator.posts %}` 并不能使用，因为paginator只会对<code>index.html</code>有效。<br><br><code>site.posts | size</code> 获取总的文章数。<br><br>因为jekyll不支持按日期获取，只能暂时用`{% for post in site.posts %}`。<br><br>这部分待补充吧。<br><br>### Category<br><br>参考 <a href=\"https://segmentfault.com/a/1190000000406017#articleHeader2\" target=\"_blank\" rel=\"noopener\">使用Category分类</a>。<br><br>首先在每个文章的YAML头信息中定义类别，如：<br><br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: post</span><br><span class=\"line\">title:  &quot;your title&quot;</span><br><span class=\"line\">categories: Algorithm</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p><strong>获取所有类别：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% raw %&#125;&#123;% for category in site.categories %&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123; category[0] &#125;&#125; (&#123;&#123; category[1].size &#125;&#125;)<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  &#123;% for post in category[1] %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;&#123; post.date | date:\"%d/%m/%Y\"&#125;&#125;<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; post.url &#125;&#125;\"</span>&gt;</span>&#123;&#123; post.title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  &#123;% endfor %&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">&#123;% endfor %&#125;&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<ul>\n<li><code>site.categories.size</code> 获取总的类别数。</li>\n<li><code>category[0]</code> 获取分类名称。</li>\n<li><code>category[1].size</code> 获取该分类下文章的数目。</li>\n<li><code>site.categories.CATEGORY</code> 可得到某个特定类别的所有文章。</li>\n</ul>\n<p>更多变量可参见：<a href=\"http://jekyllrb.com/docs/variables/#site-variables\" target=\"_blank\" rel=\"noopener\">http://jekyllrb.com/docs/variables/#site-variables</a>.</p>\n<p>输出单个分类下的所有文章：</p>\n<p><code>site.categories.CATEGORY</code> 需要手动指定，并不是很方便。</p>\n<p><a href=\"https://segmentfault.com/a/1190000000406017#articleHeader2\" target=\"_blank\" rel=\"noopener\">使用Category分类</a>这篇文章里使用js来实现。</p>\n<p>我这里是先生成好<code>categories.html</code>，里面列出了所有的文章。然后利用锚点<code>categories.html#xxx</code>进行跳转到指定的类别。</p>\n<h3 id=\"Tags\"><a href=\"#Tags\" class=\"headerlink\" title=\"Tags\"></a>Tags</h3><p>参考<a href=\"https://segmentfault.com/a/1190000000406017#articleHeader5\" target=\"_blank\" rel=\"noopener\">使用文章标签索引文章</a>。</p>\n<p>首先在每个文章的YAML头信息中定义tags，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: post</span><br><span class=\"line\">title:  &quot;your title&quot;</span><br><span class=\"line\">tags: [github, jekyll]</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>和<a href=\"#category\">category</a>的设置方法差不多，就不赘述了。</p>\n<h3 id=\"Latex\"><a href=\"#Latex\" class=\"headerlink\" title=\"Latex\"></a>Latex</h3><p>参考：<a href=\"https://jekyllrb.com/docs/extras/#math-support\" target=\"_blank\" rel=\"noopener\">https://jekyllrb.com/docs/extras/#math-support</a></p>\n<p>我这里为了避免所有pages都引入mathjax相关js代码，采用了不同的设置：</p>\n<p>在配置文件<code>_config.yml</code>中添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mathjax: false</span><br></pre></td></tr></table></figure>\n<p>在<code>head.html</code>中添加：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% raw %&#125;&#123;% if page.mathjax %&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">&#123;% endif %&#125;&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在需要引入mathjax的md文件头中加入<code>mathjax: true</code>，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: post</span><br><span class=\"line\">...</span><br><span class=\"line\">mathjax: true</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h4 id=\"Support\"><a href=\"#Support\" class=\"headerlink\" title=\"Support $\"></a>Support $</h4><p>默认只支持双<code>$</code>符，修改：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/x-mathjax-config\"</span>&gt;</span><br><span class=\"line\">  MathJax.Hub.Config(&#123;</span><br><span class=\"line\">    TeX: &#123;</span><br><span class=\"line\">      equationNumbers: &#123;</span><br><span class=\"line\">        autoNumber: <span class=\"string\">\"AMS\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    tex2jax: &#123;</span><br><span class=\"line\">      inlineMath: [ [<span class=\"string\">'$'</span>,<span class=\"string\">'$'</span>] ],</span><br><span class=\"line\">      displayMath: [ [<span class=\"string\">'$$'</span>,<span class=\"string\">'$$'</span>] ],</span><br><span class=\"line\">      processEscapes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Mathjax-Rendering-Problem\"><a href=\"#Mathjax-Rendering-Problem\" class=\"headerlink\" title=\"Mathjax Rendering Problem\"></a>Mathjax Rendering Problem</h4><p>若latex公式中包含<code>|</code>符，如<code>|a|</code>，会被markdown解析器当成<code>&lt;table&gt;&lt;/table&gt;</code>来处理。</p>\n<p>又如，定义矩阵时，其中的换行<code>\\\\</code>也会被解析出问题，把第一个<code>\\</code>当成了转义符。</p>\n<p>解决方式：</p>\n<p>对第一种情况，根据 <a href=\"https://kramdown.gettalong.org/syntax.html#math-blocks\" target=\"_blank\" rel=\"noopener\">Syntax | Kramdown</a> 上的说明，将<code>|</code>用<code>\\vert</code>来代替。</p>\n<p>对第二种情况，用双<code>$$</code>符解决转义问题。</p>\n<h3 id=\"Code-Highlighting\"><a href=\"#Code-Highlighting\" class=\"headerlink\" title=\"Code Highlighting\"></a>Code Highlighting</h3><p>Jekyll 3.x 自带了rouge代码高亮的功能，但是不造为啥一直not working（难道又被看脸了。。</p>\n<p>于是这里用的是<a href=\"https://highlightjs.org/\" target=\"_blank\" rel=\"noopener\">highlightjs</a>。在<code>head.html</code>里添加：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/lib/highlight/styles/hybrid.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/lib/highlight/highlight.pack.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\">hljs.initHighlightingOnLoad();</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我这里把下载的<code>highlightjs</code>的相关文件放在了<code>lib</code>目录下，样式选的是<code>hybrid.css</code>。（monokai-sublime 和 hybrid 配色也不错。）</p>\n<p><code>highlightjs</code>会解析并高亮<code>&lt;pre&gt;&lt;code&gt;...&lt;/code&gt;&lt;/pre&gt;</code>中的内容。如</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">code</span> <span class=\"attr\">class</span>=<span class=\"string\">\"html\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">code</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>若不需要高亮则设为：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">code</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nohighlight\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">code</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里有个麻烦的地方，若md里没有指明语言，<code>highlightjs</code>也会自动检测是什么语言。如果不想对某个code block进行高亮，有两种解决方式：（当然了，我比较折腾，一般人也不需要这个。。（捂脸）</p>\n<p>（1）每次手动加入<code>nohighlight</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">​```nohighlight</span><br><span class=\"line\">xxx</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">（2）修改markdown解析器。</span><br><span class=\"line\"></span><br><span class=\"line\">第一种方式比较麻烦，但`highlightjs`又没有提供关闭`highlightAuto`的接口。</span><br><span class=\"line\"></span><br><span class=\"line\">### Custom Markdown Parser</span><br><span class=\"line\"></span><br><span class=\"line\">在`_config.yml`中可以看到，默认使用的是`kramdown`解析器。</span><br></pre></td></tr></table></figure>\n<p>markdown: kramdown<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">关于[Custom Markdown Processors](https://jekyllrb.com/docs/configuration/#custom-markdown-processors)官网有一些说明，好吧，没看懂，毕竟不会Ruby。kramdown也不能以overwrited的方式改写相应的convert方法，然后又写了段js代码试图修改kramdown解析出的html，但还是没成功。真是艰辛，网上找了好久都无果，最后还不如直接看代码改来得快。。。</span><br><span class=\"line\"></span><br><span class=\"line\">好在`highlightjs`提供了这个：</span><br><span class=\"line\"></span><br><span class=\"line\">```js</span><br><span class=\"line\">// ignore languages</span><br><span class=\"line\">&lt;script&gt;hljs.configure(&#123; ignore: [&apos;text&apos;] &#125;);&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>然后看Jekyll源码，找到了 <code>jekyll/lib/jekyll/converters/markdown/kramdown_parser.rb</code> (see <a href=\"https://github.com/jekyll/jekyll/blob/57fd5f887da1189a16bdfbb982d75f725c38d725/lib/jekyll/converters/markdown/kramdown_parser.rb\" target=\"_blank\" rel=\"noopener\">code</a>) </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">convert</span><span class=\"params\">(content)</span></span></span><br><span class=\"line\">  Kramdown::Document.new(content, @config).to_html</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>接着看kramdown源码，找到了<code>kramdown/lib/kramdown/converter/html.rb</code> (see <a href=\"https://github.com/gettalong/kramdown/blob/f4cdae257159ce0addf542739fed262e4a2cf401/lib/kramdown/converter/html.rb\" target=\"_blank\" rel=\"noopener\">code</a>) </p>\n<p>在我的本地电脑中，相关文件位于<code>/usr/local/lib/ruby/gems/2.4.0/gems/kramdown-1.14.0/lib/kramdown/converter/html.rb</code>。</p>\n<p>找到<code>def convert_codeblock(el, indent)</code>函数进行修改：</p>\n<p>在代码<code>code_attr[&#39;class&#39;] = &quot;language-#{lang}&quot; if lang</code> 前添加：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> lang.<span class=\"literal\">nil</span>?</span><br><span class=\"line\">  lang = <span class=\"string\">\"text\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>并将代码<code>if highlighted_code</code> 改为 <code>if highlighted_code &amp;&amp; lang</code>。</p>\n<p>（其中，<code>nil</code>是判空的意思。）</p>\n<p>这样在不指明语言的时候，不高亮显示。</p>\n<hr>\n<p>上面是mac环境下，可以直接改代码。但是在linux环境下，只有一个二进制执行文件。</p>\n<p>于是，先删除原有的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo gem uninstall kramdown</span><br></pre></td></tr></table></figure>\n<p>然后在官网<a href=\"https://github.com/gettalong/kramdown/releases\" target=\"_blank\" rel=\"noopener\">下载源码</a>重新安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ruby setup.rb config</span><br><span class=\"line\">$ ruby setup.rb setup</span><br><span class=\"line\">$ ruby setup.rb install</span><br></pre></td></tr></table></figure>\n<p>好吧，暂时没弄好。。。</p>\n<h2 id=\"Else\"><a href=\"#Else\" class=\"headerlink\" title=\"Else\"></a>Else</h2><h3 id=\"Permalinks\"><a href=\"#Permalinks\" class=\"headerlink\" title=\"Permalinks\"></a>Permalinks</h3><p>在<code>_config.yml</code>中设置，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">permalink: /:categories/:year/:month/:day/:title.html</span><br></pre></td></tr></table></figure>\n<h3 id=\"footer\"><a href=\"#footer\" class=\"headerlink\" title=\"footer\"></a>footer</h3><p>当页面内容长度不够时，footer显示位置可能有问题。</p>\n<p>让footer内容永远处于最末端：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">$height-footer: 40px;</span><br><span class=\"line\"></span><br><span class=\"line\">html &#123;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">    min-height: 100%;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    padding-bottom: $height-footer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.footer &#123;</span><br><span class=\"line\">    bottom: 0;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    height: $height-footer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>子元素的百分比高度也可以基于父元素的百分比高度，前提是父元素的父元素必须有一个明确的高度。要使<code>min-height</code>的百分比值生效，其父元素的<code>height</code>值必须为一个固定的高度或者是一个有效的百分比高度。</p>\n<h2 id=\"Problems\"><a href=\"#Problems\" class=\"headerlink\" title=\"Problems\"></a>Problems</h2>`{{ xxx }}` 或者 `{% xxx %}` 显示不出来。<br><br>解决方式：<br><br>（1）<br><br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\&#123;\\&#123; xxx \\&#125;\\&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）参考：<a href=\"https://stackoverflow.com/questions/24102498/escaping-double-curly-braces-inside-a-markdown-code-block-in-jekyll\" target=\"_blank\" rel=\"noopener\">Escaping double curly braces inside a markdown code block in Jekyll</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% assign openTag = &apos;&#123;%&apos; %&#125;&#123;&#123; openTag &#125;&#125; raw %&#125;    </span><br><span class=\"line\">This is a test: &#123;% raw %&#125;&#123;&#123; xxx &#125;&#125;&#123;% endraw %&#125;</span><br><span class=\"line\">&#123;&#123; openTag &#125;&#125; endraw %&#125;</span><br></pre></td></tr></table></figure>\n<p>（3）那么问题又来了，如何显示上面的 raw 和 endraw 呢？参考：<a href=\"http://www.cnblogs.com/OceanHeaven/p/6959669.html\" target=\"_blank\" rel=\"noopener\">jekyll 如何转义字符</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen [::]:80;</span><br><span class=\"line\">    server_name comments.lszero.com;</span><br><span class=\"line\">    </span><br><span class=\"line\">    location /isso &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:8090;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"line\">        proxy_set_header X-Script-Name /isso;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjminjcwg0000kdbbr5ciax71","category_id":"cjminjcwl0002kdbbzvp5tmjm","_id":"cjminjcwv000ckdbba9hcace7"},{"post_id":"cjminjcwj0001kdbb90r4bpp1","category_id":"cjminjcws0007kdbbku7zy0fk","_id":"cjminjcwy000hkdbbnvewegnf"},{"post_id":"cjminjcwo0004kdbbp82h4012","category_id":"cjminjcwv000dkdbb05p39wqq","_id":"cjminjcx3000okdbb7j4nbe2j"},{"post_id":"cjminjcwq0005kdbbgulymcl0","category_id":"cjminjcwz000ikdbbgtut6s9r","_id":"cjminjcx5000ukdbb8whfklub"},{"post_id":"cjminjcwr0006kdbbfxfl2mg0","category_id":"cjminjcx3000pkdbbly2ica7d","_id":"cjminjcxa0012kdbbn65qdkph"},{"post_id":"cjminjcwt000akdbbnxpb4qjp","category_id":"cjminjcx6000wkdbbzlj8u4q1","_id":"cjminjcxb0016kdbbixrun50v"},{"post_id":"cjminjcwu000bkdbbf72yks48","category_id":"cjminjcxa0014kdbbs48t2x9j","_id":"cjminjcxc001bkdbbadniw1fy"},{"post_id":"cjminjcww000fkdbbxe2f6c2i","category_id":"cjminjcxb0017kdbbcdb0wnf5","_id":"cjminjcxd001fkdbbhcnuc4yf"},{"post_id":"cjminjcwx000gkdbb8qpa1rab","category_id":"cjminjcx6000wkdbbzlj8u4q1","_id":"cjminjcxd001ikdbbap867yf7"},{"post_id":"cjminjcwz000kkdbbdxgejci9","category_id":"cjminjcxc001ekdbbv484x7p7","_id":"cjminjcxe001nkdbbwaocf495"},{"post_id":"cjminjcx2000mkdbb68m9kgiv","category_id":"cjminjcxd001kkdbb8x4cw3yv","_id":"cjminjcxf001qkdbbmyn3uv4j"},{"post_id":"cjminjcx3000rkdbb1g2nwiqb","category_id":"cjminjcxe001okdbb9cnxfz9o","_id":"cjminjcxg001vkdbbgnc21zsw"},{"post_id":"cjminjcx6000vkdbbqsmdmpmh","category_id":"cjminjcxf001rkdbbn82n1nlh","_id":"cjminjcxi001ykdbbv8x6aoql"},{"post_id":"cjminjcx8000zkdbbp76jwbtq","category_id":"cjminjcxg001wkdbb879y5lav","_id":"cjminjcxi0023kdbb1wdsaonm"},{"post_id":"cjminjcx90011kdbb08osjdjp","category_id":"cjminjcxi001zkdbbpvg6vxd1","_id":"cjminjcxk002akdbbrgo7xhjm"},{"post_id":"cjminjcx90011kdbb08osjdjp","category_id":"cjminjcxi0024kdbbvliwi02b","_id":"cjminjcxk002ckdbbw3ahf7qo"},{"post_id":"cjminjcy7002tkdbbgxsb6dcb","category_id":"cjminjcwv000dkdbb05p39wqq","_id":"cjminjcy8002vkdbbyndphnzs"}],"PostTag":[{"post_id":"cjminjcwq0005kdbbgulymcl0","tag_id":"cjminjcwn0003kdbb2xigu88g","_id":"cjminjcws0009kdbbeugti296"},{"post_id":"cjminjcwg0000kdbbr5ciax71","tag_id":"cjminjcwn0003kdbb2xigu88g","_id":"cjminjcx2000lkdbbrz8tmrj4"},{"post_id":"cjminjcwg0000kdbbr5ciax71","tag_id":"cjminjcws0008kdbbhbdbtx6p","_id":"cjminjcx3000nkdbbkvr2rszu"},{"post_id":"cjminjcwg0000kdbbr5ciax71","tag_id":"cjminjcwv000ekdbbkkwkbv6m","_id":"cjminjcx4000skdbbgrnaw2hu"},{"post_id":"cjminjcwj0001kdbb90r4bpp1","tag_id":"cjminjcwz000jkdbb84t4qrfy","_id":"cjminjcx8000ykdbbo8euxoxi"},{"post_id":"cjminjcwj0001kdbb90r4bpp1","tag_id":"cjminjcx3000qkdbb3fn02fmi","_id":"cjminjcx90010kdbb4sxbqzh0"},{"post_id":"cjminjcwo0004kdbbp82h4012","tag_id":"cjminjcwn0003kdbb2xigu88g","_id":"cjminjcxb0018kdbbxmvf6q6k"},{"post_id":"cjminjcwo0004kdbbp82h4012","tag_id":"cjminjcws0008kdbbhbdbtx6p","_id":"cjminjcxb0019kdbbpvhworwo"},{"post_id":"cjminjcwr0006kdbbfxfl2mg0","tag_id":"cjminjcxb0015kdbbrfnn2dy7","_id":"cjminjcxd001gkdbbu85m8hnu"},{"post_id":"cjminjcwr0006kdbbfxfl2mg0","tag_id":"cjminjcxc001akdbbshpn3555","_id":"cjminjcxd001hkdbbeqmnpng6"},{"post_id":"cjminjcwt000akdbbnxpb4qjp","tag_id":"cjminjcxc001dkdbbvgk8hbwn","_id":"cjminjcxe001lkdbbfun9yxdn"},{"post_id":"cjminjcwu000bkdbbf72yks48","tag_id":"cjminjcwz000jkdbb84t4qrfy","_id":"cjminjcxf001skdbbcp4eom5k"},{"post_id":"cjminjcwu000bkdbbf72yks48","tag_id":"cjminjcxe001mkdbbn205i08q","_id":"cjminjcxf001tkdbbso9ohqzk"},{"post_id":"cjminjcww000fkdbbxe2f6c2i","tag_id":"cjminjcxf001pkdbby6ay5np1","_id":"cjminjcxi0020kdbbocnty1n4"},{"post_id":"cjminjcww000fkdbbxe2f6c2i","tag_id":"cjminjcxc001akdbbshpn3555","_id":"cjminjcxi0021kdbbkke8mito"},{"post_id":"cjminjcwx000gkdbb8qpa1rab","tag_id":"cjminjcwz000jkdbb84t4qrfy","_id":"cjminjcxj0026kdbb63s4byyl"},{"post_id":"cjminjcwx000gkdbb8qpa1rab","tag_id":"cjminjcxi0022kdbbclwtzpb6","_id":"cjminjcxj0027kdbbsr5e83kc"},{"post_id":"cjminjcwz000kkdbbdxgejci9","tag_id":"cjminjcxj0025kdbbz26f43d5","_id":"cjminjcxk0029kdbb8xsk4wkd"},{"post_id":"cjminjcx2000mkdbb68m9kgiv","tag_id":"cjminjcxj0028kdbb6c0ga5l4","_id":"cjminjcxk002dkdbba1gvcqee"},{"post_id":"cjminjcx3000rkdbb1g2nwiqb","tag_id":"cjminjcxk002bkdbb6ydypzlw","_id":"cjminjcxl002fkdbbwk1o08cr"},{"post_id":"cjminjcx6000vkdbbqsmdmpmh","tag_id":"cjminjcxl002ekdbbzo9ixk01","_id":"cjminjcxm002jkdbboh0p19ev"},{"post_id":"cjminjcx6000vkdbbqsmdmpmh","tag_id":"cjminjcxb0015kdbbrfnn2dy7","_id":"cjminjcxm002kkdbbcl08rg8a"},{"post_id":"cjminjcx6000vkdbbqsmdmpmh","tag_id":"cjminjcxf001pkdbby6ay5np1","_id":"cjminjcxm002mkdbbjx5a2qa5"},{"post_id":"cjminjcx8000zkdbbp76jwbtq","tag_id":"cjminjcxm002ikdbbypyezry0","_id":"cjminjcxn002nkdbbf02nrcit"},{"post_id":"cjminjcx90011kdbb08osjdjp","tag_id":"cjminjcxm002lkdbb4b5hvvk2","_id":"cjminjcxn002pkdbb2jee396j"},{"post_id":"cjminjcx90011kdbb08osjdjp","tag_id":"cjminjcxn002okdbbt690zfou","_id":"cjminjcxn002qkdbbkc7d65gr"},{"post_id":"cjminjcy7002tkdbbgxsb6dcb","tag_id":"cjminjcy8002ukdbbfoikq7b9","_id":"cjminjcy9002xkdbbvdx09fux"},{"post_id":"cjminjcy7002tkdbbgxsb6dcb","tag_id":"cjminjcwn0003kdbb2xigu88g","_id":"cjminjcy9002ykdbb4sncdsb4"},{"post_id":"cjminjcy7002tkdbbgxsb6dcb","tag_id":"cjminjcy8002wkdbb2xt87io1","_id":"cjminjcy9002zkdbbom9i1zhq"}],"Tag":[{"name":"jekyll","_id":"cjminjcwn0003kdbb2xigu88g"},{"name":"blog","_id":"cjminjcws0008kdbbhbdbtx6p"},{"name":"multisites","_id":"cjminjcwv000ekdbbkkwkbv6m"},{"name":"学习","_id":"cjminjcwz000jkdbb84t4qrfy"},{"name":"Go","_id":"cjminjcx3000qkdbb3fn02fmi"},{"name":"linux","_id":"cjminjcxb0015kdbbrfnn2dy7"},{"name":"ssh","_id":"cjminjcxc001akdbbshpn3555"},{"name":"年终总结","_id":"cjminjcxc001dkdbbvgk8hbwn"},{"name":"python","_id":"cjminjcxe001mkdbbn205i08q"},{"name":"shell","_id":"cjminjcxf001pkdbby6ay5np1"},{"name":"雪","_id":"cjminjcxi0022kdbbclwtzpb6"},{"name":"kafka","_id":"cjminjcxj0025kdbbz26f43d5"},{"name":"PHP","_id":"cjminjcxj0028kdbb6c0ga5l4"},{"name":"小程序","_id":"cjminjcxk002bkdbb6ydypzlw"},{"name":"yum","_id":"cjminjcxl002ekdbbzo9ixk01"},{"name":"mac","_id":"cjminjcxm002ikdbbypyezry0"},{"name":"内网","_id":"cjminjcxm002lkdbb4b5hvvk2"},{"name":"ngrok","_id":"cjminjcxn002okdbbt690zfou"},{"name":"github","_id":"cjminjcy8002ukdbbfoikq7b9"},{"name":"bootstrap","_id":"cjminjcy8002wkdbb2xt87io1"}]}}